<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell&#39;s Home</title>
    <link>http://shell909090.org/</link>
    <description>Recent content on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Tue, 11 Oct 2016 13:54:05 +0800</lastBuildDate>
    <atom:link href="http://shell909090.org/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>贝加尔湖旅游指南</title>
      <link>http://shell909090.org/blog/archives/2843/</link>
      <pubDate>Tue, 11 Oct 2016 13:54:05 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2843/</guid>
      <description>&lt;p&gt;首先说明，这是一篇旅游指南，里面都是旅行相关信息。想看游记的可以退散了。废话不多说，上干货吧。&lt;/p&gt;

&lt;p&gt;贝加尔湖（Baikal Lake，俄文：Озеро Байкал）位于俄罗斯的Irkutsk州（俄文：Иркутск）。一般来说，会直飞Irkutsk机场，然后再过去。Irkutsk在东八区，和北京没有时差。整个地区的通行货币是卢布（RUB，有时能看到py6一样的文字，руб，那个是俄语的卢布），兑人民币（CNY）汇率大约是1:10（1CNY = 10RUB）。整个地区通行语言是俄语。以我的体验来说，英语使用率比中国还低。这一路也算是商业旅游线路了，除了导游外，能流畅使用英语的人只有两个。大部分人只能勉强使用几个英语单词，好的可以说一下短语。所以在这个地区旅游，需要做好语言不通的准备。&lt;/p&gt;

&lt;p&gt;这里我推荐google翻译。google翻译除了能够打字翻译以外，还能将图片上的文字实时的翻译出来（不过似乎只限于打印体）。这在买东西/看招牌的时候非常管用。不过就我测试，这个好像只能在俄文和英文间互相翻译。幸好以我和喵的英语来说，没什么大区别。当然，除了google翻译以外，最好还准备一些简单的俄语单词和沟通方法（比手画脚），以备不时之需（例如没有网络情况下无法翻译）。&lt;/p&gt;

&lt;p&gt;我们已经提前买好了tele2的电话卡，在整个俄罗斯期间都可以顺利的上网和打电话，因此并不特别担心通讯问题。不过在前往Olkhon Island（俄语：Ольхон）的途中没有信号（是的，途中无信号，岛上反而有信号），有些偏远地方和地下室也是没有信号的。俄罗斯的手机很奇怪。区号是007，我们都是俄罗斯手机号，互相拨打是不加区号的。但是我们拨打别人电话的时候要加8，别人拨打我们电话的时候不要加8。非常复杂，容易搞错。我至今不理解为什么。&lt;/p&gt;

&lt;p&gt;去往俄罗斯之前，最好准备好电话卡或者其他上网设备。这样可以查询在线翻译，避免一些尴尬问题。同时，俄罗斯有时比较冷（但是最热的时候居然有30多度），所以一定要注意保暖。衣服最好是大衣+室内穿着的组合。因为很多地方有暖气，所以进入室内后需要脱下大衣。不少景点有专门的衣帽间，可以帮你把衣服挂起来。挂的时候注意提前把值钱物品和证件从衣服里拿出来。&lt;/p&gt;

&lt;p&gt;我们是报的跟团游，所以无需办理签证。后来我查了一下，中国公民团体游可以15日内免签。自由行乘客还是必须照旧出签。Irkutsk机场的出入境机构动作不是很快，普通游客可能要在移民大厅里面等很久。&lt;/p&gt;

&lt;p&gt;Baikal以自然风光而闻名，最好的季节在冬季和夏季（是的，我们去的时候反而是淡季）。Irkutsk旁边有个小镇，叫做Listvyanka（俄语：Листвянка），大约有一个多小时车程。这个小镇在Baikal Lake和Angara River（俄语：Река Ангара）的分界口附近，是Baikal Lake的重要码头，以鱼市，潜水和观光闻名。我本来在Listvyanka报了潜水（干衣）。结果下雪，潜导在船上，没回来，就没潜成。同行的一些人报了小火车的线路，从Irkutsk坐车，换小火车沿着Baikal Lake转半圈。中间会停靠几站，让你下去拍拍照。然后再上车继续。火车最后会停靠在Baikal Bay（俄文：Байкал），换渡轮游览Baikal。最后也是从Listvyanka下的船，坐车回酒店。据去过的人说挺有趣，有兴趣的可以试试。&lt;/p&gt;

&lt;p&gt;我们住在Irkutsk和Listvyanka之间的一个叫Elochka（俄语：Елочка）的松林别墅里面（说白了就是郊外，便宜）。出门100米就是Angara River的支流，窗外就是松树。路上能看到松鼠，麻雀和啄木鸟。一点都不怕人，赶都赶不走。有的时候松鼠还会跳到你身上来。但是基础设施超级差。没有饭店，只能定时去吃食堂。没有车来返市区，只能打出租。出租还算便宜，丰田的小皮卡，开到市中心半小时，也只有500RUB而已。&lt;/p&gt;

&lt;p&gt;Irkutsk基本没有出租扬招，都是打电话预订出租，而且都是俄语。但是你可以在酒店或者游客中心找到会英语的前台帮你预订。室内交通主要都是Bus。同时，室内还有几条有轨电车在运行，有兴趣的可以试试，单次乘坐15RUB左右。&lt;/p&gt;

&lt;p&gt;第三天开始，我们就从Irkutsk出发，上Olkhon Island。从Irkutsk到Olkhon Island大约是4-5小时车程，路上很多地方没有信号。窗外是大片的寒带草原，有的地方是草原和西伯利亚针阔混交林过渡区。地势连绵起伏。有的地方一马平川一望无垠，有的地方则高耸陡峭。但是战斗民族的修路很有特色。我们正常修路都是盘山，路不会是直的，以免刹车出问题。他们的路是笔直从高处冲下，又长又直，像是水上公园的滑梯。&lt;/p&gt;

&lt;p&gt;去Olkhon岛的路上，就到了Buryat人（俄文：Буряад，蒙古文：ᠪᠣᠷᠢᠶᠠᠳ）的地盘。其实Baikal Lake应该是在Irkutsk和Buryatiya的中间。Buryat是蒙古的分支，原来称呼为林中百姓，或不里牙惕。当地特色食物是什么？包子！猪肉和牛肉混合馅，加上洋葱。吃的时候要加酱油，然后吸出汤汁，再吃包子。大致吃法和小笼包非常类似。&lt;/p&gt;

&lt;p&gt;上Olkhon岛之前要坐渡轮，渡轮是人车混载渡轮。下船之后要坐当地特有的一种老式车“土坦克”（УАЗ）。岛上的路说是烂，不如说根本没有路。前面的车一压，就成了路。不过即使如此，这路况评价起来也好过去珠峰大本营的时候。&lt;/p&gt;

&lt;p&gt;岛上地势东高西低，南缓北陡。北边地势高耸，都是高高的悬崖直冲入海。西边是个平缓的坡，Khuzhir村（俄语：Поселок Хужир）和Shaman Rocks（俄语：Шаман Скалы）就在这个地方。Shaman Rocks是萨满教的圣地，也是Olkhon Island的地标。岛上的基站架设在Khuzhir村，所以远离村子的地方是没有信号的。村子里面有一个小教堂，一个学校，一个博物馆，一个邮局。&lt;/p&gt;

&lt;p&gt;他们的主路叫做ul Baykalskaya（俄语：Байкальская ул），东西走向，意思是贝加尔大街。实际上是一条尘土飞扬的烂路，而且没有铺设任何路面。西边直冲码头，铁栅栏上有个红色的五角星。导游说是因为原来这里是个捕鱼和加工厂，村子是围绕着鱼场建的。后来捕捞过量产量减少，加上自然生态保护。鱼场就被废弃了。&lt;/p&gt;

&lt;p&gt;主路的中心是学校和邮局，博物馆在学校的里面（是的，里面）。我们去的时候翻译了一下告示，似乎是周末不开，于是就没进去。邮局就在学校南边一点。你可以在村子里买到各种明信片，然后在邮局购买邮票邮回来。到中国的邮费是35RUB。&lt;/p&gt;

&lt;p&gt;博物馆西边一点，有个挺大的商店，店主是个亚洲人长相的女的，我怀疑是蒙古族（Buryat）。如果你到这家店的话，可以买一点鸡翅膀吃。我不会说俄语，所以不知道是什么的肉。不过我怀疑是火鸡肉。很好吃。同一家店里面还有格瓦斯（俄文：KBAC）。你可以稍微买一点尝尝。我家猫说和中国的版本差异很大，她喝不惯。&lt;/p&gt;

&lt;p&gt;村子里有各种奇葩项目。例如坐船出海，或者坐飞机（是的，飞机）。还有更常见的骑马和租自行车环村。不过现在是淡季，很多项目终止了。我们打听到有船，但是看湖面上波涛汹涌，回忆了一下Koh Tao上坐大船还被摇到吐了的恐怖，再看看他们的船的大小。我们明智的放弃了这个活动。&lt;/p&gt;

&lt;p&gt;常规旅游线路是南线和北线。北线包含在行程里面了，南线自费。我们跟着团去了北线。印象比较深刻的就是合波角（Cape Choboi，俄文：Мыс Хобой），整个岛的最北边。风大的能把人吹跑。我这么重的体重，居然有的时候控制不住会被吹的斜迈一步。另外就是午餐野炊的时候司机烧的鱼汤，非常鲜美。&lt;/p&gt;

&lt;p&gt;这里特别说一点，Olkhon Island旅游始终是有比较大的生态争议的。主要是垃圾处理和当地居民违法使用木材。具体可以看&lt;a href=&#34;https://en.wikipedia.org/wiki/Olkhon_Island&#34;&gt;这里&lt;/a&gt;。如果你对生态方面有特别的顾虑，请考虑这些问题。&lt;/p&gt;

&lt;p&gt;我们在Olkhon Island呆了两天就又回到Irkutsk游览，下面就是一些Irkutsk的游览建议。Irkutsk比较市中心的地方在Spasskaya Tserkov(俄文：Спасская Церковь)附近。另外就是马克思大街(Karla Marksa St，俄文：ул Карла Маркса)和列宁大街(Lenina St，俄文：ул Ленина)。我们在两者交界的Figaro吃过一次午餐，两个人吃了3000RUB多，还是挺贵的（对当地物价来说）。沙拉量极大，两个人吃一份就够了。浓汤香气扑鼻，加上蒜香面包让人胃口大开。煎鱼和羊排都很上品。比起上海来说，到确实不算贵。毕竟上海要认真吃一顿，也差不多要这个价钱。&lt;/p&gt;

&lt;p&gt;不过Irkutsk的中国菜就糟糕很多了。我们在ul Litvinova（俄文：ул Литвинова）吃的一家China Town Cafe（什么鬼），感觉上就是用马列主义指导的中国特色社会主义实践。在ul. Gorkogo（俄文：ул. Gorkogo）吃的Золотой гусь感觉上也差不多。搞笑的是他们的标语上还写，10月1,2,3，国庆大酬宾，全场八折。反倒是在Sovetskaya St（俄文：ул.Советская）附近（我没仔细记，不确定是不是这里了）的一家非常小的餐厅，中国菜做的非常地道。我们进去的时候好像看到有几个留学生在那里吃饭。&lt;/p&gt;

&lt;p&gt;Irkutsk的博物馆和教堂都很多，很多值得一看。在列宁像（Monument to Lenin，俄文：Памятник Ленин）附近就有三个博物馆。地方志博物馆（Irkutskiy Oblastnoy Kraevedcheskiy Muzey Biblioteka），美术博物馆（Irkutskiy Oblastnoy Khudozhestvennyy Muzey im. V.P.Sukacheva），还有地方博物馆（Muzey Istorii Goroda (Soldaty Otechestva)）。每个博物馆门票都不贵，100-200RUB不等。不过展品也不多，一般半小时到一个小时能看完。以我来看，这三个里面首推美术博物馆，地方志博物馆（Irkutskiy Oblastnoy Kraevedcheskiy Muzey Biblioteka）次之。Muzey Istorii Goroda (Soldaty Otechestva)就没什么意思了。&lt;/p&gt;

&lt;p&gt;教堂首推喀山圣母大教堂（Kazan church，俄文：Казанская церковь）。其他教堂非常多（例如上面说过的Spasskaya Tserkov，还有Знаменский монастырь），就不一一推荐了。&lt;/p&gt;

&lt;p&gt;Irkutsk有很多值得买的东西。自从卢布大幅贬值（大约从1:5到了1:10）之后，当地人的日子就难过了。虽然当地产的蔬菜水果肉什么的价格不变，但是国外流入的产品价格基本暴涨一倍。例如衣服，电器，iPhone什么的。可俄罗斯偏偏是个资源输出型国家，民生有关的大多数东西都是纯购入的。这使得当地居民收入快速下降。据我们导游Алена说，平均月收入大约折合2000CNY，而且很多人找不到工作。所以以前她是带团来中国旅游，现在是接中国来的旅游团。&lt;/p&gt;

&lt;p&gt;Irkutsk特产紫龙晶（charoite beads）。这东西我不大建议买。从储量上说，是挺稀有的。但是1978年才发现，目前市场情况和其他地方的储存情况非常不明朗。至于功效啥的——你说一个才研究了30多年的玩意有啥自古流传的功效可以参考的？而且这东西好运，当地价和外地价如果有大量价差，一个人随身行李里就能带上一堆走。如果喜欢，买一点戴就得了。至于要保健保值什么的，您喜欢就好。。。&lt;/p&gt;

&lt;p&gt;所以有啥可买的？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;巧克力。我们买了一堆导游推荐的同名巧克力（Алена）。&lt;/li&gt;
&lt;li&gt;奶酪。我们不识货，随便买了两种，准备回来试试。&lt;/li&gt;
&lt;li&gt;三文鱼。这个我们买了好多，细分又有好几种。

&lt;ul&gt;
&lt;li&gt;散装：一般都是腌制的，味道稍有点咸，但是还能入口直接吃。如果有条件的话，我大概会拿来烧。&lt;/li&gt;
&lt;li&gt;袋装，油浸：口味淡一些，感觉就是烟熏三文鱼，我们就是直接食用的。&lt;/li&gt;
&lt;li&gt;烟熏三文鱼：大约是200g 16左右的样子。&lt;/li&gt;
&lt;li&gt;散装菜：很多超市提供直接熟菜销售。我们直接买了三条三文鱼腩沙拉回来，鲜嫩多汁，32左右。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;香肠：哈尔滨香肠多有名啊。这可是俄罗斯大香肠。另外，里面一定有蒜。。。&lt;/li&gt;
&lt;li&gt;冰淇淋：味道很浓，一定要试一下。&lt;/li&gt;
&lt;li&gt;Vodka：二锅头高大上版。如果家里有人喝酒，可以带一点回来。&lt;/li&gt;
&lt;li&gt;坚果：我老婆说很不错。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有两点要注意。一是在当地超市（我们是在О&amp;rsquo;КЕЙ），很多时候要拿着会员卡才能按照上面的大字标价买东西。如果没有会员卡，会导致按照小字价格结算。两者之间的差十分明显。我们就在这里被坑了。另一个是，按照国家检验检疫标准，熟制品是不能带入境内的。即三文鱼，香肠，都不能带进来。抽真空也不行。我们反正买的不多，带就带了。万一被抽到就当丢掉。巧克力，坚果应该都没问题。奶酪不确定。Vodka好像是一人限带多少。反正我们加起来1L都没到，怎么也不会超。熟菜我想你应该不会试图带回国吧（虽然我不慎真的把熟菜带了点回来）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>生活中总有一些小精灵会来敲你的门</title>
      <link>http://shell909090.org/blog/archives/2842/</link>
      <pubDate>Sun, 25 Sep 2016 22:24:12 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2842/</guid>
      <description>&lt;p&gt;今天家里来了个不速之客。&lt;/p&gt;

&lt;p&gt;当时我和老婆吃过饭，正在无聊，不知道去哪里玩，结果听到细微的敲门声。老婆开门出去看看，结果发现是一只灰色的短毛猫。老婆当时就觉得很惊奇，拿出家里放着的猫粮来喂猫。（我们偶尔会下楼喂流浪猫，所以家里留着一点猫粮）可是这只猫根本不吃，反而大摇大摆的走进来巡视了一圈。然后捡了个避光的地方一趴。。。&lt;/p&gt;

&lt;p&gt;。。。这霸气，您还真不认生啊。&lt;/p&gt;

&lt;p&gt;这是一只灰色的短毛猫，全身的毛蓬松水滑。到底是英短还是美短，很多朋友有分歧。我老婆说是英短。鉴于我的猫咪知识比她差的太远，所以我们就当是英短吧。下腹有一丛白毛，颜色还是雪白的。肚子鼓鼓的，像是怀了孕。见到猫粮根本不馋，可见平时吃的都是高档猫粮，而且才吃饱。进人家家一点都不认生，转了一圈，却不会去床上或者垫子上。&lt;/p&gt;

&lt;p&gt;这是一只有主的猫，而且从家里跑出来的时间不会超过半天。&lt;/p&gt;

&lt;p&gt;基于这点，老婆很快下楼问了一下物业保安。保安说刚刚一个女的抱了这只猫过来，说是楼里走失的。放在物业就走了。保安也没办法，就锁在厕所。谁知道厕所窗户有条缝，它又顺着窗户跑了。&lt;/p&gt;

&lt;p&gt;这身手，一定是从家里偷溜出来的。&lt;/p&gt;

&lt;p&gt;那问题就比较麻烦了。如果再抱给物业，想必溜掉的可能性是百分百。要找主人，也不是今天能解决的事情。所以老婆让我先问问附近的朋友，我们附近小区有没有什么地区性网站。自己则是骑车去了超市，买个小盆和猫沙给它先用着。我趁着老婆出门的功夫，发了一条推和一条朋友圈。然后才有功夫仔细观察这只猫。&lt;/p&gt;

&lt;p&gt;而这只猫趁我们刚刚在那里忙的功夫，在房间里乱转，到处乱翻，还翻倒了老婆养的花。我赶忙拿扫帚扫掉泥土，以免踩的乱七八糟的。然后唠叨了它两句，结果它坐下来，扒着我的裤子喵了一句。&lt;/p&gt;

&lt;p&gt;不知为何，我瞬间明白了它想干什么，跟着汗就下来了。&lt;/p&gt;

&lt;p&gt;女王大人您行行好，我老婆给您买猫沙去了，买来之前可千万忍住了啊。。。&lt;/p&gt;

&lt;p&gt;然后它继续。。。在家里翻箱倒柜，还差点碰倒了老婆养的插花（底下盛水的那种）。我没办法，只能一路跟着女王大人跑。然后不知为何，想起了英国内阁首席捕鼠官Larry The Cat和它的跟班们。可是这回我可没办法唠叨了，长的好看就是有优势。何况人有三急，猫想必也有。&lt;/p&gt;

&lt;p&gt;正尴尬中，老婆回来了。于是我们赶紧放好小盆，铺猫沙。女王大人一点不客气的坐了上去，然后开始刨。。。&lt;/p&gt;

&lt;p&gt;没有刨猫沙了。它不小心弄翻了猫沙盆，看来这个厕所对它来说实在是太小了。&lt;/p&gt;

&lt;p&gt;等三急落定，它又在屋子里转了一圈。看它这次的行动，像是找地方休息，而且特别偏爱有顶棚的阴暗空间。我猜它原来一定有自己的猫房子，只是我们这里没有，只能委屈它了。等它拣了个好地方趴下，我们稍微合计了一下下面怎么办。从朋友圈上面的反馈来看，很多朋友都很喜欢这只猫，甚至有朋友看到找主人三个字就直接来和我们说要养。我们倒是不担心它的去处，可是从他的种种细节来看，原主一定很宠它，现在应该很着急。可是大晚上的，就算要找也无从入手，所以先让它住着明天再说吧。&lt;/p&gt;

&lt;p&gt;结果这只猫居然主动跑过来和我买萌了。我摸了摸它的背，然后摸了摸它的肚子。这个，好像。。。老婆你来摸摸看？老婆也摸了一圈。用一种不可置信的语气说。好像，难道。。。是太肥了？&lt;/p&gt;

&lt;p&gt;卖过一圈萌，这只猫突然抬起头来四处张望。老婆没反应，我却觉得不对。细听外面，有喊人名字的声音。我赶快让老婆出去问是不是在找猫。&lt;/p&gt;

&lt;p&gt;是。&lt;/p&gt;

&lt;p&gt;什么颜色的？&lt;/p&gt;

&lt;p&gt;灰色的。&lt;/p&gt;

&lt;p&gt;好好，有平时的生活照么？进来给我们看看。&lt;/p&gt;

&lt;p&gt;有。&lt;/p&gt;

&lt;p&gt;老婆一看，就是这只。&lt;/p&gt;

&lt;p&gt;主人进门，大喊一声阿呆（还真是呆，2333），眼圈整个红了。然后猫就蹭了上去。&lt;/p&gt;

&lt;p&gt;看来是正主。&lt;/p&gt;

&lt;p&gt;主人说，他们家在我们楼上两层，这只猫是扒开窗户缝自己跑出来的（果然是惯犯）。他回家发现猫不见了，就赶快出门找，一直找到现在。结合我们知道的消息。这只猫不知如何的，到了一楼。刚跑出楼去，就被一个女的抱了回来，交给了保安。随后它就从保安的厕所逃了出来。又不知怎么的，到了我家这层。在我家门口探头探脑的敲门，给我们瞧了个正着。&lt;/p&gt;

&lt;p&gt;主人说，它运气真好。中间只要差一点点，它就很可能回不来了。我说这得说我们运气好。&lt;/p&gt;

&lt;p&gt;恩？&lt;/p&gt;

&lt;p&gt;不是每天，都有一个小精灵，带着一个完美的故事来敲门的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最近的阿里月饼事件</title>
      <link>http://shell909090.org/blog/archives/2841/</link>
      <pubDate>Thu, 15 Sep 2016 20:35:41 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2841/</guid>
      <description>&lt;p&gt;相信大家都听说过了，原帖在&lt;a href=&#34;https://www.zhihu.com/question/50600301&#34;&gt;这里&lt;/a&gt;。阿里的声明在&lt;a href=&#34;http://tech.sina.com.cn/i/2016-09-14/doc-ifxvyqwa3203236.shtml&#34;&gt;这里&lt;/a&gt;。我简单说一些吧。&lt;/p&gt;

&lt;p&gt;拿js秒杀抢一堆月饼是不好的，当事人也承认这点。不过哪里不好大家观点不一。当事人强调“代码错误”和“好奇测试”。从安全部的职位来说，不是说不过去。不过很明显公司不这么认为。这事扯不上价值观，也不能扯上价值观。如果要扯价值观的话，你就得想想。让一群做渗透出身，见墙上有个圈都要不信邪钻一下的人，去一个对内需要严格管理和反腐的公司。这本身三观里合了哪一观？至于提UC的同学，更是完全没提在点子上。秒杀好不好主要看杀的是谁，也就是所谓的立场决定态度。这才是核心价值观。其他价值观与此冲突者无效。&lt;/p&gt;

&lt;p&gt;这件事本身是公司内务处置，事情还得回归到公司规章制度，岗位职责和合同上去。&lt;/p&gt;

&lt;p&gt;先说最后一个被开掉的人。我不知道阿里的安全岗位有没有对内安全职责，但是一般来说，安全岗位是可以进行内部渗透的（而且这是岗位职责）。你雇了一个警卫过来让他负责安全，就不能因为人家试着从墙角的洞里面钻进来就把人家给开除——那是人家的工作。只是安全渗透通常需要协调很多事情，例如是否对线上造成影响，是否需要通知当事部门。最后那个哥们显然是没有经过协调。不过从事后并没有付钱来说，还是可以认定不是冲着月饼去的。因此事后有没有付钱这点非常重要。当事人讲法是没付，阿里的声明中未提到。&lt;/p&gt;

&lt;p&gt;如果确实没付钱，看到内部秒杀系统似乎没做反刷，写个脚本测试一下。我不知道你们管这叫什么，反正我管这个叫内部测试。这最多只能叫做工作协调有问题，既扯不上价值观，也不违反大部分正常公司的规章。当然，阿里也有可能在安全组规范里面写明了——未经备报批准不得私自进行内部渗透。那这就叫活该了。只是如果安全组有这条规范，我很怀疑内测到底能测出些什么玩意来。你看，按照规范要求，你需要一个个产品线的和对方的老大去谈，获得许可后测试。可是基本最新的，出漏洞可能性最大的系统，全都是要求赶紧上线，没时间全面考量安全性的。可黑客不归阿里的安全组规范管啊。&lt;/p&gt;

&lt;p&gt;前面一个哥们的行为则更不好说一点——他确实是冲着月饼去的——一盒。只不过由于程序故障，所以造成刷了一堆月饼出来。所以这里是两件罪——用脚本刷月饼，刷多了。&lt;/p&gt;

&lt;p&gt;脚本刷月饼是不是道德，最近有一堆朋友反复论述过了，我这里就不赘述了。在我眼里看来，用脚本去刷一盒月饼不能叫不道德。如果自动化脚本代替人操作就能叫不道德的话，你把密码存在浏览器里面，不亲自填写登录信息是不是应该叫欺诈？你看，银行让你设定密码，是希望你（这个人）去输入密码来验证自己身份的。结果你到好，用一个自动化工具帮你输入密码，欺骗银行，让他以为是你输入的。这是不是欺诈？&lt;/p&gt;

&lt;p&gt;对于程序员来说，写个脚本帮自己刷点什么太正常了。有些程序员写脚本，看到自己晚上9点后还登录在服务器上的话，就给老婆发封邮件说要加班今天回不去了。有的程序员写个程序，定期给老婆的朋友圈全部点赞。我有很多邮件甚至不是亲自读的——直接写个脚本爬下来，然后分析一下内容。有关键词才看，没有的话存档然后定期看一眼标题就行。程序员学得一身通天彻地的屠龙术，其实搞到头只有这点羊毛可以薅，你们还在那里大叫不公平。那我们每天晚上自己加码学这些技术的时候，怎么没听有人说，“这个得算加班”啊？&lt;/p&gt;

&lt;p&gt;至于刷多了的问题，这叫程序有bug——可是程序有bug不能叫程序员道德败坏吧，否则阿里的反腐难道是在HR的主持下集体抓bug的工作？&lt;/p&gt;

&lt;p&gt;当然，另一种可能就是，当事人确实是想多买几盒月饼。只不过后面事情闹大了，又不能推在临时工头上，所以只能说脚本有bug。不过据当事人声称，事后打过电话想退回多余月饼。如果这点属实，也可以排除想多刷月饼的可能。因此事后是否曾打电话要求退回月饼非常重要。同样，当事人讲法是打了，阿里的声明中未提到。&lt;/p&gt;

&lt;p&gt;所以，此人可以以技术不过关的名义辞退，但是却不应以试图刷月饼的名义辞退。因为他确实在写程序时考虑不周，对线上业务造成了影响。这在安全组工作中属于过失。没错。&lt;/p&gt;

&lt;p&gt;内务处理，很多时候只能看出发点和动机，甚至有时没什么可以参考的。要参考的话，内部多出来的月饼用秒杀，这又是合了哪条规了？要是软件公司每件事物都要参考规章来办事的话，索性还是关关门大家去应聘公务员来的快一点。很多时候本来就是没什么规章的情况下大家估摸着办，办好了就成了规章。办砸了，如果本人不是蓄意做砸的话，都属于还可以抢救一下的范畴。最多是技术不够/工作不够热情/协调能力不足/运气不好反正你办砸了怎么也得来个差评。惩治一下就行了，否则还有哪个愿意当这个出头鸟来办事？&lt;/p&gt;

&lt;p&gt;整件事情上，个人观点，觉得惩罚出手太重了。一般来说，这种事情退回月饼，通报批评，扣除当年奖金已是重罚。开除已经是在严打了。开除加上对外点名。。。要知道所谓杀人不过头点地，今天你打倒在地还要踏上一只脚，叫他永世不得翻身。。。&lt;/p&gt;

&lt;p&gt;总体结论，阿里系的安全恐怕要打个问号。即使现在没问题，将来也不排除这种可能。做内部涉安全测试的同学，就根本不能想测哪里测哪里。如果测砸了。OK，价值观不符，开除。测过了，没有线上影响，确实有bug，需要赶快修复。OK，等着你的不是嘉奖，而是仍旧价值观不符，开除。那什么最安全？当然是领导说要哪里安全就哪里安全，说要多安全就有多安全。多余的事情不要多问，不要多听，不要多想。这也确实是合了阿里的价值观，一个对内严格管理，加大力度反腐的公司，是不应当有一群看什么都不爽要亲自拆一下看看的猴子的。只是这样的安全组能起多大作用，自己想吧。&lt;/p&gt;

&lt;p&gt;最后补一下合法问题。合法性上，不好说。毕竟阿里给出的台面理由是“价值观不合”。阿里有没有把“价值观”定义为劳动雇佣合同中的一部分，我没看过合同，所以不知道。这和fb的case有差别。因为fb是把企鹅定义成了竞争对手，所以带着竞争对手的人来公司参观是明显违反保密原则的。白纸黑字毋庸置疑。更不提这也违反了H1b签证要求。而如果阿里并没有将“价值观”定义为员工要件之一，这种情况就和以“八字血型和公司名字不合”解除合同一样，属于甲方无正常理由解除合同。理应给予补偿。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用Jupyter制作slides</title>
      <link>http://shell909090.org/blog/archives/2840/</link>
      <pubDate>Thu, 08 Sep 2016 12:06:15 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2840/</guid>
      <description>&lt;p&gt;Jupyter是ipython notebook的新名字。可能很少有人知道，这个玩意居然还能制作slide。&lt;/p&gt;

&lt;p&gt;可能有人有印象，我做过一个markdown to slides生成器，底下用的是reveal.js。今天才发现，jupyter也有类似的功能，底层也是reveal.js。不过用起来比我自己写的东西方便多了。&lt;/p&gt;

&lt;p&gt;用法很简单。首先在View菜单里，使用Toggle Toolbar功能打开toolbar（如果已经打开就不用管）。在toolbar里能看到一项叫做Cell Toolvar的，后面一般是None。请转换为Slideshow。此时你能看到每个Cell都会多出一条来，上面有Slide Type。&lt;/p&gt;

&lt;p&gt;Slide Type有六个选项，默认是啥都没有。后面依次是Slide，Sub-Slide，Fragment，Skip，Notes。Slide和Sub-Slide是主要的选项。在reveal.js里，Slide是指左右切换的那些页，而Sub-Slide则是你切到一个Slide后，按向下逐渐出现的一些页。这类似于章和节的关系。章和章之间左右切换，节和节之间上下切换。而如果选择为默认，那么就不开新页，跟在前面的页面里。&lt;/p&gt;

&lt;p&gt;Skip的话，这个Cell会在Slide里跳过看不见。有很多时候，我们需要在Slide里嵌入Python代码。但是代码又有的时候需要做一些额外事情，我们不希望出现在Slide里面。如果将这些额外代码运行后删除，又恐怕下一次跑这个notebook跑不动。这时候就可以设定为Skip。&lt;/p&gt;

&lt;p&gt;Notes原则来说是给slide里面加注释用的。照理说在页面上按s就可以跳出提示，但是我测试下来跳出来却是空的。看了一下页面源码，确实是有东西的。可能是因为我使用的是静态的文件，而没有开启服务的关系。&lt;/p&gt;

&lt;p&gt;Fragment我也不知道干什么用的。看名字好像是代码碎片一类的，如果有知道的可以告诉我一下。&lt;/p&gt;

&lt;p&gt;最后，用nbconvert就可以把结果转换为html来用。方法是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ipython nbconvert --to slides --reveal-prefix &amp;quot;http://cdn.jsdelivr.net/reveal.js/2.6.2&amp;quot; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之所以要加reveal-prefix，是因为最新的reveal和jupyter生成的html不兼容。&lt;/p&gt;

&lt;p&gt;生成过程需要使用nodejs，记得安装。&lt;/p&gt;

&lt;p&gt;生成出来的Html就是个彻头彻尾的slide了。原则上，同一个ipynb也可以生成html或者pdf（借助reveal.js自身的pdf打印功能）。这样的话slide也有分发能力。&lt;/p&gt;

&lt;p&gt;玩的愉快。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOS 6下安装Python2.7</title>
      <link>http://shell909090.org/blog/archives/2839/</link>
      <pubDate>Wed, 24 Aug 2016 15:30:59 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2839/</guid>
      <description>&lt;p&gt;我以为只有我不知道，不过看来大家都不知道。&lt;/p&gt;

&lt;p&gt;很多时候，我们还得维护CentOS 6的设备。这件事很大程度上不是我们能决定的。但是CentOS 6的默认Python是2.6，很多最新的代码无法执行。例如Django，必须使用Python2.&lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;.&lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;.5。ansible好像也要求新版本Python。&lt;/p&gt;

&lt;p&gt;作为CentOS管理员，第一个想法当然是编译。但是在CentOS 6下，不应该自行编译Python。因为Python的编译有很多坑，例如默认没有内置readline，没有内置sqlite。你不信编译了试试看？我直接从源码编译是不行的。&lt;/p&gt;

&lt;p&gt;有的同学提出想法说，可以下在srpm包然后和Python2.7的source code做compatible。但是我要说一个比这个简单的多的官方方法——RHSCL。&lt;/p&gt;

&lt;p&gt;RHSCL的全称是Red Hat Software Collections。旨在于在长期支持版本中提供最新版本的动态语言和数据库支持。&lt;a href=&#34;https://access.redhat.com/support/policy/updates/rhscl&#34;&gt;这里&lt;/a&gt;是RHSCL支持的基础工具和版本。&lt;a href=&#34;https://www.softwarecollections.org/en/scls/rhscl/python27/&#34;&gt;这里&lt;/a&gt;是说明性文档。具体方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 1. Install a package with repository for your system:
# On CentOS, install package centos-release-scl available in CentOS repository:
$ sudo yum install centos-release-scl

# On RHEL, enable RHSCL repository for you system:
$ sudo yum-config-manager --enable rhel-server-rhscl-7-rpms

# 2. Install the collection:
$ sudo yum install python27

# 3. Start using software collections:
$ scl enable python27 bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一定要注意最后一条指令。RHSCL并没有将Python安装到系统路径下，因此需要用特别的指令来配置环境，启用python2.7。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gpg pubkey ID碰撞</title>
      <link>http://shell909090.org/blog/archives/2838/</link>
      <pubDate>Wed, 20 Jul 2016 00:07:59 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2838/</guid>
      <description>&lt;p&gt;昨天和朋友碰了个头，然后做了交叉签署。&lt;/p&gt;

&lt;p&gt;朋友签署完了，还没上传签署的时候。我手贱（幸好手贱）去server上update了一下我的key。结果发现多出一支key回来。&lt;/p&gt;

&lt;p&gt;纳尼？&lt;/p&gt;

&lt;p&gt;上pgp.mit.edu去搜我的邮箱，一堆key。我废弃过不少key，这就算了。有一支2014年签署的key引起了我的注意，因为ID和我的KeyID完全一致，UserID也一样。显然这是撞出来的，不过我不记得自己有做过这样的事情。&lt;/p&gt;

&lt;p&gt;下面是我的真实key的fp：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2276 57F3 6E16 9B90 4186  2EBF 29A9 7386 0914 A01A&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是有问题的那支key的fp：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;875D 447A E720 9037 84A0  7888 909F 2614 0914 A01A&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以看到，两者最后部分完全一致，这导致两者有同样的KeyID。&lt;/p&gt;

&lt;p&gt;我点进去看了一下，后面一支key完全不是我的，签的情况也乱七八糟。但是UserID显然一致。然后汗毛一竖赶紧通知朋友。朋友看了一眼，果然签错成那支假的了。&lt;/p&gt;

&lt;p&gt;我擦，我给你写我的fp是签名留念用的吗？&lt;/p&gt;

&lt;p&gt;一般来说，签名很难吊销。他要是签错了，那就麻烦大了。幸好他没上传。整个删除后重新签署，这个问题总算是顺利解决。&lt;/p&gt;

&lt;p&gt;我继续追踪，发现有趣的事来了。&lt;/p&gt;

&lt;p&gt;这个key被很多人签署，其中有个人和我的签署人KeyID和UserID又和我互相签署的某人一致。这相当于攻击者不但碰撞伪造了我和他的外观一样的Key，而且连我们的互相签署关系都伪造出来了。。。&lt;/p&gt;

&lt;p&gt;我OO了个XX的，这是想干嘛？&lt;/p&gt;

&lt;p&gt;然后，某位朋友给了我这个站点：&lt;a href=&#34;http://gwolf.org/node/4070&#34;&gt;Stop it with those short PGP key IDs!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;里面提到了这种伪造碰撞的现象。&lt;/p&gt;

&lt;p&gt;同时，里面也提到了解决方法。&lt;/p&gt;

&lt;p&gt;首先，向你的gpg.conf里面加入&lt;code&gt;keyid-format 0xlong&lt;/code&gt;，这样可以使你的ID变为64位的长ID。碰撞难度更高，当然，也更难一眼看明白谁是谁。&lt;/p&gt;

&lt;p&gt;其次，在写程序的时候，不要使用ShortID来指明身份了，因为这种方法显然受到了攻击。继续使用ShortID可能为你程序未来的安全性埋下隐患。&lt;/p&gt;

&lt;p&gt;最后，验证fp的时候一定要用纸质传递，签署的时候一定要验证完整fp。&lt;/p&gt;

&lt;p&gt;验证fp的时候一定要用纸质传递，签署的时候一定要验证完整fp。&lt;/p&gt;

&lt;p&gt;验证fp的时候一定要用纸质传递，签署的时候一定要验证完整fp。&lt;/p&gt;

&lt;p&gt;因为很重要所以说三遍。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>更换blog声明</title>
      <link>http://shell909090.org/blog/archives/2837/</link>
      <pubDate>Wed, 22 Jun 2016 16:09:38 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2837/</guid>
      <description>&lt;p&gt;在看blog的同学们应该发现了，Shell&amp;rsquo;s home整个变了个样子。&lt;/p&gt;

&lt;p&gt;这个主要是因为，我的wordpress被黑了。&lt;/p&gt;

&lt;p&gt;我的wordpress本来是托管在香港的一台主机上面，加上cdn之后，对国内外的访问效果都不错。我也一直挺满意的。在周一，我本来想把周末写好的关于潜水的blog贴出来。结果无法登录。所以我登录了cPanel去数据库里面修改密码，结果发现。。。&lt;/p&gt;

&lt;p&gt;我的数据库，整。个。都。不。见。了。&lt;/p&gt;

&lt;p&gt;WTF，这是三小？&lt;/p&gt;

&lt;p&gt;首先可以肯定，这里出了什么问题。经过对options表的检查后，我基本确定，这个blog已经不是我原来那个了。但是在数天内我没有发现这件事，而且事发时浏览一切正常。我猜测是因为我加了cache插件，而新的blog没有这个插件。所以一直没有刷cache，导致入口始终是缓存。因此只看首页一点现象都没有，在点击登录按钮后才出现问题。作为验证，我点了一下三年前的记录，结果404了。另一个朋友也验证了这个现象。所以估计推论是对的。&lt;/p&gt;

&lt;p&gt;然后是why。&lt;/p&gt;

&lt;p&gt;首先可以排除弱密码。我在wordpress上启用了24位大小写数字符号混合密码（反正是自动填写），再加上了yubikey的U2F功能，实话说我真不觉得有什么攻击者能找到我的密码进去。&lt;/p&gt;

&lt;p&gt;因此，我从cPanel里面搞到了原始浏览日志。日志显示六月八号早上8点的时候，访问帖子还是200。在某个时间点后就302了。而302是wordpress尚未安装时的标准做法，会转跳到install.php去引导你完成设定流程。也就是说，在8点多的时候，整个wordpress被突然重置。然后对照新的wordpress的初始记录，大约在9点多的时候，有人来完成了install流程。这两者之间可能有关联，也可能是重置者什么都没管就走了。我的某个读者跑过来发现这个wordpress居然没有初始化！就手欠来初始化一把。完了发现首页为什么啥反应都没有，以为自己进了蜜罐然后跑了。&lt;/p&gt;

&lt;p&gt;所以先不用参考后面wordpress的初始化信息（我也不觉得里面能找到什么有效信息，哪怕是攻击者初始化的），先查看出问题的时间点的操作。&lt;/p&gt;

&lt;p&gt;结果是一条install.php的访问，回应是200。&lt;/p&gt;

&lt;p&gt;也就是说，貌似有人绕过了install.php的锁定，重新“安装”了整个系统。&lt;/p&gt;

&lt;p&gt;当然，其中还有一点需要排除的，就是我的webhosting供应商没被黑。但是我觉得如果供应商被黑了，攻击者应该已经拿到了我的DNS管理权限，从而在乱搞我的域名了。从这点来说，wordpress有问题的概率更高。&lt;/p&gt;

&lt;p&gt;问题是，wordpress也很不应该啊。入口已经加了最严格限制，每次有更新都及时升级。而且最关键是，install.php这个文件在完成安装后就被我删除了。后面怎么又出来了？&lt;/p&gt;

&lt;p&gt;有朋友提醒，可能是我使用的某个plugin有漏洞。我想想确实是，plugin这个事情我很难去控制，有漏洞也没什么好奇怪的。&lt;/p&gt;

&lt;p&gt;然而这个安全性让我很不放心。&lt;/p&gt;

&lt;p&gt;其实前面已经在搞blog迁移到github的事了。但是因为github在中国访问很不方便，而且jekyll搞起来有点麻烦，所以一直没太大动力搞。结果被搞了这么一出，那就顺手迁了吧。反正现在还在中国的，应该已经很少用blog，更多用微信了。&lt;/p&gt;

&lt;p&gt;这里感谢adieu推荐的hugo，这个系统是golang写的，所以编译安装我很熟悉。非常容易就搞了起来。下面就是适配问题了。&lt;/p&gt;

&lt;p&gt;首先是评论。我已经把评论迁移到了disqus上面，所以不需要考虑评论问题。只要新的blog的url和老的差不多就行。同时，这样也会对前面索引了我的blog的搜索引擎比较友好。&lt;/p&gt;

&lt;p&gt;然后是原始数据。我有一份去年2月时的备份，但是没有wordpress去运行它。（试过安装，非常麻烦）很幸运的，我在网上找到了&lt;a href=&#34;https://mtik00.com/2015/07/wordpress-xml-to-hugo-md/&#34;&gt;某篇&lt;/a&gt;如何将备份数据转换为hugo数据的文章。脚本是python的，就是非常简单的xml解析转换到文件写出。所以用他的脚本做了一下简单的修改，基本就做到了保持url一致。在hugo转换后，基本就像原来的blog一样了。&lt;/p&gt;

&lt;p&gt;只有一个小问题。我的文档转换出来后是/结尾的，而原来的url最后没有/。这对搜索引擎不是什么大事——反正会自动跳过去。但是disqus就不认了。所以我做了另一个小脚本，对disqus的url做了一次mapping。&lt;/p&gt;

&lt;p&gt;最后就是把整个内容部署到github上了。这里基本没什么技巧，除了我需要用CNAME文件来让github接受我的域名。&lt;/p&gt;

&lt;p&gt;好了，现在blog就先这么放着吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pulau Perhentian</title>
      <link>http://shell909090.org/blog/archives/2836/</link>
      <pubDate>Tue, 21 Jun 2016 14:52:23 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2836/</guid>
      <description>&lt;p&gt;废话不多说，上干货。&lt;/p&gt;

&lt;p&gt;这次有朋友在Kuala Terengganu，所以所有过程都是他帮忙安排的。先特别谢谢ching jun。&lt;/p&gt;

&lt;p&gt;Pulau Perhentian（停泊岛）在Kuala Terengganu旁边。我们为了省钱，是从PVG（浦东）在HKG（香港）转机去的KUL（Kuala Lumpur，吉隆坡），来返大约2000RMB出头。前程航班是港龙，后程是亚航。在PVG居然给我们直接把票全办好了，到香港直接Transfer就行，不需出入境。印象里这都是同家公司的联程业务。无论如何，这大大方便了我们，所以香港基本就是买买买。&lt;/p&gt;

&lt;p&gt;Kuala Lumpur有两个机场（其实是一个机场，两个航站楼），两者之间有Express连通。我们去的时候Express没开，所以坐的teksi（习惯一下，taxi的大马拼法），非常贵。建议可以试试Uber。&lt;/p&gt;

&lt;p&gt;我们在Kuala Lumpur过境一个晚上，所以没有找酒店，直接在KLIA2下面找了他们的胶囊酒店。单人间6小时80RM，12小时110RM。价格便宜，但是环境也没多好。没有空调，风都靠排风扇。所以开了就吵，关了就闷。鉴于外面持续有人进出，建议直接上耳塞，开着排风扇睡觉。厕所和洗漱都还不错。住起来肯定是不舒服的，但是确实非常方便。我们6小时的停留时间，还包括了出境，走路，找地方。真找酒店就别睡了。&lt;/p&gt;

&lt;p&gt;第二天从KUL起飞去KBR（Kota Bharu），KLIA2是廉航航厦，所以里面人头攒动是必然的。我们提前冲过去，居然进了急客。而且急客居然还排队。我们后面的当地人说他着急能不能。。。我们说我们都很急。。。KBR是一个超级小的机场。没啥好说的，出门，叫一辆teksi，开到Kuala Besut。开了将近一个小时，正好我们睡了一下。凑合吃了个早餐，我们就从码头坐船去Pulau Perhentian。&lt;/p&gt;

&lt;p&gt;初来乍到，我居然不知死活的坐了船头。你妹，整个船晃的像人民公园的海盗船，而且我TM的还没有保险带可系。船稍微一加速，我就坐成了海豹队员抢滩登录的冲锋姿势。周围所有能抓的杆子全抓上，整个人还一次次的往船舱上砸。等下船，手麻了，而且还蛋疼。&lt;/p&gt;

&lt;p&gt;反正不多说了，有空去的人自然能体验到这种感受。良心建议，坐船要靠后。&lt;/p&gt;

&lt;p&gt;我们到达的是Pulau Perhentian Kecil（小停泊岛）的最西侧的海滩，当地一家叫做Shari-la Island Resort的酒店。连栋别墅，AC房，住宿环境还行。就是离潜店比较远。潜店是一家叫做&lt;a href=&#34;http://www.quiver-perhentian.com/&#34;&gt;Quiver Dive Team&lt;/a&gt;的店，就在Shari-la Island Resort的下面。我们有四个OWT，一个AWOT，就我一个做FD。他们一天出三次船，8点半，12点半和3点半。&lt;/p&gt;

&lt;p&gt;附近我比较有印象的潜点有这些（注意，以下都是以我去的6月初为基准，能见度和温度会随着时间发生变化。普遍温度都在30左右，下的时候连湿衣都没穿）：&lt;/p&gt;

&lt;p&gt;Sugar Wreck
Max: 18, Avg: 13, Vis: 10-20
离岛大约20分钟的位置，10年左右的一艘沉船，已经坍塌了。下过两支气瓶，一瓶能见度一般，10米左右。一支能见度很好，20左右。洋流不大，毕竟下面是好大一条船，可以挡住海流。海洋生物很丰富。有一次还看到了一条鱼正在。。。poop。。。&lt;/p&gt;

&lt;p&gt;D Lagoon
Max: 14, Avg: 10, Vis: 15-20
能见度比较高，在一个海湾沙滩的外面。内侧是珊瑚礁，外侧是广阔的沙地。鱼类活动一般。&lt;/p&gt;

&lt;p&gt;Temple
Max: 18, Avg: 11, Vis: 15-20
在离岛的礁石那里，大约也是开船20多分钟。能见度还行。下了两支，其中一支碰到两节左右的大流。生物比较复杂，有一次看到了桌子大的魔鬼鱼。&lt;/p&gt;

&lt;p&gt;Outer Reef
Max: 15, Avg: 10, Vis: 15-20
本岛的最北，在几块礁石的东侧。下面全是珊瑚礁，能见度还不错。生物活动还行吧。。。可能在这里看到过一条没有尾巴的魔鬼鱼，记得不是特别清楚是不是在这里了。&lt;/p&gt;

&lt;p&gt;Romantic
Max: 10, Avg: 7, Vis: 10
离我们住的地方很近的一个小海湾。水很浅，下面的能见度情况很糟，可能10都没到。生物活动一般，都是一些常见的小鱼。也就是当天最后一支气瓶，不能去的太远太深才去的。&lt;/p&gt;

&lt;p&gt;Tanjung Butong
Max: 19, Avg: 11, Vis: 15
忘记在哪了。&lt;/p&gt;

&lt;p&gt;Vietnamese Wreck
Max: 23, Avg: 13, Vis: 3
南边的一艘沉船，年限比Sugar Wreck长一点。最深据说有26米。我们下的时候有3节左右的大流，能见度非常差。下水刚碰底，就从沉船转为了放流。什么都没看见，生物多样性就别提了。当然，据说能见度高的时候，旁边的灯塔那里有蓝环章鱼什么的。&lt;/p&gt;

&lt;p&gt;T3
Max: 20, Avg: 13, Vis: 15-20
大岛东南侧的一个点，据说有很多隧道可以钻。我们那支有一个新手，所以潜导没敢带着去。基本没有流，珊瑚和鱼类很丰富。但是没有什么特别的生物。&lt;/p&gt;

&lt;p&gt;Golden Bay
Max: 7, Avg: 5, Vis: 5
就在Coral Bay后面，从潜店翻过酒店就是。水面平静流小于一节，所以潜店培训都把这里当作平静水域用的。我来潜主要就是拍朋友们上课的样子。基本没什么生物，偶尔有点海参和小鱼。&lt;/p&gt;

&lt;p&gt;说一下这次潜水的几个收获。一个是把配重减少到4公斤了，虽然是不穿湿衣的配重。平衡检查刚刚好是合适的配重，潜水到了尾声的时候基本上BCD里面一点空气都放不出来了，全靠肺去调节。总体非常省空气。Rmv从16逐步降低到了14-15，有一次还到了13（可能是流小）。下面要努力减肥，争取配重减少到2公斤。另一个就是学会了蛙踢。由于是长蹼，不是jitfin，所以只能向前蛙踢，直升机旋转，倒踢什么的推进效率太差，基本没实用价值。（顺便吐个槽，这家店的蹼连自由式的时候推动比都很差，大流根本顶不住，我勒个去）最后一个就是因为潜水辛苦，所以体重下降了1公斤。&lt;/p&gt;

&lt;p&gt;几个比较有效的技巧有。你可以在上岛之前买几瓶水，岛上的淡水比较贵。但是不用太多，因为Coral Bay那里有个店，里面有装水的机器，可以帮你加水。基本和上岛之前买水差不多价钱。&lt;/p&gt;

&lt;p&gt;找了一个攻略，里面居然有潜店和酒店几年前的样子：&lt;a href=&#34;http://you.ctrip.com/travels/perhentian1171/2048040.html&#34;&gt;http://you.ctrip.com/travels/perhentian1171/2048040.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;回程就没什么好多说的了，一样颠簸的船。不过由于坐了船尾，所以总体比来的时候好点。到了Kuala Terengganu，住下，晚上蹭了顿饭（再次感谢），第二天ching jun带着我们转了转，就上飞机了。&lt;/p&gt;

&lt;p&gt;本来据说有不少好东西可以吃的，结果不巧，我们去的时候正好进了斋月。所以非但没什么好东西可吃，而且潜水间歇去吃个午饭，上菜速度都大受影响。一副有气无力的样子。不过想想看，日出到日落不吃东西，连喝水都不行。还让你出来做菜？你知道深夜放毒都是要拖出来打的酷刑了，当地人这种情况我觉得完全情有可原。&lt;/p&gt;

&lt;p&gt;Terengganu的水果很不错，一把荔枝四个人吃到快回国还没吃完。有空去逛的人可以去吃点水果。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>唐僧被吃了</title>
      <link>http://shell909090.org/blog/archives/2835/</link>
      <pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2835/</guid>
      <description>&lt;p&gt;唐僧被吃了。&lt;/p&gt;

&lt;p&gt;本来不应该发生这样的事的。&lt;/p&gt;

&lt;p&gt;正常来说，悟空会随时在师傅身边保护。要逃过悟空的眼睛，几无可能。因此唐僧的安全可以说是固若金汤。但是事有凑巧，今天是悟空回天庭报道的日子。由于悟空当年大闹天宫，被压在五行山下。今日戴罪立功，属于假释。所以按照天庭假释管理办法，需要每个月向天庭报道一次。当然，正常来说这种事情也就是走个过场。天上一日地上一年，每月报道一次是按地上时间计算的，所以在天上就是每个时辰出现一次，日夜不休。天庭监狱管理委员会的工作人员也受不了这个繁琐，所以文书手续，验明正身一概抽查。正常而言只要猴头出现，就算过关。&lt;/p&gt;

&lt;p&gt;但是今日，玉帝闲来无事，要去隔壁礼部视察。礼部主事和刑部尚书关系交好，于是偷偷通知了刑部尚书。万一玉帝没事干，出了礼部进刑部，那就是天大的麻烦。所以各种见不得光的事情都要收起来。因此悟空这几个月的报道格外麻烦。&lt;/p&gt;

&lt;p&gt;为此，悟空特意驾筋斗云前后看了一圈。附近地界太平，没有什么妖孽。又召出土地来问过，再三确认安全。于是向二师兄三师兄好好叮嘱了一番，这才上天庭报道去的。&lt;/p&gt;

&lt;p&gt;然后唐僧就死了。&lt;/p&gt;

&lt;p&gt;如来很生气，后果很严重。悟空队还没排到，就被监狱管理委员会的人扣下。西天联合天庭，成立天庭取经事故联合调查委员会，由迦叶尊者任首席调查官，主持调查工作。太白金星出任首席行政官，代表天庭协调双方工作。&lt;/p&gt;

&lt;p&gt;委员会成立后，首先对事情的经过进行了初步的调查，基本排除了悟空伙同外人作案的可能性。于是委托太白金星对悟空进行谈话，说服其配合委员会的工作。在这次谈话中，悟空才初次知道师父去世的细节。&lt;/p&gt;

&lt;p&gt;据天庭取经事故联合调查委员会的初步查证，事故是这样发生的。唐僧师徒行路到一半，看到个牌子，上面写着，大雷音寺，左转向前，还有28公里。于是唐僧师徒毫不怀疑的左转。结果前方并不是大雷音寺，而是小雷音寺。唐僧师徒住下后，唐僧在沐浴时不慎撞到头，昏倒在池内。童子问水是否够热无人回应，误以为客人喜欢热水。于是添足柴火，三个时辰过去，唐僧师父被煮成一锅老汤。。。&lt;/p&gt;

&lt;p&gt;太白金星话还没说完，就被悟空飞起一脚踢倒。还没站起身，就被悟空楸住领子：老官，你扯的什么鬼话。哪里有人会呆呆被烧一点动静都没有的，我师父又不是木头。这种鬼话就是骗童子都不够，你真当俺老孙呆子不成！&lt;/p&gt;

&lt;p&gt;太白金星连忙求饶：大圣，大圣，听我一言。当初调查委员会的人也是不信，可是小雷音寺的人说，西方有科卡罗斯煮死米诺陶斯，那米诺陶斯又不是呆子。为什么唐师傅的事就不可能是意外呢？&lt;/p&gt;

&lt;p&gt;悟空冷笑一声：就算是意外好了。他们装成大雷音寺，骗我师父入住，这才能不动声色煮死我师父。这冒充大雷音寺的罪过，总不是意外了吧。&lt;/p&gt;

&lt;p&gt;太白金星又说：这个我们也调查过了。对方拿出一份西天颁发的“关于鼓励信众自行传教的规定”，其中第一百七十三条第五款规定，为了传播西天教义，允许采取各种形式。因此小雷音寺的信众们就采用模仿大雷音寺的方式，向民众宣传大雷音寺的尊严。&lt;/p&gt;

&lt;p&gt;大圣顿时哑口：这种事难道教务办不管么？&lt;/p&gt;

&lt;p&gt;太白金星道：教务办哪里有空一个个检查信众自行传教的细节，最多也就是出了岔子找出首恶而已。实在乱子搞大了，了不起再出一个“关于禁止信众自行传教的规定”也就是了。&lt;/p&gt;

&lt;p&gt;悟空咬咬牙，再道：就算小雷音寺无事，那乱插路标，诱我师父前去之人呢？&lt;/p&gt;

&lt;p&gt;太白金星拨开悟空手指：大圣，小雷音寺的人对我们都拿的出“关于鼓励信众自行传教的规定”，对着人家自然也是拿出规定，说为了弘法，故此需要改标线路就是了。&lt;/p&gt;

&lt;p&gt;悟空双手抱胸坐下，翘起二郎腿冷笑：天下哪里有为了弘法，把正法指向邪路的道理。必是此人见钱眼开，没细细核对文件之故。&lt;/p&gt;

&lt;p&gt;太白金星道：悟空，你又何必固执。他又不是吃你师父的首恶，你何必和他过不去。要说细细核对文件，你前几次的假释报道，似乎也是核对不全吧。&lt;/p&gt;

&lt;p&gt;悟空轻叹口气：师父也许呆，俺老孙却不傻。小雷音寺敢仿大雷音寺而无事，显然是背后有人不希望我师徒前去西天。因此调查报告里鬼话连篇，就是不敢指摘背后之人的不是。我待罪之身，哪里能左右这些。俺老孙唯一能左右的，便是此为虎作伥之人。若不是他从中作梗，哪里来这许多事。周围乡邻，难免也为其所骗，拜错菩萨。难道你认为他无罪？&lt;/p&gt;

&lt;p&gt;太白金星微微一笑：非也非也，大圣你这么想是再好不过。&lt;/p&gt;

&lt;p&gt;悟空微微一愣：怎讲？&lt;/p&gt;

&lt;p&gt;太白金星道：既然小雷音寺众人无罪，这桩事总也需要个了结。你是观音菩萨保举，若说是你玩忽职守，大家面上不好看。西天的意思是，此人擅做主张，引诱唐僧师父到小雷音寺，以至招待不周，发生意外。此人负有不可推卸的责任。大圣你再做污点证人，说他当初也为你指路，并无什么不妥。以至于未曾察觉。&lt;/p&gt;

&lt;p&gt;悟空怒道：合着你们就是找我坑替罪羊来了？&lt;/p&gt;

&lt;p&gt;太白金星道：大圣，大圣。你不刚刚还主张要严惩此人？如今随了你心意，你又要怎样？&lt;/p&gt;

&lt;p&gt;悟空呆若木鸡，不知如何自处。&lt;/p&gt;

&lt;p&gt;PS：其实昨天就写完了，拿给霍叔叔看。霍叔叔说，你这类比太绕了。我说好，我想办法改改。结果还没等我改，取经事故联合调查委员会已经宣布了调查结果。再等下去怕是连西游记都要被查禁。所以赶紧出一版，大家凑合看看吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>三亚潜水体验</title>
      <link>http://shell909090.org/blog/archives/2832/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2832/</guid>
      <description>

&lt;p&gt;最近去三亚玩了，我就说潜水吧。&lt;/p&gt;

&lt;h1 id=&#34;水况&#34;&gt;水况&lt;/h1&gt;

&lt;p&gt;潜水地点是在分界州，水不算太好。水下景点一般在深度5-15米范围内，有两艘沉船，一个飞机残骸。小沉船离岸比较近比较浅，水深不超过10米。大沉船需要再游一刻钟，深度15-18米左右。飞机残骸也差不多深度，不过只看到一点。水下危险生物包括&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%8D%85%E5%AD%90%E9%AD%9A&#34;&gt;狮子鱼&lt;/a&gt; ，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%AF%92%E9%AE%8B%E7%A7%91&#34;&gt;石头鱼&lt;/a&gt; ，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%A3%98%E5%86%A0%E6%B5%B7%E6%98%9F&#34;&gt;棘冠海星&lt;/a&gt;（魔鬼海星），水母。这次潜导在水下就被水母蜇了，被蛰的还很神奇。他下水就戴了面镜，升上水面就开始痛了，还被蛰在眼皮上。到底水母是怎么进去的就鬼知道了。不过问题也不严重，痛了一会就没事了。&lt;/p&gt;

&lt;p&gt;能见度分别比较大。在10米左右有一个明显的分界面。在分界面上，能见度大约是10米左右，下面只有3-5米。从上面明显能看到下面像一潭池塘一样。水底温度21-22度。我去的时候是四月上旬，所以只能代表这个时间点的情况。据说6月前后的时候能见度会好很多，水温也会比较高。亚龙湾和蜈支州的情况据说要好点，不过从我看到的水色来说，估计好不了太多。&lt;/p&gt;

&lt;p&gt;洋流情况还好，0.5m/s以下，一般都不构成问题。那天浪在0.5m左右，水面上有点晕。周围潜水环境还行，只是偶尔有人炸鱼，可能有巨响。另外水面上有摩托艇在开，和潜导分开的话，没有SMB上浮会比较危险。&lt;/p&gt;

&lt;h1 id=&#34;潜店&#34;&gt;潜店&lt;/h1&gt;

&lt;p&gt;这次潜水是走的 &lt;a href=&#34;http://www.chinadiveschool.com/&#34;&gt;中仁潜水&lt;/a&gt; 的持证fun dive，价格是880两支气瓶。价格包括接送，上岛费用，一顿午饭。还包括了海豚表演门票。但是fun dive来说，根本没时间去看。&lt;/p&gt;

&lt;p&gt;BCD，fin，regulator是潜店提供的，他们问了我的身高体重来配fin和防寒衣。不过防寒衣是岛上提供的。我的体型比较大，所以穿了他们最大的防寒服。5mm的，比较适合水况，也很新，估计是穿的人不多的缘故。本来还问了我是否有度数，不过我的面镜和呼吸管是自带的，所以用不到。我还自带了3mm的手套，考虑到这里的水下危险生物，这个举措其实非常明智。&lt;/p&gt;

&lt;p&gt;岛上有免费的更衣和冲凉，但是寄包要20元。气瓶是中潜自己打的，一般都超过200bar。但是配重是公用的，比较烂。&lt;/p&gt;

&lt;p&gt;我们潜FD是岸潜，水面游动100-200米。DSD有一个平台，跳下去就行。平台那里比较浅，据说在5米左右。&lt;/p&gt;

&lt;h1 id=&#34;三亚潜水&#34;&gt;三亚潜水&lt;/h1&gt;

&lt;p&gt;除了分界州外，我还去了一趟亚龙湾。在那里，我碰上了三亚名产——体验潜水。&lt;/p&gt;

&lt;p&gt;下车之后我就看到有人在做潜水培训。仔细看了一下，是一个潜水体验旅游的报名点。名义价格是400左右。我仔细观察了一下，整个点没有任何标志。没有PADI或者CMAS的标。&lt;/p&gt;

&lt;p&gt;在我吃饭的时候有人过来拉生意，鼓动我们潜水。我直接说我是PADI的持证潜水员，然后他就消失了。&lt;/p&gt;

&lt;p&gt;不做任何评论，大家自己分析。&lt;/p&gt;

&lt;p&gt;注意，在三亚海滩上是有打着PADI标志的潜店的，在PADI上也可以查到这家。不要以为我说的是他们。我其实在他们店里休息过一会，听了他们和客户的一些对话，觉得他们做生意还基本不过分吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>潜水的一些简单解说</title>
      <link>http://shell909090.org/blog/archives/2829/</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2829/</guid>
      <description>

&lt;h1 id=&#34;潜水的乐趣&#34;&gt;潜水的乐趣&lt;/h1&gt;

&lt;p&gt;潜水好不好玩？不好说。这得看你是不是喜欢潜水。不同的人在潜水中获得不同的乐趣。有人喜欢看鱼看珊瑚看沉船，有人喜欢水下漂浮的感觉，有人甚至只是泡妹子/帅哥。是的，潜水者里帅哥/美女的比例极高。因为潜水很要求体力，所以大部分人身材都很好，像我这种胖子绝对是少数(不过在学校里我看到了另外一个胖子，比我还夸张，衣服都是自带的)。我甚至看到一个学着学着潜水泡上了教练的妹子。。。&lt;/p&gt;

&lt;h1 id=&#34;是否适合潜水&#34;&gt;是否适合潜水&lt;/h1&gt;

&lt;p&gt;潜水的一般性要求是10岁以上，没有心血管疾病，癫痫什么的。细节可以去PADI网站上看一下。通常对于休闲潜水而言，大部分人都应该是没问题的。这里只说几个上面没有的问题。&lt;/p&gt;

&lt;p&gt;不会游泳能不能潜水？&lt;/p&gt;

&lt;p&gt;咳咳，我就不会游泳。&lt;/p&gt;

&lt;p&gt;潜水对游泳的要求是，能在水面上游动200米，或者在水面停留10分钟(我记得是这两个值)。这基本和会游泳没什么区别——除了通过条件。考核这项的时候，是允许你穿着防寒衣在海水里考的。这等于让你穿件救生衣问你会不会游泳一样，我想大多数旱鸭子的水性还不至于糟糕到这种地步。糟糕到这种地步的，坐船都要额外买保险了。&lt;/p&gt;

&lt;p&gt;但是会游泳还是非常有帮助的。如果会游泳的话，在水下移动的时候会很有优势。所以建议还是去学一下游泳。当然，你可以学以潜水为目标的游泳——主要就是不用换气。不求游多少距离，没气了站起来喘完了再游也行。&lt;/p&gt;

&lt;p&gt;潜水的另一个要求是胆大心细，遇事冷静。在水下碰到状况，很多都只能靠自己。所以胆子要大，但是遇事要冷静。&lt;/p&gt;

&lt;p&gt;当然，冷静谁也说不好。有的人平时也挺冷静，碰到大事了就突然反应不过来。大多数人都是这样，也不用不好意思。至于胆量，有个很简单的测试。找一个游泳池(当然，是淡水)，3米以上，脚够不到底的地方。不穿救生衣，从岸上往下跳(注意，很多泳池禁止你这么做，请首先咨询管理员取得许可)，跳下去之后游回岸边。捏着鼻子插筷子也好，摒气也好，随便你。看你的胆子和游泳技巧是否能够做到。如果做不到，例如不敢跳，或者跳下去根本不会游上来，那就不要费劲了。你跳下去不是潜水，是去找死的。&lt;/p&gt;

&lt;h1 id=&#34;技术解说&#34;&gt;技术解说&lt;/h1&gt;

&lt;p&gt;携带呼吸装置潜水其实只有一个要点，就是呼吸。除此之外的东西都只能算是技术，学了肯定能会的那种。例如怎么组装备，规范动作怎么做什么的。智商没什么太大问题都很容易。&lt;/p&gt;

&lt;p&gt;可能很多人会首先说耳朵的问题。耳压平衡是潜水基础中的基础，一上来就会讲的。在水下做了平衡就不应该耳朵痛了。像三亚名产，不做平衡告知就丢下水，10分钟后耳朵痛就升水，那是道德问题，不是技术问题。如果学了耳压平衡但是做不到，那平时坐飞机都应该有问题，你需要检查内耳疾病。&lt;/p&gt;

&lt;p&gt;呼吸之所以重要，是因为呼吸关系到浮力。会游泳的应该有体会，浮在水面的时候，吐气就会下沉。潜水的时候也是一样，吸气上浮，吐气下沉。听起来很简单，但是水里需要呼吸不停，而且由于游动，呼吸量还不小。这种情况下如何保持稳定，就是一个非常有技巧的事情了。技术上说，这叫中性浮力。好的潜水员甚至可以靠呼吸停留在沙滩上十公分处，既不接触，也不浮上去。&lt;/p&gt;

&lt;p&gt;潜水的时候，身上的气瓶是负浮力。防寒衣虽然是正浮力，但是不足以平衡气瓶。如果只穿这两件的话，就必须不断踢水，停止踢水就会下沉。所以身上会背一个充气背心，来抵消气瓶的浮力。这样通过向背心内充放气，可以将全身的浮力和重力抵消到1公斤以内。人的一次呼吸一般潮气量在3000左右，换算成浮力有三公斤左右的波动，这样就可以通过呼吸来控制上升下降。一般操作上还会额外配一些配重，然后通过背心的浮力抵消配重。这样一方面在下潜的时候允许通过放气变的更重，可以有更大的余地。另一方面，在遇到紧急情况的时候，也可以通过快速脱下配重浮出水面(警告，这样很危险，容易产生减压病或肺部过度扩张)。&lt;/p&gt;

&lt;p&gt;浮力的难点在于，呼吸对浮力的影响是瞬时的，但是你很难感知现在是正浮力还是负浮力。你能发现的只有浮力对深度的影响，现在是往上飘了还是往下沉了。这就像顶杆子一样。你不能感觉到力，只能感觉到位置变化，不断调控。而呼吸要影响到深度，至少需要1-2秒的延迟。而且等你发现的时候，往往像火箭一样，停不下来了。好比上浮，吸一点气，我擦没反应啊。再吸一点？哎呦沃草升天啦。赶快吐气，我擦快停下，快TM升水了。好了好了。。。等等，我擦怎么变砖头了？再来。。。等你折腾一会，教练会让你看一眼压力。靠，没气了，升水吧。&lt;/p&gt;

&lt;p&gt;理论上说，要找保持悬浮，需要找准平衡气量，在这个范围内小幅呼吸。但是在不同深度下，充气背心的浮力是会发生变化的。潜水到后面，气瓶里空气不足，也会产生额外的浮力。你需要不停用经验发现现在的平衡气量是多少，围绕着小口呼吸，甚至有的时候需要充放气来重新平衡一下。&lt;/p&gt;

&lt;p&gt;中性浮力是很多东西的基础。例如在水下摄影，如果浮力一塌糊涂，一呼吸相机都抖成中风了，潜水又禁止憋气。那还照个P啊。从珊瑚上游过也是，如果浮力控制不好，要么离很远，要么你就会直接在珊瑚上砸出一个人型的坑。&lt;/p&gt;

&lt;h1 id=&#34;padi的技术路线&#34;&gt;PADI的技术路线&lt;/h1&gt;

&lt;p&gt;PADI的入门课程从小孩开始(骗钱从娃娃抓起啊)，我们这里只说大人的。&lt;/p&gt;

&lt;p&gt;最低的是SCUBA Diver执照。一次体验潜水，然后做泳池课程和基础训练，再潜两次就能拿到。这个执照能潜12米深度。&lt;/p&gt;

&lt;p&gt;大部分人应该没听说过SCUBA Diver执照。因为只要再多两潜，几乎不需要额外课程，就可以拿到OpenWater执照(简称OW)。大部分人会直接潜水五次，拿OW执照。潜水深度从12米提高到18米，这样就可以去大部分地方潜水玩了。&lt;/p&gt;

&lt;p&gt;OW再往上是Advenced OpenWater(简称AOW)。AOW在拿照方式上和OW有本质性区别。OW是固定课程，你想不想，五节课都要过才能拿证。AOW是一堆专长，两项必修的，其他再选三项，就能通过。总计来说需要潜水五次，两次超过18米深度。完成AOW执照后，可以潜30米深度。&lt;/p&gt;

&lt;p&gt;上面这些深度什么概念呢？例如某次我们潜的Greenrock，一块大石头，三个顶部。最高的地方7米左右，最低30米没到(印象里的资料，可能不一定准)。SCUBA Diver的话就只能看三个顶部。OW的话就能绕着大石头一圈看岩壁和缓坡。AOW的话可以在石头底下绕一圈——正好有个班戟鱼的窝。所以很多点其实大部分执照都能下(甚至包括体验潜水)，但是不一样的执照看到的东西会有差。除非你打算只去深度非常小的地方，否则执照当然是越深越好玩。当然，以休闲潜水来说，40米的深度还有很多地方去不了。但是安全起见(也是为钱包的安全)，暂时就这样满足了吧。&lt;/p&gt;

&lt;p&gt;然后就是AOW的一堆专长。例如我修了一个鱼类辨识(看着很扯淡，其实就是看鱼玩)，一个深潜，一个水底导航，一个沉船，一个顶尖中性浮力。其实大同小异(骗钱也是不手软哦)。除了告诉你一些技巧外，主要就是在不同环境下潜水。等潜水次数多了，自然就熟练和有信心了。&lt;/p&gt;

&lt;p&gt;AOW和AOW以下的执照，加大部分的专长执照，其实都不难拿。有钱，有闲，也就差不多了。甚至都不必须考。例如我需要去夜潜了，现场找潜店把钱交掉，题做掉。然后就可以带着去了，回来就拿到证了。无非也就是哪里拿的证和多少钱的问题。&lt;/p&gt;

&lt;p&gt;注意我说大部分。AOW有个专长叫潜水摄影，是问的最多的专长。尴尬的是，这货的难度非常高，我不知道为什么这货会进AOW专长课的。考这玩意一般需要学上几个礼拜，比DM都简单不了多少。当然，买的下潜水相机的人而言，倒是不会缺钱的。&lt;/p&gt;

&lt;p&gt;其中还有一个特别的执照，Nitrox，高氧潜水。高氧主要是用于长时间潜水，减少残氮量的。这玩意不是长时间潜水几乎不会用到。高氧的特别之处就在于，一，高氧潜水有额外风险，二，你可以拿高氧去潜深潜，从而一次性多拿一张执照。&lt;/p&gt;

&lt;p&gt;特别重复说明一点，并不是说氧气含量高了就能潜的深。恰恰相反，氧气浓度越高，潜水深度越低。纯氧在水下六米处吸了就有很大可能会挂掉，反倒是EANx32(氧含量32%)的氧气能允许你潜深33米。高氧的唯一目地就是减少残氮量，从而增加你的免停留潜水时间。这方面详细情况，我会写一篇关于高压空气的话题。&lt;/p&gt;

&lt;p&gt;要不要修哦？如果你可能会单次重复潜水，次数很多的，深度很深的，可以考虑。因为气比免停留时间还长。如果是一天两潜，深度又不高的。免停留时间本身就够，你要高氧干什么呢？急救？&lt;/p&gt;

&lt;p&gt;AOW再往上，潜到20左右，可以去出一张RESCUE的证。这张还要配修EFR的，贵的要死，不过基本没啥用。RESCUE是你能救别人，不是别人能救你。但是尴尬的是，又不是因为你有RESCUE执照就能带人潜水了——恰恰相反，你自己潜水还是需要人带的。而万一出了问题，正常来说带你的那个人急救资格都比你高(也肯定比你熟练)。那这张证能干嘛呢？在带你的那个人不在的场合下——例如不在潜水的时候——救人。&lt;/p&gt;

&lt;p&gt;你妹，不如说让我TM学游泳救人算了，还用的上点。&lt;/p&gt;

&lt;p&gt;潜够40，可以开始考DiveMaster(潜水长)的执照了。这个执照非常难，一般都要70潜以上才考出来。因为AOW和DM的差别就是业余和专业的差别了。在过了DM之后，你潜水就不需要人带，可以自己约潜伴了。&lt;/p&gt;

&lt;p&gt;我暂时还没搞明白，DM是不是能带AOW或者OW去潜，还是AOW或者OW必须由OWSI带。反正我碰到所有的DM都拿到了OWSI。&lt;/p&gt;

&lt;p&gt;DM再往下是专业线了，我记得不是很清楚，自己看吧。反正拿到这个证的，课程都远比这点发展线路复杂了。&lt;/p&gt;

&lt;h1 id=&#34;潜点选择-交通和成本&#34;&gt;潜点选择，交通和成本&lt;/h1&gt;

&lt;p&gt;每个潜点都有一些特点。例如珊瑚(珊瑚周围往往有大量热带鱼)，石缝里的鳐鱼，海鳗，天然形成的洞穴，沉船等等。这些特点往往会对应不同深度。有的时候证不够就没什么必要去某个潜点——好比koh tao的Sattaukt这个点。沉船的位置在水下24-30米，没有AOW的证根本去不了，只能在上面远远看着。还去干嘛呢？不如去隔壁的Whiterock钻洞。还有一些点，会在特定的时间形成特色——例如鱼类季节性孵化和成长的时候。这些也需要提前搞明白。&lt;/p&gt;

&lt;p&gt;所以要到一个潜点前，需要查潜点地图，搞明白每个潜点的特色，需要什么证书，并且提前约好潜店和潜伴。不同潜店不同时间会去不同的点，有的潜店甚至需要提前预约才行，否则当前是没有船去的。至于约朋友——要知道，潜水行程意外太多，凑不齐人不奇怪，凑齐了才是意外。要潜店约一堆人容易，自己约朋友就纯看运气了。就算平安无事到了地方，万一碰到感冒就只能扫兴而归了(我不大建议吃通鼻子的药去潜水)。所以要珍惜每个和你一起潜水的朋友，能碰上是多大的缘分啊。&lt;/p&gt;

&lt;p&gt;每个潜点也会受到交通方式的影响。近海的潜点可以船潜或者从岸上下水，但是稍微远一点的，十有八九都要船潜，甚至需要船宿。这时候需要考虑自己是否受得了船宿的晃动和晕船。&lt;/p&gt;

&lt;p&gt;还有，来返潜点的交通方式往往用飞机。但是潜水18小时内是禁止坐飞机的。所以假期短的话，会耗费大量时间在潜水以外的时间上。这会使潜水成本大幅上升。建议能准备一些不潜水也能玩的地方来填充时间段，同时尽量准备长一些的假期。&lt;/p&gt;

&lt;h1 id=&#34;装备&#34;&gt;装备&lt;/h1&gt;

&lt;p&gt;作为入门，一般你不需要买任何装备。大部分潜店都会租装备给你。大多数情况下，自带装备的运输费用(和劳动量)会比租装备还贵。唯一例外的是有戴眼镜的人的潜水面镜。潜水不能戴眼镜(废话)。为了安全起见，也不建议戴隐形(做过全面镜脱着的应该知道为什么)。所以建议你买一副潜水镜(注意，要罩住鼻子)，然后凭你现在的眼镜度数去配光学玻璃装上去。&lt;/p&gt;

&lt;p&gt;如果体型特别巨大(脸好疼)，可以考虑买自己的防寒衣或者全身式潜水衣。以免你想借却借不到的尴尬。水鞋没啥必要，反正一般常潜的脚底都应该够厚了，不常潜的买了你也用不上。&lt;/p&gt;

&lt;p&gt;如果经常潜水，例如一年五潜以上，可以考虑买一支自己的潜水电脑表。入门的也就千把块。自己的潜水表可以记录自己潜水的精确数据，潜店的装备里一般不会包含电脑表(除非租高氧气瓶)，而压力表上连的那个二货往往功能有限不说(例如无法设定高氧)，你也不能连着调节器一起拿走啊——那还不如直接买电脑表呢。&lt;/p&gt;

&lt;p&gt;值得初学者考虑的装备还有能在水下写字的板子和笔，水下的哨子(或其他声响设备)，潜水手电。水下不能说话，通讯全靠手势。万一碰到手势搞不定的问题，不想升水只有用白板了。不过这种例子一般不多见，反正我潜了十多回就碰到一次，还是在水下考鱼类辨识。哨子非常有用，方便通知别人让他们看你手势。但是这玩意常规也不大用，一般只有DM叫人的时候用。如果有上过夜潜课的话，潜水手电也可以考虑入一个，大不了平时当普通手电用。&lt;/p&gt;

&lt;p&gt;一般好像很少有人会自带BCD的。我见过一起潜水刷瓶子打算考DM的一个妹子自己有一个背飞的BCD，但是实话说没感觉哪里必要。先不说价格，每次潜水回去的时候把BCD洗好收起来都是个大麻烦，更不提带来带去的重量。调节器也没见有人自备的，一般拿船上的就行。自己的还要定期找人检修维护，万一哪个岩石卡一下又要心疼半天。倒是O-ring可以自备几个，以免气瓶还在，O-ring没了。&lt;/p&gt;

&lt;p&gt;倒是很多不在装备清单里的东西很值得备一个。例如防水包。在船潜的时候，潜水日志啦，眼镜什么的要找地方放，还要防水。有个防水包会非常方便，还能放放衣服。还有，如果晕船的话，最好准备一些不嗜睡的晕船药。有的潜店会准备，但是有的潜店就不会管这个了。别以为自己不会晕船，你试试多潜几次再说。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个有趣的问题</title>
      <link>http://shell909090.org/blog/archives/2822/</link>
      <pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2822/</guid>
      <description>&lt;p&gt;前面给公司出了一个有趣的问题，似乎没采用。所以现在放出来大家看着玩玩。&lt;/p&gt;

&lt;p&gt;以下代码在python2中适用。python3请看尾部注释。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import os, time
data = range(10000000)
pid = os.fork()
if pid &amp;lt; 0:
    print &#39;error:&#39;, pid
    os.exit(pid)
if pid &amp;gt; 0:
    os.wait()
    os.exit(0)
sum(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在第2行执行的前后，使用ps和free观察内存使用情况，可以看到进程使用了320M内存，系统被占用了320M内存。在3行执行后再观察，有两个进程分别占用320M内存，系统总计被占用了320M内存。
问1，为什么两个进程分别占用320M左右内存，系统总计占用数并没有翻倍？这种现象叫做什么？&lt;/p&gt;

&lt;p&gt;在10行执行后再观察，有两个进程分别占用320M内存，系统总计被占用了560M内存。
问2，为什么sum增加了系统内存占用，解释其开销。&lt;/p&gt;

&lt;p&gt;问3，推测出python整数对象长度和当前CPU字长。（python自身的内存开销忽略）&lt;/p&gt;

&lt;p&gt;答1. 这种现象叫做COW，copy on
write。在fork后，两个进程会共享内存表项，一致的部分会仅使用一个页面。&lt;/p&gt;

&lt;p&gt;答2. 每个进程的内存占用都没有上升，但总内存占用量上升了，这必然是发生了页面写时复制的结果。页面写时复制必须写入内存，因此推测python使用引用计数
手段控制对象生命周期。当sum时，每个对象都要被读取。在读取前，系统会增加其引用计数。在这个过程中会发生页面写时复制，导致系统内存占用上升。&lt;/p&gt;

&lt;p&gt;注：内存复制必须发生在写时刻，说读取导致内存复制的统统不得分。答出引用计数四个字即可得全分。&lt;/p&gt;

&lt;p&gt;答3. 在写时复制时，数字对象会增加引用计数，而数组对象不会（准确的说，数组对象本身引用计数会增加，但只有一页会发生复制）。发生复制增加的内存有
240M，因此整数对象长度24字节。未倍增内存有80M。对象有10M个。因此推断指针长度为8字节，当前CPU字长64位。&lt;/p&gt;

&lt;p&gt;注：python3里有几个不同。首先，range返回了一个生成器，所以需要改为data = list(range(10000000))。其次，python3中，int长度为28，pointer长度为9。因此下面的数据会需要调整，而且并不很容易解释。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一次升级故障的排查</title>
      <link>http://shell909090.org/blog/archives/2820/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2820/</guid>
      <description>

&lt;h1 id=&#34;问题描述&#34;&gt;问题描述&lt;/h1&gt;

&lt;p&gt;前两天，我收到了 &lt;a href=&#34;http://www.ubuntu.com/usn/usn-2900-1/&#34;&gt;USN-2900-1&lt;/a&gt; 通知，glibc上有个严重漏洞，可导致DoS或（可能性的）执行任意代码。这个USN对应的CVE是CVE-2015-7547，我相信很多人应该听说过这个漏洞，或者应该已经修复了。我也不例外，很快的推进修复了这个漏洞。收到消息6-7小时后，已经看到了 &lt;a href=&#34;https://github.com/fjserna/CVE-2015-7547&#34;&gt;POC&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;OK，我们本次不是讨论这个漏洞本身的。在漏洞修复后，有一台设备报错，无法安装程序，wget都无法执行。很有可能是漏洞修补补丁导致的。由于这个机器很关键，目前很难迁移，所以我需要找到原因。另一方面说，如果无法明确原因，已经执行补丁的机器群将无法确定可靠性。因此无论如何，必须要研究一下原因。&lt;/p&gt;

&lt;p&gt;出问题的机器是一台ubuntu12.04，修补的版本号为2.15-0ubuntu10.13。&lt;/p&gt;

&lt;h1 id=&#34;处理过程&#34;&gt;处理过程&lt;/h1&gt;

&lt;p&gt;首先，CVE的说明表明这个漏洞来自于getaddrinfo调用。因此首先确定问题和这个调用的关系。使用python，import socket，然后执行任意一个socket.getaddrinfo。python崩溃了。这就说明问题很可能来自本次修补。当然，同时的测试中表明wget也会崩溃，但是dig没事。所以dig很可能并没有产生getaddrinfo调用。&lt;/p&gt;

&lt;p&gt;而后，我使用strace和tcpdump追踪了一下程序。tcpdump表明一切正常，并没有人*正在*攻击系统，因而可以排除修补不妥当加正在被攻击导致的崩溃。strace中断在ioctl调用后，除了进一步明确当时正在进行DNS查询外，并没有给出太多有效的信息。&lt;/p&gt;

&lt;p&gt;常规来说，下一步应该是gdb。但是由于apt无法执行，所以gdb装不上去。因此我跳过gdb，先翻了一下USN-2900-1补丁的&lt;a href=&#34;https://launchpad.net/ubuntu/precise/+source/eglibc&#34;&gt;细节&lt;/a&gt;。这个补丁里包含了所有ubuntu自己打上去的补丁，因而有点大。但是仔细看之后可以分离出CVE-2015-7547补丁的位置：debian/patches/any/CVE-2015-7547.diff（还有pre1和pre2）。仔细阅读修补代码，尽管对逻辑并非十分清楚，但是并没有看到什么奇怪的错误。结合剩下的机器并没有问题，我基本认为这个补丁是没问题的。&lt;/p&gt;

&lt;p&gt;后面很幸运的，向才发现虽然apt-get update不行，但是apt-get install却没问题。不知什么原因，总之我们有了一个能用的gdb系统。通过gdb，我确定了出问题的代码行号。我本来想省点事，从补丁上直接读出出问题的行（eglibc-2.15/resolv/res_send.c:1303）。但是很遗憾，出问题的行本身似乎没有什么问题。（*ansp2_malloced=1;）虽然可以看出是ansp2_malloced跑飞导致了SEGFAULT，但是并没有提示为什么。所以还是得需要完整的源码。&lt;/p&gt;

&lt;p&gt;然后就是debian包维护的基本功夫。首先用apt-get source libc6下载源码。再用dpkg-source -x解开文件。进入目录里，用quilt push -a应用全部补丁（细节看 &lt;a href=&#34;https://wiki.debian.org/UsingQuilt&#34;&gt;这里&lt;/a&gt;）。这样就得到了和线上一致的完整源码。我本来想将整个过程在目标机上完成，但是目标机上却无法安装quilt（根本找不到这个包，由于apt-get update无法执行，我也无法修正这个问题）。所以最后源码的补丁是在我本地的workstation完成的。&lt;/p&gt;

&lt;p&gt;无论如何，我按照gdb的bt输出，仔细核对了出问题的代码。问题确实是出在了ansp2_malloced，这个值为0。但是这个值是逐层传递的参数，传递的最后几行表明这个值都是0，而在前面，这个值是有有效值的。可是吊诡的是，在有效变为无效的过程中，指针并没有修改过。&lt;/p&gt;

&lt;p&gt;这个值是在__libc_res_nsearch(resolv/res_query.c:331)里发生变化的。在这个函数里，这个指针叫做answerp2_malloced。根据gdb的bt，在函数入口上，这个数值不为0。但是到了第421行，调用__libc_res_nquerydomain的时候，就变为了0。而从函数入口开始按照顺序搜索answerp2_malloced，都是对指针的值的修改，并没有对指针本身修改。函数也是传递指针，而不是双重指针。也就是说，answerp2_malloced在一个并不可能改变的代码段中被改变了。&lt;/p&gt;

&lt;p&gt;读到这里的朋友，有兴趣的话可以先不要往下看，先猜猜原因。这个神秘的现象直到我看到结果，才反推出来为什么。&lt;/p&gt;

&lt;h1 id=&#34;原因&#34;&gt;原因&lt;/h1&gt;

&lt;p&gt;我在这里被卡了很久。后来在无聊中，往下看了一下bt。留心到其中某个函数并没有调试信息，因为这个函数所在的so文件位置不对。仔细一看，这是一个glibc的库，但是却在/usr/local/lib下面。&lt;/p&gt;

&lt;p&gt;我X。是哪个孙子把系统库的部分拷贝到了其他位置，还改变了LD路径。。。拿一个版本的glibc和另一个版本的glibc库混用，不出问题才见鬼咧。把这个so文件改名后，问题立刻解决。&lt;/p&gt;

&lt;h1 id=&#34;复盘&#34;&gt;复盘&lt;/h1&gt;

&lt;p&gt;事后根据复盘。这个参数其实是为了修补问题，新加的。原本__libc_res_nquerydomain函数并没有这个参数。然后为啥能跑？这涉及到linux下C的入栈顺序。这里不讲细节，如果你有兴趣，先看&lt;a href=&#34;http://www.cnblogs.com/YukiJohnson/archive/2012/10/27/2741836.html&#34;&gt;这个&lt;/a&gt;。再往下看复盘。&lt;/p&gt;

&lt;p&gt;根据调用规则，调用者首先会对现场压栈。他会将需要保留的寄存器入栈，以防子程序改变他们。然后他会根据C规则或pascal规则入栈参数。最后call指令会将当前IP入栈，并且转跳到指定地址上。以这里的情况看，应该是默认的C规则。&lt;/p&gt;

&lt;p&gt;C规则的好处在于被调用者获得的是栈顶相对位置，其余参数向栈底依次展开（注意下面用的全部是栈底/栈顶，由于对口，实际内存分布一般是反过来的）。使用BP+8，BP+12这种规则来访问。因此调用者可以传递变长参数。无论你在实际参数之前入栈了多少个数据，只要调用者最后记得把这些数据出栈，就不会对执行构成影响。而pascal规则则不然，为了获得参数位置，被调用者必须知道传入了多少个参数。例如访问第一个参数，就需要用BP+4*N+4来访问（当然在编译时这个数字会被静态的算出来）。如果你在实际参数之前入栈了数据，那么被调用者就需要用-1这种方法去访问这些数据了。而如果在实际参数之后入栈数据，整个参数位置都会错乱掉。因此pascal规则一般被认为是不能传递可变参数的。&lt;/p&gt;

&lt;p&gt;但是C规则的这个优势，在这里变成了问题。调用者的代码还是打补丁之前的版本，而被调用者的代码则是打补丁之后的了。因此__libc_res_nsearch将参数入栈前入栈的最后一个元素认做了最后一个参数。这个元素，可能是需要保存的现场，也可能是局部变量。&lt;/p&gt;

&lt;p&gt;如果__libc_res_nsearch将现场当作了最后一个元素的话，将无法解释这个值为什么在后面发生了变化——被保存的现场一般来说是用于未来的恢复的，他们不应当发生变化。而如果是局部变量则相反，局部变量的指针经常被当作参数传递给子函数——这也是经典的C多值返回方法。&lt;/p&gt;

&lt;p&gt;如果__libc_res_nsearch确实接受了局部变量的地址作为参数，他可能会向这个地址写入任何东西——例如0。这就造成了这个地址在调用时有值，但是在使用时值被清零，又找不到任何地方修改这个值的缘故。&lt;/p&gt;

&lt;p&gt;当然，这里也有很多疑惑。例如局部变量顶上一般会保存被调用者需要保存的现场。无论如何，参数和局部变量之间一点现场都不隔，是件很奇怪的事情。而现场一般是不变的。对于这点，我没时间去反向源码并分析栈的实际情况，谁知道可以告诉我。&lt;/p&gt;

&lt;p&gt;这是一个调用者（caller）的原型认知比被调用者（callee）少一个参数的结果。如果事实反过来，调用者的原型认知比被调用者对一个参数，那么代码执行将不会有任何麻烦。&lt;/p&gt;

&lt;h1 id=&#34;事后分析&#34;&gt;事后分析&lt;/h1&gt;

&lt;p&gt;这个故障最主要的原因是有人将系统库复制到了/usr/local，并修改了LD顺序。&lt;/p&gt;

&lt;p&gt;glibc确实是一个几乎没有改动的库，但是这不表示他不会改动。根据我这里的记录，在过去的一年半时间里，他改变了八次。有趣的是，最早一次改动也是因为getaddrinfo的漏洞做修补（USN-2306-1）。也许是运气好，前几次改动中并没有调整参数，或者对参数的意义做变更。因此老代码和新代码的混合调用并没有出现问题。然而本次修补就过不去了。&lt;/p&gt;

&lt;p&gt;这并不是ABI的错——ABI承诺的是“向外暴露接口”，而libc中的内部互相访问显然不在其中——谁会承诺自己内部结构的ABI兼容性呢？那会让稍微复杂点的重构都无法进行。&lt;/p&gt;

&lt;p&gt;根本的问题在于，为什么有将glibc中的一部分提取出来，放在/usr/local中固化的需求呢？（或者对glibc的实现做调整）而且从操作上，即使我们需要对glibc动手脚，最好将整个编译结果放在/usr/local中，完整替换全部的glibc库。当然，这个行为会使得glibc的修补补丁彻底失效。根据运行时错误好过逻辑错误的理论，这是一件比崩溃更糟糕的事。&lt;/p&gt;

&lt;p&gt;更糟糕的问题并不在glibc上，而是这台机器的维护状态，还好这是一台开发用机，而不是在线机器。如果有人知道这台机器的LD被做过手脚，应该很容易能够想到这个问题的原因。但是在复盘中我询问多个人，都不知道这台机器被如此设定的理由，甚至没人知道如何维护这台机器。实际上这台机器的维护曾多次易手，其中有些人根本已经离职。即使尚未离职，也未必记得自己到底做过哪些事。而我也找不到任何相关文档表明这台机器被如何的维护了。这也是为什么这台机器不好迁移的原因——在机器上有太多明的暗的诡异的workthrough，要将其迁移到另一台机器上是件耗费人工的事。我维护的很多机器（帮朋友维护）也处于类似的状态。维护时间太长，经手人多次转手，上面很多设定完全黑化，要迁移需要付出相当代价，等等。。。&lt;/p&gt;

&lt;h1 id=&#34;docker能解决这个问题么&#34;&gt;docker能解决这个问题么？&lt;/h1&gt;

&lt;p&gt;不好说，这个问题有点复杂。&lt;/p&gt;

&lt;p&gt;从本质上说，docker解决不了这个问题。因为一个workthrough，存在于整个系统中，还是存在于一片dockerfile的海洋中，其实没太大区别。如果我会跑上去就看dockerfile，然后从一大堆过程中一眼看出问题，那我也会在这次解决中先去看LD设定。最低限度，看bt的时候根本不用参考源码，往下看两行就知道原因了。而即便知道原因，这句cp存在于里面的原因仍然未知。我不知道为什么会把这个文件cp到/usr/local，无论是机器上实际存在的复制，还是dockerfile中的cp语句。最后实际有帮助的，还是在这句cp上注释的信息，或者机器上留存的维护文档。&lt;/p&gt;

&lt;p&gt;但是docker是有帮助的。首先使用了docker起码好迁移了。当然，这不是他最大的帮助。&lt;/p&gt;

&lt;p&gt;docker最大的帮助帮助并不是来自于能够帮助我简化寻找流程，或者知道原因。而是来自于减小系统规模，甚至可以将系统规模降低到需要的最小规模。在一个复杂系统中，寻找一个workthrough，或者知道为什么是困难的。但是在简洁系统就容易很多，非常多。&lt;/p&gt;

&lt;p&gt;当然，将复杂系统拆分为简洁系统是有代价的，并不那么容易的。在这点上，我比较信奉熵增原则。在增大系统规模的时候，系统的熵永远是增加的。如果要降低熵，就需要对这个系统做功，无论从哪个方面。随着手段不同，做功只有大小差别，而没有一颗“一次解决”的银弹。从这个意义上说，docker并不能解决这个问题，他只是能降低你需要做的功。&lt;/p&gt;

&lt;p&gt;而如果对某个系统做功并不产生实际效用（而只是为了将来可能性的维护便利）时，这部分开销就可能被砍掉。反正解决了问题并保持一段时间，相关人员可能就不再继续维护，或者高升，或者离职，或者根本转行。于是系统中（包括代码和维护）会不断产生各种workthrough，“将来要修”的承诺，和随着不断的人员变更不再有人记得的暗创。最后系统就会变成遗留系统，没人知道为什么，没人敢动，也不敢停。静静的在那里，吞噬一批又一批IT从业人员的青春，同时也产生更大的熵。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于程序员和产品经理两大世界体系的对话——论快播庭审</title>
      <link>http://shell909090.org/blog/archives/2816/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2816/</guid>
      <description>&lt;p&gt;最近快播的段子都快传疯了。很多网友也在那里分析快播有没有罪，辩护有没有问题之类的。其实结果对我来说一点都不重要。快播有没有罪，这个留给法庭审判。我今天要说的是庭审所暴露出来的一些问题，一些我日常中经常看到的问题。&lt;/p&gt;

&lt;p&gt;我们先看两个段子（其实基本是庭审里的事实）：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;审判长问：文件加了密，你为什么不解密呢？&lt;/p&gt;

&lt;p&gt;张克东：如果达不到一定的码率，快播软件就会启动缓存服务器开始加速，达到了码率，就会自动断开。&lt;br /&gt;
法官：软件它为什么会知道？它是机器人么？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也许有些人看到段子1，会喷国家审查啊什么的。其实这不是审查，而是无知。审查一定是懂行的，无知才会要人解密。至于段子2，也有类似的问题——码率的衡量问题在大多数程序员，甚至包括懂一点技术的用户那里都不是秘密。问“软件为什么知道”，实际上非常无知。&lt;/p&gt;

&lt;p&gt;甚至同样的问题，也存在于某些网友的评论中。例如&lt;a href=&#34;http://www.leiphone.com/news/201601/101BbjfiTqPv2N6d.html&#34;&gt;这篇&lt;/a&gt;。我引用这个评论段落：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我看到不少网友以此取笑法官如何外行。其实法官非常聪明，不管张克东如何回复，都回避不开“软件如何知道”，也就是系统如何识别片源问题,只要这个回答了,你快播就摆脱不了你”清楚”播放哪些视频的问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果懂一点技术的话，应该明白一点。对软件而言，码率一定是知道的。而内容，则未必。或者换个对不了解技术的同学们更友好一点说法。对浏览器而言，网页上的图片的大小，格式，都是知道的对吧？浏览器也可以用来浏览黄色网站对吧？那问题也一样，软件它为什么会知道？&lt;/p&gt;

&lt;p&gt;红衣主教，是不是该轮到你出庭聊一聊了？&lt;/p&gt;

&lt;p&gt;同样，所有聚焦点在“软件应当可以监管浏览内容”的人，同时也面临这么个问题，浏览器是否可以监管黄色网页？作为处理数据流的软件，肯定是了解被处理数据的格式，大小，码率等参数的。那么处理软件是否应当对被处理的数据的内容合法性负责呢？如果是的话，那毫无疑问，所有黄色信息都必然经过了Intel和AMD两家生产的CPU，而且绝大多数也经过了Windows。&lt;/p&gt;

&lt;p&gt;实际上，整个庭审中通篇都是法官和公诉人各种技术外行。例如用IP地址标识服务器，硬盘大小标识硬盘等等。如果在国外正常庭审，这证据其实就算废掉了。因为被告可以当场演示给你看改IP地址，你连服务器是不是他的都无法证明，还怎么构成证据链呢？当然，在中国来说，最后是否取信还是合议庭说了算的。&lt;/p&gt;

&lt;p&gt;对于程序员来说，这个故事是不是很熟悉？是不是觉得和产品经理打交道很像？一样是对技术一无所知，却对一无所知不以为耻。我碰到过一个产品经理，自以为提了一个很犀利的需求——为什么我们不通过软件自动算出地址，还要客户自己填？&lt;/p&gt;

&lt;p&gt;我听到这个问题的时候，估计表情和听到“为什么不解密”时的表情是一样的。心里一万头草泥马奔腾而过——合着不是你实现啊。尼马我怎么算？IP地址只能知道大致地区，还不一定准。GPS当时还不是每个浏览器都支持，就算支持也只能算出坐标，算不出地址。&lt;/p&gt;

&lt;p&gt;很多时候，产品上的一点小小的改变，往往是技术上的翻天覆地。不信你考虑一个论坛系统，如果做到像腾讯那么大流量的时候会是什么样一个样子？再考虑一个交易系统，在同样一个量下是什么样子？前者应该还能做，后者应该已经没法弄了吧。为什么同样是个网站，同样的量，一个没事，一个挂了？&lt;/p&gt;

&lt;p&gt;因为论坛系统是典型的无事务低写高读系统，因此可以使用分库分表，多层缓存的方法来增强性能。而交易系统是典型的事务，没法用这个手段。所以交易系统在海量压力下的技术难度，和论坛系统在海量压力下的技术难度，其水平和重点根本不是一类的。从这个意义上说，淘宝双11，很不容易。&lt;/p&gt;

&lt;p&gt;而这种技术难度，产品经理是不知道的。所以他搞不好会给一个超大流量论坛提出一个很实在的需求——咱们弄一个内部交易系统吧，应该会变成不错的盈利点。呵呵。这个系统要么做出来会有各种各样的事务问题，要不然这个系统大量使用的时候，整个系统（做的好的话应该不会波及论坛）就会慢到无法接受。&lt;/p&gt;

&lt;p&gt;当然，现实中一般是没有这么大论坛的。京东实打实在事务性能上吃过亏没错，但是那时候京东已经多大体量了？一个论坛，要引流过去那么大体量，自身得多大？但是这个例子本身说明技术难题的非直观性和在下判断时的必要性。如果你不了解这个技术本身会引发什么问题，你就无法得到合理的结论。&lt;/p&gt;

&lt;p&gt;作为产品经理，或者要和技术打交道的一切人士。不懂技术并不可耻，可耻的是不懂技术又无视技术。既不去学，也不去问。装作技术不会对他产生影响，装作不懂技术并不影响他决策的权威性。&lt;/p&gt;

&lt;p&gt;与此形成对比的，是微软垄断诉讼案中法官的表现。那个案子里，微软律师强调的是IE内核和windows系统的严密整合，导致两者几乎无法拆分。从软件架构角度来说，这没错。但是法官很明白里面的门槛——保留IE内核不代表保留IE。鼠标一点，IE直接从系统中干掉。虽然内核还在系统上，但是不额外安装IE的话，无法使用浏览器。如果没有后来的一些事的话，估计微软就难逃一劫了。&lt;/p&gt;

&lt;p&gt;话题拉回到快播庭审的事情上来。快播有没有问题？排除色情非罪化（我支持内容分级审查和色情非罪化），我觉得是有的。就好像我们说**的时候，一般都会想到约炮。（由于某些因素，我不能写出这两个字来。但是如果你这两个字和我想的不一样，那你的问题就大了）如果快播没有放任色情传播的话，是很难做到这么大的，更不可能做到我们一说找XX内容就想到快播。这不能说因为检方派了几个猪队友，所以快播干净了。&lt;/p&gt;

&lt;p&gt;但是这个问题是不是罪？这不好说。定罪这个事情是个专业性很强的活，我的法律知识不足以下这个判断。但是个人意见，我觉得应该无罪，至少不能拿缓存服务器上的色情信息来定罪。如果缓存服务器上有色情内容就可以定罪的话，那铁通小区宽带就可以直接去转型了。因为他们为了减少对电信的依赖，降低流量结算费。在小区里都是装了缓存服务器的，而且是强制透明缓存，想不做都不行。小区里有没有人看色情网站？他们为什么不人工看？&lt;/p&gt;

&lt;p&gt;看，这又是一个不懂技术就不知道我在说什么的问题。对用户来说，可能铁通的感觉就是“不好用”。技术人员才知道，电信和铁通的流量结算价格问题，还有铁通（以及各种小ISP）的透明代理的存在。知道这个透明代理和快播的缓存是不是在技术上是等效的。&lt;/p&gt;

&lt;p&gt;还有解密，可行不可行？对于快播来说，要解密应该是可以的。但是对于百度网盘来说，连解密都不行。我把我的一堆生活照在百度网盘上备了个份。为求安全，我用GPG做了加密，然后再用SHA256。我自己倒是问心无愧，但是对百度来说，里面到底是不是色情内容？我觉得百度要是还能解开，不妨把技术卖给CIA。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云计算的成本计算</title>
      <link>http://shell909090.org/blog/archives/2813/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2813/</guid>
      <description>

&lt;h1 id=&#34;成本构成和计算基准&#34;&gt;成本构成和计算基准&lt;/h1&gt;

&lt;p&gt;一般来说，云计算的综合成本会分为三块。硬件，机房（包括机房内网络设施），运维。当然，其实还有IP费用和流量费用。但是那个在云计算的费用中一般也是分开列的，所以可以和以上三项分开算。我们先算出去掉IP和流量的费用，然后再来独立讨论这两项的效应。&lt;/p&gt;

&lt;p&gt;在云计算中，CPU是可以超卖的，但是内存一般不超卖。所以我们计算的基准是内存。准确的说，是“带上其他硬件设备的内存”的单位价格。单位是人民币每G每年，缩写为/Gyr。在整个计算中，硬件费用都是来自dell美国的报价计算器，汇率恒定在6.5，折旧速率是5年。存储系统的折旧速度会比整机更快。存储盘3年折旧，SSD1.5年折旧。&lt;/p&gt;

&lt;p&gt;存储是硬件成本中比较特殊的一项，因为每个虚拟机都带有存储，也可以额外配置。所以我们单独为其估价，再在整体费用中将其加回去。这样在估算价格时可以计算光板系统。&lt;/p&gt;

&lt;h1 id=&#34;硬件成本&#34;&gt;硬件成本&lt;/h1&gt;

&lt;p&gt;在这个计算中，我随意挑了一款2U机器——R530。这是一台最低型号的2U机器，不知道有没有人在实际生产中用他，总之我们就先随便算。这台机器极限能插8条32G的内存，总内存量可以高达256G，还是挺适合虚拟化的。因为机器总体有成本，单机内存数越高，原理上说越省钱。&lt;/p&gt;

&lt;p&gt;撇开存储，撇开网络，内存升到极限，其实我们能选的就是一颗CPU。而且一般来说，CPU和内存需要成比例搭配。一般会选择1:4的搭配比，256G内存需要64颗核心。整个CPU搭配表上就没这么牛X的CPU。。。&lt;/p&gt;

&lt;p&gt;好吧，退而求其次，看看稍微差一点的CPU如何。由于整机搭配的内存和CPU越高，整体价格越便宜。所以我们搭配一颗最牛X的核心——E5-2695 * 2。整个系统瞬间升到56颗核心。和64核也相差无几，我们就选他了。&lt;/p&gt;

&lt;p&gt;相对的，整个机器既然配置了这么牛的系统，那么网卡就不能用默认的千兆网卡了。我选了两个双口光纤万兆模块，再加上一个1+1冗余电源。其他都用默认选配。计算下来，每G成本为56.2/Gyr。这差不多就是一个光板机器的最低价格了，里面不带任何其他费用。&lt;/p&gt;

&lt;p&gt;另外，为了参考，我们计算一组CPU配足的机型E5-2670 * 2。这颗CPU是24T的，所以要配合192G内存。平均成本为60.47/Gyr。&lt;/p&gt;

&lt;h1 id=&#34;io密度问题&#34;&gt;IO密度问题&lt;/h1&gt;

&lt;p&gt;上面假定一台机器尽力往里插内存，但是实际上不能这么做。因为存储模型的问题。&lt;/p&gt;

&lt;p&gt;我把虚拟化分为两种——单台机器故障的情况下数据不丢失，可以立刻在其他系统上开始启动系统的。和单台故障的情况下无法立刻恢复系统，甚至数据完整性都不能保证的。前者敢叫云计算，后者只能叫VPS。&lt;/p&gt;

&lt;p&gt;为了达到后者，一般我们会把写入存放在多台机器上。而为了效率考虑，EC编码之类的方案几乎不能考虑。所以综合下来，唯一的方法就是将数据写入同步到另外两台机器上（三副本）。如果这个复制动作通过网络进行，那么写入速度就受到网络瓶颈。&lt;/p&gt;

&lt;p&gt;例如上面的256G机器。虽然我选了两个双口万兆模块，总吞吐量高达40G。但是实际上你得假定可能有一根线故障，可用速率只有30G（如果是一个模块故障，更会降低到20G，幸好这不常见）。30G速率均分给256G内存，平均分给每G的吞吐只有120Mbps/G。折算出来就是15MB/s每G。这个速率要通过两份数据，分别传输给两台机器。如果用户不幸而选择了1G的内存，搞不好写入速度只有7.5M/s。要达到普通系统60M/s的写入速率，至少需要8G内存。这还没有计算机器到机器间通讯速率。&lt;/p&gt;

&lt;p&gt;那么解决方案是什么？其中之一就是降低机器上的内存数。当然增加网卡也是一个方案，但是这会严重影响接入系统的效率——我们本来已经出了4根纤了，你想把服务器搞成八爪鱼不成？&lt;/p&gt;

&lt;p&gt;如果内存数降低，那么单位内存上的吞吐速率就能提升。192G的吞吐是160Mbps/G，每G写入可达10M/s。内存降到128G的话，平均吞吐率就会升高到240Mbps/G，每G的写入速率可以提高到15M/s。如果降到64G，每G写入速率还会提升到30M/s。不过IO问题是个峰值问题。如果全系统都有大量写入，例如大部分实例都装了数据库，那么很不妙。不过如果全系统都是纯密集计算，那写入速度其实影响并不很大。为了对比，我同样计算了128G和64G的情况。但是这并不表示在实际搭建集群的时候需要使用低内存的机器。&lt;/p&gt;

&lt;p&gt;有趣的是，在其他保持不变的情况下，128G的平均成本为59.44/Gyr，和256G的版本相差无几，比192G的版本还便宜些。64G却快速上升到94.25。这说明在一定内存数量以上，硬件平均成本受到内存密度的影响并不大，但是低于某个限制后，则快速受到影响。&lt;/p&gt;

&lt;p&gt;另一个方案则是在服务器上采用40G网卡，4块40G网卡也能解决问题。但是网络会非常难做。因为上手就用了普通汇聚层的速率，所以如果要不大影响收敛比的情况下，汇聚和核心的速率要求会进一步提升。这种模型下，单位价格为62.55/Gyr。&lt;/p&gt;

&lt;p&gt;当然，还有另一个方案。我们使用独立存储系统，例如盘柜。这样会带来两个好处。首先盘柜的光纤独立，因此会极大的提升网络系统的效率。其次盘柜的多份复制是自行完成的，因此并不需要在吐出光纤上传送两份数据。当然，我对这种方案不熟，所以下面没做深入计算。哪天可以把这个方案的成本模型算出来再写一篇。&lt;/p&gt;

&lt;p&gt;下面我总结一遍上面方案的配比和成本：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;256G + 10G * 4: 56.20/Gyr&lt;/li&gt;
&lt;li&gt;192G + 10G * 4: 60.47/Gyr&lt;/li&gt;
&lt;li&gt;128G + 10G * 4: 59.44/Gyr&lt;/li&gt;
&lt;li&gt;64G + 10G * 4: 94.25/Gyr&lt;/li&gt;
&lt;li&gt;256G + 40G * 4: 62.55/Gyr&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注1：其实192G的版本用R730还会更便宜一些，低到54.40/Gyr。但是我们的目标是同类对比。为了减少环境变量，所以不讨论这种情况。&lt;/p&gt;

&lt;p&gt;注2：其实128G的版本由于CPU比较节能，所以整机大约可以节约100W的电力。这部分在下面并没有被考虑，否则可能涉及机柜里会多或者少一台机器，计算会非常复杂。&lt;/p&gt;

&lt;h1 id=&#34;机房成本&#34;&gt;机房成本&lt;/h1&gt;

&lt;p&gt;机房成本包括两块，网络设备费用和柜子费用。&lt;/p&gt;

&lt;p&gt;网络费用很容易算，一个柜子一般是42U/10A/20A电力。撑死放5-10台服务器。一个服务器两口，也就是10-20口左右的交换机。选个不大夸张的机器，也就是1W差不多了。就算电力翻倍，机器翻倍，交换机价格差不多也是翻倍的。所以平均成本还是基本不变。&lt;/p&gt;

&lt;p&gt;核心那里难算一点，一套核心要上百万，摊给全机房用。而且如果机器太多，可能两层交换量不够，还会用三层交换。那还有汇聚层的钱要算，大概又是上百万。&lt;/p&gt;

&lt;p&gt;柜子的价格最难算。视地点不同，每个月从几k到十几k不等。每个柜子能放的机器，随电力状况和CPU功耗，从5台到15台(35A)不等。而且很多时候，公司的体量大小和谈判能力也会严重的影响到价格。&lt;/p&gt;

&lt;p&gt;所以，为了简化上述计算，我直接硬把机柜价格指定为60k/yr[1]。300个柜子，每个柜子5台设备，1500台机器。核心加汇聚加接入，总数大约600W，每个柜子20k。至于为什么是这个数？不为什么，就是后面好算。&lt;/p&gt;

&lt;p&gt;于是很容易就算出来，每机柜每年成本64k/yr。128G下是100/Gyr，192G下是66.67/Gyr，256G下是50/Gyr。40G光纤比10G光纤原则上要贵，因为起手就要用汇聚交换机，而不是接入级的。但是具体贵多少——很遗憾我根本找不到数据。推测是贵了至少5倍。&lt;/p&gt;

&lt;p&gt;实际上，由于机房各种配比不一定能够达到最优状况，所以接入模型配比往往会比预期的高上非常多。而且机房成本也不一定能够控制在60k/yr的水平上。所以如果从业界实际角度考虑，这个费用的精确度大约会有20%的上下浮动。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;参考
&lt;a href=&#34;http://www.7x24.cn/colocation/idc-colocation-centre.htm&#34;&gt;这篇文档&lt;/a&gt;
，有的地方能租到这么便宜的柜子，有的地方不行。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;运维&#34;&gt;运维&lt;/h1&gt;

&lt;p&gt;一套云计算平台，需要多少个人运维？&lt;/p&gt;

&lt;p&gt;不知道，这得看是什么平台了。假定不需要研发（openstack出局），不需要license费（vmware出局），纯维护管理。最小单位需要1-2个SA，1-2个网络工程师，一个程序员，一个经理，五六个值班监控。。。大约10人团队。如果再加上研发，那就没底了。&lt;/p&gt;

&lt;p&gt;目前每个人的公司侧成本（不计办公费用，计公司税费），至少要30W一年。这批人就是300W一年的开销。如果摊到1500台256G的机器上，那就是7.812/Gyr。如果是192，那就是10.42/Gyr。如果是128G，那就是15.625/Gyr。当然，加上公司运营因素和各种杂项，要翻倍比较合适。&lt;/p&gt;

&lt;h1 id=&#34;资金成本&#34;&gt;资金成本&lt;/h1&gt;

&lt;p&gt;大家别忘了，资金也是有成本的呐。不是说1W摊5年，每年摊2k就完事了。如果1W放五年理财，也得有个25%的收益了。从企业运营的角度讲，如果资金收益率小于10%，那还不如让别人来干。省下钱来干点别的更赚钱的业务。&lt;/p&gt;

&lt;p&gt;所以以上各项成本，在累加后还要乘以至少1.1。&lt;/p&gt;

&lt;h1 id=&#34;成本部分结论&#34;&gt;成本部分结论&lt;/h1&gt;

&lt;p&gt;上面数项，除掉存储，价格总计为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;256G + 10G*4: (56.2 + 50 + 15.62) * 1.1 = 134.0/Gyr&lt;/li&gt;
&lt;li&gt;192G + 10G*4: (60.47 + 66.67 + 20.83) * 1.1 = 162.77/Gyr&lt;/li&gt;
&lt;li&gt;128G + 10G*4: (59.44 + 100 + 31.25) * 1.1 = 209.76/Gyr&lt;/li&gt;
&lt;li&gt;64G + 10G*4: (94.25 + 200 + 62.50) * 1.1 = 392.42/Gyr&lt;/li&gt;
&lt;li&gt;256G + 40G*4: (62.55 + 62.5 + 15.62) * 1.1 = 154.74/Gyr&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;里面我们可以得到一些结论。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;云计算的成本，基本是硬件和机柜对半分。最贵的不一定是硬件，很可能是机柜，尤其在内存密度不足时。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大内存最显著的意义并不是降低硬件平均费用，而是增加机柜密度。机柜密度大就节约租金和运维开销，因为一般运维不会因为维护的机器内存更大就更花人工。当然，由于上面并没有反应出高密度机器CPU功率会高的事实，所以更高的机柜密度就意味着更低的成本。如果将这部分纳入，高功率可能导致少放一台机器，从而产生其他影响。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;影响机柜密度的最主要因素不是空间不足，而是电力不足。机柜租金中也有相当大比例来自电费（和制冷电费）。因此电费便宜，环境冷的地方的机房，成本肯定低。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从硬件侧说，整台机器的主要电力花销和成本都来自CPU。大数额内存的功率花销几乎可以忽略，成本基本都是32G/500\$，合大约20/Gyr。主要电功率开销和浮动成本都来自CPU，所以选择低功耗低成本比CPU可以有效降低成本。而一般来说，核数越多，平均功耗是几乎肯定降低的，平均价格会略有波动。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;但是如上面所说，增加CPU核心密度来提升机柜密度有其缺陷——外部通讯系统瓶颈。是否要解决这个问题，就见仁见智了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在这几个模式里，我个人比较喜欢2和5。两个都相对不算贵。2的IO比1好，而且CPU足。5的成本更低，但是CPU不足，而且这个模式下的稳定性如何，网络如何支撑，没有大量实践。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;存储&#34;&gt;存储&lt;/h1&gt;

&lt;p&gt;我们下面要估算的是裸存储价格，即光板存储的单位价格。在配置RAID，或者做冗余的时候，需要相应的折损。&lt;/p&gt;

&lt;p&gt;裸存储价格也分为三类——低速盘，高速盘，SSD。一般来说，速度越低，IOPS越低，越适合做数据仓库。速度越高，成本越高，越适合做高速读写。&lt;/p&gt;

&lt;p&gt;低速盘最大8T，单价7k。折算下来，0.289/Gyr。一般能跑100-200IOPS，平均0.025IOPS/G。&lt;/p&gt;

&lt;p&gt;高速盘最大600G，单价4k。折算下来，2.254/Gyr。一般能跑500IOPS，平均0.833IOPS/G。&lt;/p&gt;

&lt;p&gt;SSD先选最大一块1.92T那块，单价14k，折算下来，4.972/Gyr。这块是读优化的，有数据说能到100k
IOPS，平均52IOPS/G。如果是写入，只有18k
IOPS，平均9.375IOPS/G。阿里云的宣称数据是30IOPS/G，这块是支撑不起来的。要能支持30IOPS/G，需要选用800G那块，写优化的。单价13.04/Gyr，据说写入能达到28k
IOPS，平均35IOPS/G。&lt;/p&gt;

&lt;p&gt;可以看到，SSD的成本要比存储盘远高。按照单价而言，甚至远远高于硬件成本。如果我们给一台虚拟机增配20G裸存储SSD的话，每台就要增加280.8/yr的费用。更糟糕的是，虚拟机存储费用是裸存储的3倍（三副本）。一般来说为了节约成本，没有厂家会在这里用SSD来支撑系统镜像，最多高速盘。也就是135.24/yr的成本。&lt;/p&gt;

&lt;p&gt;吞吐的成本如此高，也难怪IO是衡量虚拟机性能的重要指标。&lt;/p&gt;

&lt;p&gt;注：有些厂家可能在高速盘集群上搭配了SSD的cache，作为读写缓冲，并自动分层管理缓存。这种模式对IO优化很好，成本也很低廉。我们在这里对这种模式不做深入。&lt;/p&gt;

&lt;h1 id=&#34;计算存储成本&#34;&gt;计算存储成本&lt;/h1&gt;

&lt;p&gt;如果以4G内存搭配20G高速盘来计算存储附加，成本增加为：&lt;/p&gt;

&lt;p&gt;3 * 2.254 * 20 / 4 * 1.1 = 37.19/Gyr&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;256G + 10G*4: 134.0 + 37.19 = 171.19/Gyr&lt;/li&gt;
&lt;li&gt;192G + 10G*4: 162.77 + 37.19 = 199.96/Gyr&lt;/li&gt;
&lt;li&gt;128G + 10G*4: 209.76 + 37.19 = 246.95/Gyr&lt;/li&gt;
&lt;li&gt;64G + 10G*4: 392.42 + 37.19 = 429.61/Gyr&lt;/li&gt;
&lt;li&gt;256G + 40G*4: 154.74 + 37.19 = 191.93/Gyr&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;云计算费用&#34;&gt;云计算费用&lt;/h1&gt;

&lt;p&gt;OK，在经过上面罗哩罗嗦的计算后，我们终于讲到重头戏了——云计算费用。&lt;/p&gt;

&lt;p&gt;在配置硬件的时候，在搭配中1T会配4G内存。但是CPU超卖情况下，1T是绝对不会卖4G以上内存的。因为这会让部分CPU永远不被用到。（想不通的朋友可以考虑，如果1T配8G内存，那256G内存最多分配32T，56T里面会空出24T无法分配）因此2核心可以搭配1G-8G内存，却不能搭配以上。如果只搭配2G内存，那么2G/2核心，按平均却只能占有半个核心，却实际能占据两个核心。&lt;/p&gt;

&lt;p&gt;这就是虚拟化成本计算模型中最大的问题——CPU超卖。&lt;/p&gt;

&lt;p&gt;我们如何计算呢？很简单。取每家最大核心的情况下，内存最大的一个套餐，计算为每G成本。因为这个搭配基本和这家的每个计算单元的物理状况趋向一致。而这家的其他套餐，费用一定会高于这个套餐。多出来的钱就是CPU超卖利润。&lt;/p&gt;

&lt;p&gt;当然，超卖比例越高（例如全都是2G内存搭配4核心），虽然利润越高。但是如果这家不约束这种行为，会很快导致计算力不足而被客户骂死。一旦约束这种行为，实际上就需要将内存空着不卖出去。导致每G内存收取费用上升。本质上还是会回归到差不多的价格。&lt;/p&gt;

&lt;p&gt;作为用户来说，其实小内存大核心在密集运算的价格上会占点便宜。但是由于一般网站计算的特性，应当合理的搭配核心和内存。也没可能为了多占核心而特意配一个小内存大核心的机器。1:2到1:4的内存比是比较恰当的。&lt;/p&gt;

&lt;p&gt;青云：国内665.82/Gyr，亚太节点921.00/Gyr。&lt;/p&gt;

&lt;p&gt;阿里云：国内(除青岛)447.0/Gyr，香港节点525.94/Gyr。&lt;/p&gt;

&lt;p&gt;腾讯云：375/Gyr。腾讯云的特殊之处在于有1核心超越4G内存的搭配，看来硬件配比应该比较特殊。而且香港机房并没有显著贵。&lt;/p&gt;

&lt;p&gt;ucloud：国内454.84/Gyr，亚太节点518.28/Gyr。&lt;/p&gt;

&lt;p&gt;GCE：美国531.44/Gyr，亚太节点584.58/Gyr。&lt;/p&gt;

&lt;p&gt;AWS(EC2)：美国516.18/Gyr，美国(北加州)711.46/Gyr，日本683.55/Gyr。&lt;/p&gt;

&lt;p&gt;linode：780/Gyr。所有节点统一价格，还包了流量费用。简直神奇。&lt;/p&gt;

&lt;h1 id=&#34;结论&#34;&gt;结论&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;别忘了上面的价格可都是零售价格，大客户还能打折。再加上一般机房里不可能全部资源都正好卖光，都会空着部分资源。上面的价格乘以0.7-0.8差不多是实际运营商每G能赚到的钱。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;大部分云计算厂商的价格都在500/Gyr上下波动。linode的特别贵，但是那个包含了很高的流量费用，扣掉之后反而是最便宜的。但是要记得，linode是vps，而不是云。腾讯云的特别便宜，而且香港机房也没有提价，原因不确定。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;机房对总成本的影响非常大，这点非常符合成本预期。下面实际计算出来光成本差就有0(腾讯云)，50/Gyr(GCE/ucloud)，200/Gyr(青云/AWS)，这么几种级别。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以阿里云，0.8销售比和128G节点来计算的话。阿里云的折算后收益大约是360，节点成本是250。考虑其他费用（包括市场/售前/售后/财务/人事,etc）的情况下，其实match的很不错。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;假设用户有xG的需求，每个都是理想状态，自建服务器和采购云平台哪个更合算？&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们只计算256G版本，192G版本和128G版本，其他请自己类推。&lt;/p&gt;

&lt;p&gt;256G版本：&lt;br /&gt;
(56.2 + 50 + 2*3000000/x + 135.&lt;sup&gt;24&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;) * 1.1 = 500 * 0.8&lt;br /&gt;
求出来得到x = 26830.5G。&lt;/p&gt;

&lt;p&gt;192G版本：&lt;br /&gt;
(60.47 + 66.67 + 2*3000000/x + 135.&lt;sup&gt;24&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;) * 1.1 = 500 * 0.8&lt;br /&gt;
求出来得到x = 29602.4G。&lt;/p&gt;

&lt;p&gt;128G版本：&lt;br /&gt;
(59.44 + 100 + 2*3000000/x + 135.&lt;sup&gt;24&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;) * 1.1 = 500 * 0.8&lt;br /&gt;
求出来得到x = 35214.1G。&lt;/p&gt;

&lt;p&gt;所以，要自建机房，至少得有30T内存需求以上，甚至要到35T。用256G内存来算，这大约是120台。192G下是160台。128G下是300台。&lt;/p&gt;

&lt;p&gt;一个基本结论是，所用的内存越大，越容易低成本的自建云存储。这很容易理解，因为大内存机机柜密度高，租金低，用小团队就可以管理。考虑到各种其他开销。如果总内存需求量上了30T，不妨可以考虑一下。当然，你可别忘了上面的假定是“10个人团队能hold住整个系统”。很多IT公司的管理和选型下，这点是做不到的。&lt;/p&gt;

&lt;p&gt;考虑到自己开销的波动（例如促销），公有云比自建机房更方便抵消这部分波动。从这里来说，大部分情况下自建机房都不合算。如果基础系统开销已经超过了临界点，不妨考虑将波动部分扔到云上，通过VPN和自建平台对接（例如AWS
Direct Connect）。&lt;/p&gt;

&lt;h1 id=&#34;带宽价格&#34;&gt;带宽价格&lt;/h1&gt;

&lt;p&gt;上面我们都在说机房，而没有提到带宽。主要问题是国内带宽情况非常混乱。电信卖给竞争对手的价格高达1000/Mbps，而阿里CDN的价格只有22.8/Mbps（所以才有流量穿透问题啊，同学们，万恶的资本主义。。。）。这说明在阿里的边缘节点上，他们的带宽价格不会比22.8/Mbps更贵，至少不会普遍更贵。&lt;/p&gt;

&lt;p&gt;那么带宽价格如何对照？我觉得比较有意义的是各CDN厂商的价格。CDN厂商的主要成本都是来自边缘节点的出向流量费用。由于缓存作用，他们的入向流量应该显著不足。当然，传统CDN厂商也像各大运营商一样，定价非常浮动。不过aliyun之类的厂商定价还是比较透明的。我们可以以他们作为标杆。&lt;/p&gt;

&lt;h1 id=&#34;说明&#34;&gt;说明&lt;/h1&gt;

&lt;p&gt;首先特别说明一点。这个计算中不包括任何七牛的线上配置，产品，价格之类的数据。对比中也特意略去了七牛。&lt;/p&gt;

&lt;p&gt;对于我来说，这些算是公司机密，因为很多我都接触到了。当然，大家可以自行将上面的算法应用在七牛上。。。那就和我没关系了。&lt;/p&gt;

&lt;p&gt;其次要注意，成本那部分并不很准。首先用的是DELL海外官方价格。相信任何一家云计算去采购的时候都会面对不一样的供货价格，然后再谈判一个折扣。那个价格只能参考。其次很多地方也采用了近似估计的方法（例如机房）。只能仅供参考。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>