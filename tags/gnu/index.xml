<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gnu on Shell&#39;s Home</title>
    <link>http://shell909090.org/tags/gnu/</link>
    <description>Recent content in Gnu on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Sep 2012 11:58:22 +0800</lastBuildDate>
    <atom:link href="http://shell909090.org/tags/gnu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>自由软件的基础讲解</title>
      <link>http://shell909090.org/blog/archives/2237/</link>
      <pubDate>Mon, 10 Sep 2012 11:58:22 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2237/</guid>
      <description>&lt;h1&gt;授权&lt;/h1&gt;

&lt;p&gt;本文档内容基于cc-by-sa3.0下发布。&lt;/p&gt;

&lt;p&gt;您可以自由复制、发行、展览、表演、放映、广播或通过信息网络传播本作品，创作演绎作品，对本作品进行商业性使用。惟须遵守下列条件。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;署名 — 您必须按照作者或者许可人指定的方式对作品进行署名。&lt;/li&gt;
&lt;li&gt;相同方式共享 — 如果您改变、转换本作品或者以本作品为基础进行创作，您只能采用与本协议相同的许可协议发布基于本作品的演绎作品。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体信息请查看&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/deed.zh&#34;&gt;署名-相同方式共享 3.0&lt;/a&gt;。&lt;/p&gt;

&lt;h1&gt;从一个软件说起&lt;/h1&gt;

&lt;p&gt;给大家介绍一个软件，comix。comix是一个由python和GTK+写成的漫画浏览软件。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持zip, rar， tar等格式的压缩包直接浏览&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;li&gt;有自己的用户群和wiki页面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是某天，我在Windows下使用comix的时候发现，在Windows下这货不支持压缩包直接浏览。而且手里有大量包是7z格式，木有办法使用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;检查源码，发现是/的问题。蛋疼的跨系统。&lt;/li&gt;
&lt;li&gt;根据网络上的提示，我发现有两个解决问题的方法。
&lt;ul&gt;
&lt;li&gt;使用封闭免费软件，例如honeyview，然后转跳到问题3&lt;/li&gt;
&lt;li&gt;自己修掉这个bug，反正只有一处，然后转跳到问题4&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;7z格式木有办法，只能苦等最新版本出来，完了。&lt;/li&gt;
&lt;li&gt;需要7z支持，自己又做了一个7z支持的补丁，从此所有漫画都可以直接浏览&lt;/li&gt;
&lt;li&gt;我希望向官网提供我的补丁，发现软件已经失去维护&lt;/li&gt;
&lt;li&gt;在寻找的时候，我发现有爱好者维护了一个新的分支，mcomix。解决了很多历史bug，同时支持了7z&lt;/li&gt;
&lt;li&gt;原来在问题2上，有一个隐藏选项，直接用mcomix，完了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这说明，在你想出一个需求的时候，最好先问问资深用户，是不是已经被解决了。很多时候，不要重复造轮子。&lt;/p&gt;

&lt;h1&gt;修改源码？听起来好像很麻烦&lt;/h1&gt;

&lt;p&gt;如果不是职业程序员，还是别想了。调试软件和修改源码需要专业知识（当然，不需要是计算机系出身，但是需要专门的学习）。但是掌握技巧后，修改一个bug并不是很困难。然而，拥有修改源码的能力，表示这个软件和那些“你无能为力”的软件有所不同。&lt;/p&gt;

&lt;h1&gt;神码叫做自由软件&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;无论如何，你可以自由使用。这隐含了软件是免费的（或者满足一定条件下免费）。&lt;/li&gt;
&lt;li&gt;源码开放。用户有研究如何使用的自由。&lt;/li&gt;
&lt;li&gt;重新发布源码。用户可以让别人使用，或者包含在其他产品中使用。&lt;/li&gt;
&lt;li&gt;改善软件。用户有改善软件的自由。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，自由软件的前提是，软件必须是开源软件。&lt;/p&gt;

&lt;h1&gt;两个软件的不同遭遇&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Foxpro VS Sql Server&lt;/p&gt;

&lt;p&gt;老计算机用户都应当记得foxbase和foxpro这两个软件。当年风光一时的数据库软件，在被微软收购后，就黯淡无光了。尽管退出市场的主要原因是因为单机开发模式并不适应网络大规模开发，但是这只需要设立一个网络层就可以解决。微软在收购Sql Server后，为了保证其市场地位，收购并雪藏了foxpro。目前该软件已经停止开发，最新版本的支持也即将过期。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mysql VS Oracle&lt;/p&gt;

&lt;p&gt;同样可怕的事情发生在mysql身上，做web开发的应该无人不知其大名。在Oracle收购后，Mysql也面临和foxpro同样的遭遇，更巧的是，他们同样是数据库类软件。
然而Oracle无法雪藏Mysql。因为一旦Oracle雪藏Mysql，其他人可以继续Mysql的某个开源分支继续开发一个完全不同的东西。Mysql的创始人之一，Michael Widenius支持这个做法。
因此，直到目前为止，Oracle都没有停止对Mysql的支持。
当然，由于未来的风险，一些人在选择新数据库的时候转向了PostgreSQL，或者其他选择。然而已有的系统不会受到影响，已经学了Mysql的用户也不会受到影响。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果当年Mysql是闭源，那么。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;很多基于Mysql的改造是不可能的，例如mysql proxy。&lt;/li&gt;
&lt;li&gt;今天Mysql管理员大概就得赶快再学些别的东西。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;自由软件有版权么？&lt;/h1&gt;

&lt;p&gt;有，版权是一个人完成一个产品后自然具备的权力。开放源码并不剥夺这个权力。一个人完成了一本小说，并让别人观看了，难道他就失去版权了么？我们一般在谈论版权的时候，往往和其他权力混淆起来。实际上，版权这个东西，其实指的是著作权。基本权力包括两种，人格著作权和财产著作权。衍生权力就更多了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;人格著作权
&lt;ul&gt;
&lt;li&gt;公开发表&lt;/li&gt;
&lt;li&gt;署名&lt;/li&gt;
&lt;li&gt;扭曲&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;财产著作权
&lt;ul&gt;
&lt;li&gt;复制&lt;/li&gt;
&lt;li&gt;公开口述&lt;/li&gt;
&lt;li&gt;公开播送&lt;/li&gt;
&lt;li&gt;改编&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自由软件主要放弃的，是对衍生权力的追究。即，作者授权你，在一定的条件下，可以进行合法的复制/改编，而不追究你的责任。但这不表示作者放弃版权。&lt;/p&gt;

&lt;h1&gt;授权协议&lt;/h1&gt;

&lt;p&gt;既然作者授权你如何如何，那么这就算是一份授权协议。我们下面列一下常见的授权协议：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;封闭协议
&lt;ul&gt;
&lt;li&gt;最终用户协议（EULA）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;开源协议
&lt;ul&gt;
&lt;li&gt;LGPL：修改源码后不得闭源，新增代码可以不采用同样许可证，源码修改处不需要说明文档&lt;/li&gt;
&lt;li&gt;Mozilla：修改源码后不得闭源，新增代码可以不采用同样许可证，源码修改处需要说明文档&lt;/li&gt;
&lt;li&gt;GPL：修改源码后不得闭源，新增代码必须采用同样许可证&lt;/li&gt;
&lt;li&gt;BSD：修改源码后可以闭源，每个修改的文件不必放置版权说明，衍生软件不得用你的名字做广告&lt;/li&gt;
&lt;li&gt;MIT：修改源码后可以闭源，每个修改的文件不必放置版权说明，衍生软件可以用你的名字做广告&lt;/li&gt;
&lt;li&gt;Apache：修改源码后可以闭源，每个修改的文件都必须放置版权说明&lt;/li&gt;
&lt;li&gt;cc：创作共用协议，包括几种变化（by：署名，nc：非商业使用，nd：禁止演绎，sa：相同方式）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;这么多授权，蛋疼不？&lt;/h1&gt;

&lt;p&gt;授权是从血泪教训中衍生出来的。我们下面讲一个开源的例子，大家非常熟悉的视频播放器&lt;/p&gt;

&lt;p&gt;在以往，个人电脑只能使用微软开发的MPEG-4 Codec，即MS MPEG4 V1、MS MPEG4 V2、MS MPEG4 V3的系列编码核心。其中以MS MPEG4 V3的画质最好。不过其只可用在ASF文件，但这个文件格式是封闭的。故此网上有些黑客将其改写为著名的MPEG4 Codec DivX 3.11。&lt;/p&gt;

&lt;p&gt;但问题是，DivX 3.11的基础技术是非法盗用微软的，无法进行更广泛的产品化及生产硬件播放机。因此，一些精通视频编码的工程师（包括原DivX 3.11的开发者）成立了一家名为DivX Networks Inc.的公司，简称DXN。他们主导了完全符合ISO MPEG4标准的Open DivX CODEC的开发，并吸引了许多软件高手参与。这时，主要的编程工作是由DXN来做，但很多技术上的难题却是由开放源代码社区帮忙解决。&lt;/p&gt;

&lt;p&gt;但因为整个计划并不是根据GPL开发的，而是LGPL，因此在Open DivX即将成形时，DXN 借此漏洞将其闭源，结果使众多开放源代码社区的义工感到被出卖。也是因为这个原因，整个 0day 组织永远的拒绝了 DXN 公司的 DivX 格式。&lt;/p&gt;

&lt;p&gt;而原Open DivX计划的义工最后决定在最后一个Open DivX版本的基础上，编写XviD（将DivX反过来写）以继续原Open DivX的目的。&lt;/p&gt;

&lt;p&gt;大约1年后，Xvid计划的开发者重写了所有代码，并依照GPL发布（而不再是LGPL，所以谁要是想用它做成产品而不开放源代码是非法的）。但因为某些国家如美国，日本有软件专利法，使得其在该地区可能出现法律纠纷。因此，Xvid官方站点只提供源代码下载，用户只可由第三方站点下载第三方的安装档。&lt;/p&gt;

&lt;p&gt;* 摘自&lt;a href=&#34;http://zh.wikipedia.org/wiki/Xvid#.E6.AD.B7.E5.8F.B2&#34;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;对于非法的侵权，自由软件可以怎么办&lt;/h1&gt;

&lt;p&gt;Libav（旧称：FFmpeg）是一个自由软件，可以运行音频和视频多种格式的录影、转档、流功能，包含了libavcodec ─这是一个用于多个专案中音频和视频的解码器库，以及 libavformat ——一个音频与视频格式转换库。&lt;/p&gt;

&lt;p&gt;由于Libav/FFmpeg是在LGPL/GPL协议下发布的（如果使用了其中一些使用GPL协议发布的模块则必须使用GPL协议），任何人都可以自由使用，但必须严格遵守LGPL/GPL协议。目前有很多播放软件都使用了Libav/FFmpeg的代码，但它们并没有遵守LGPL/GPL协议，没有公开任何源代码。Libav/FFmpeg 社区便将这些违反协议的公司/组织/个人的网址粘贴“耻辱大厅”（又叫“耻辱柱”）上，并与这些公司/组织/个人商讨如何解决版权争议。&lt;/p&gt;

&lt;p&gt;* 摘自&lt;a href=&#34;http://zh.wikipedia.org/wiki/Libav&#34;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://libav.org/shame.html&#34;&gt;耻辱柱地址&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The KMPlayer, issue tracker entry&lt;/li&gt;
&lt;li&gt;MediaCoder, issue tracker entry&lt;/li&gt;
&lt;li&gt;QQPlayer, issue tracker entry, reproduced 2009-11-04&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;自由软件的优劣&lt;/h1&gt;

&lt;p&gt;使用自由软件，有一点很大的劣势。如果你是商业软件用户，那么软件公司需要始终保证你的售后。&lt;/p&gt;

&lt;p&gt;用户： 您好，我的电脑开不了机器了。
客服： 请问您电源插了没有？
用户： 阿，好的，问题解决了，谢谢。&lt;/p&gt;

&lt;p&gt;然而使用自由软件就意味着两件事：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果软件造成其他损失（例如停产，错误，硬件损坏，或者造成使用者被起诉），软件作者是不负任何责任的（插一句，这也是我不建议使用盗版的最主要原因）&lt;/li&gt;
&lt;li&gt;如果软件有问题，那么需要等到有人对这个问题有兴趣并进行修复。
&lt;ul&gt;
&lt;li&gt;有些软件的修复速度很惊人。我见到最快的是10分钟，不开玩笑，软件是gitstat。
中文编码问题，修复只要一行，作者10分钟内就修复了问题，一小时内发布了新的包。&lt;/li&gt;
&lt;li&gt;有些则是慢的惊人。据说某些大型系统（不点名）里面最长的未修复bug长达10年。。。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不过好在，自由软件也有着封闭软件没有的优点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果你对某个特性不舒服，你可以很容易的修改他。如果你不是程序员，你可以指望有个程序员一样对这个事情觉得不舒服。&lt;/li&gt;
&lt;li&gt;无论如何，你始终可以得到某个版本的软件，哪怕作者已经停止维护（例如msf-abbrev），进监狱（例如raiserfs4），或者已经挂了（PKZIP）。
自由软件唯一被废弃的理由就是不再有人使用了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;源码开放，安不安全&lt;/h1&gt;

&lt;p&gt;自由软件社区有一个理论，足够多的眼睛。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;足够多的眼睛能够发现软件的一切问题，就是说，软件的使用者和关注着够多的情况下，软件的bug很快就会被发现和消除。&lt;/li&gt;
&lt;li&gt;密码学说，安全性依赖于本身机制的安全性，而非黑盒子。即其他人即使知道了你的机制，也无法攻破系统。
而依赖黑盒子的系统，一旦盒子里面的把戏泄漏，要换一个盒子就要很高昂的成本。&lt;/li&gt;
&lt;li&gt;当然，这并不表示封闭软件是依赖于黑盒子保证其安全的。但是是否如此，你不知道，我也不知道。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;自由软件如何盈利&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;卖服务，例如RedHat。虽然软件不要钱，但是咨询，要钱，修Bug，要钱，维护，要钱。&lt;/li&gt;
&lt;li&gt;卖授权，例如GhostScript。由于GhostScript的源码是GPL发布，使用GS进行重发布的人只有几个选择。
&lt;ul&gt;
&lt;li&gt;开放自己的源码&lt;/li&gt;
&lt;li&gt;使用Adobe的库&lt;/li&gt;
&lt;li&gt;自己写一套&lt;/li&gt;
&lt;li&gt;违反版权，并被告上法庭&lt;/li&gt;
&lt;li&gt;买AFPL的授权&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;伸手要钱，例如Mozilla。软件的流行会给厂商带来非直接的好处。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>版权保护的迷局――论微软状告东莞网吧</title>
      <link>http://shell909090.org/blog/archives/132/</link>
      <pubDate>Wed, 11 Aug 2010 14:56:00 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/132/</guid>
      <description>&lt;p&gt;微软把广州的网吧告了，索价158万。这案子要放在美国，怕是没什么悬念的。敢用盗版，158万的索赔只能算小数，后面跟着的各种费用和公众质疑足够让公司活不下去了。而中国网吧的董事长居然亲自出面陈词，宣称“这样会让东莞一半的网吧倒闭”，不能不说是中国和美国的不同文化造成的不同结果。
美国是一个注重知识产权的国家，其背后的逻辑是，保护知识产权，才能让更多的人有热情创造好东西。因此，维护知识产权是非常重要的（甚至被大公司使用到很过分程度的）。一家公司，哪怕只有一台机器使用了盗版，都会伤害整个公司的信用。因此，微软关于盗版的态度，Bill Gates说的很露骨：他们要偷，就让他们偷，回头我们会连本带利拿回来的。在西方，只有一种违反版权的使用是得到默许的，就是为了教育教学目的的评估试用。AST开始Minix的原因就是因为闭源软件不利于教学，这点后来也被RMS等很多人所认识到。因此学校基于教育目的的使用，多数不会受到追究，当事公司多数装个大方，给予“特别授权”了事。当然，仅限用于教授课程，若是滥用盗版Office办理业务，还是会受到追究的。
开源软件业也受益于版权良多。若非西方国家严格的版权保护，很多对开源没兴趣的人根本不会使用开源软件。开源软件算是游走在版权与非版权间的平衡者。若是版权执行过于严厉，则有开源软件来抑制软件商乱抬价格（若是不行，只有诉诸反垄断法了）。若是版权执行过与宽松，则开源软件业自然疲软，让软件商可以喘口气。因此，从理论上最反版权的GNU运动，反而最受到版权的保护。
而中国作为后起之秀，在知识产权上注定不能像美国那样保护。因为多数专利，美国是收钱人，中国则是付钱人，收自己人的钱给外人，这是国家公民无论如何不能认同的，尤其是在对于生死问题相关的知识产权上。例如印度曾声称，所有西方有关医药的知识产权限制在印度不生效，由此才得以廉价的生产各种抗热带病的药物。对发展中国家的知识产权保护弱化问题，发达国家多数持眼开眼闭，或者不过于紧逼态度。因为过度的限制发展中国家会导致对方另起炉灶，日后搞不好多出一家竞争对手。
然而反过来，过于弱化的知识产权保护，反倒是值得发展中国家自己警惕的问题。我们可以回想，知识产权的作用是什么，大概就能得知过于弱化的知识产权保护会造成什么后果。知识产权保护人的创造意识，而过于弱化的知识产权保护会产生创造依赖。虽然我们可以廉价的抄袭别人的东西，然而创造什么，核心是什么，给不给，还是别人说了算。更麻烦的是，没人愿意搞什么创新，因为知识产权弱化的作用同时作用于对方和自己。抄袭者才有机会壮大和发展，如腾讯就是中国特有的例子。
而董事长出面宣称，“东莞的网吧要倒一半”，这更是中国特色中的中国特色。这招携GDP以令政府的招数，房产商就玩的很透彻。你不给我政策，我就威胁要关门，看你怎么交代。实话说对于某些道德违规乃至法律违规的行业，不如关了好。要不怎么？贩毒的也跑出来宣称自己创造了多少GDP，严打会让中国哪里的经济崩溃？可惜对于地方官员来说，GDP才是命根，至于执法的严肃性这个问题，在和谐社会的基础上都好商量。
根本上说，版权保护是个迷局。若是严格执行，怕会伤害整个经济和技术的发展。若是宽松执行，则会伤害整个国家的创造力。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>软件自由英雄谱</title>
      <link>http://shell909090.org/blog/archives/78/</link>
      <pubDate>Mon, 14 Sep 2009 13:53:00 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/78/</guid>
      <description>&lt;p&gt;谨以此缅怀那些为了今日软件事业的自由做出贡献的先辈们。(注1: 多数人没牺牲，谢谢)(注2: 排名不分先后)(注3: 科普作品，大家别怕)
我在撰写这篇文章的时候，避免使用自由软件这个词，而改为更普遍意义上的软件自由。因为自由软件是RMS提出的一个专有词语，指软件的开源，复制，协作等 特质。而我试图通过软件自由这个词，表达人们在使用软件上的自由，以及使用软件来为我们获取自由。我们拥有知道软件一切内幕的自由，我们拥有修改软件的自 由，我们拥有思考的自由，我们拥有挑战老系统的自由，我们拥有拒绝通过软件收费的自由，我们拥有通过软件获得信息的自由，我们拥有不受任何人，包括政府监 控的自由。为了这种自由而付出的，不仅是自由程序的拥护者，也有商业程序的拥护者。
1.Richard Matthew Stallman
大名鼎鼎的RMS，GNU的核心人物，自由软件的布道者。要是在这个列表上没有他的名字，那我不知道还有谁能留在这张表上。具体可以看这里(&lt;a id=&#34;q3m2&#34; title=&#34;http://zh.wikipedia.org/zh-cn/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC&#34; href=&#34;http://zh.wikipedia.org/zh-cn/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC&#34;&gt;&lt;a href=&#34;http://zh.wikipedia.org/zh-cn/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC&#34;&gt;http://zh.wikipedia.org/zh-cn/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC&lt;/a&gt;&lt;/a&gt;)。简单来说这家伙最大的几个成就：创立了GNU和FSF，为自由软件的传播奠定了基础。制作了emacs，当今黑客世界两大编辑器之一(另一个是VIM)。制作了GCC，世界上使用最广泛的编译器。
RMS的核心想法是，因为软件而收费是罪恶的，这种人是撒旦(当然，Bill Gates是其中最大的那个)。他认为软件应当自由分享，程序员从中收取的应当是服务费。今天，RedHat正是继承了这一模式。通过免费的软件和收费的服务来进行持续的开发。
2.Linus Benedict Torvalds
常常和RMS并提的一个家伙，具体在这里(&lt;a id=&#34;g_lz&#34; title=&#34;http://zh.wikipedia.org/zh-cn/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9&#34; href=&#34;http://zh.wikipedia.org/zh-cn/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9&#34;&gt;&lt;a href=&#34;http://zh.wikipedia.org/zh-cn/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9&#34;&gt;http://zh.wikipedia.org/zh-cn/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9&lt;/a&gt;&lt;/a&gt;)。 一个低调又火爆的家伙，没有什么太多言论，但经常语出惊人，最有名的是以“一群自慰的猴子”(OpenBSD crowd is a bunch of masturbating monkeys)来形容OpenBSD的团队。最大的成就就是写了个操作系统——没错，就是叫Linux的那个。
3.Donald Ervin Knuth
哈，这个人就不像上两个那么广为人知了。他(可不能叫这家伙，得敬老)有个中文名字，叫高德纳，页面在这里(&lt;a id=&#34;txsa&#34; title=&#34;http://zh.wikipedia.org/zh-cn/%E9%AB%98%E5%BE%B7%E7%BA%B3&#34; href=&#34;http://zh.wikipedia.org/zh-cn/%E9%AB%98%E5%BE%B7%E7%BA%B3&#34;&gt;&lt;a href=&#34;http://zh.wikipedia.org/zh-cn/%E9%AB%98%E5%BE%B7%E7%BA%B3&#34;&gt;http://zh.wikipedia.org/zh-cn/%E9%AB%98%E5%BE%B7%E7%BA%B3&lt;/a&gt;&lt;/a&gt;)。 最大的成就是写了本书，叫做《计算机程序设计艺术》。有意思的是，写到一半的时候，觉得现在(那是上世纪80年代的事情)的排版软件不爽——于是自己下 手，写了一个叫做Tex的排版系统——然后再回来继续写书。这本书算起来已经写了30多年了，估计成书时间和《浮士德》有的一拼。而Tex是当今高端排版 中最流行的系统(多数都不是直接拿来用，而是用了LaTex之类的包装)，如果有向国际期刊投稿过的应该有印象。Tex也是被誉为最接近完美的程序，它的 介绍在这里(&lt;a href=&#34;http://zh.wikipedia.org/zh-cn/TeX)%E3%80%82&#34;&gt;&lt;a href=&#34;http://zh.wikipedia.org/zh-cn/TeX)。&#34;&gt;http://zh.wikipedia.org/zh-cn/TeX)。&lt;/a&gt;&lt;/a&gt;他的版本号是以圆周率为基准的，头一个版本叫3，后一个叫3.1， 以此类推。目前的版本号是3.1415926，刚好是祖冲之的密率。高伯伯曾表示，等他死之后，版本号就改为&lt;span class=&#34;texhtml&#34;&gt;π，剩下的bug就作为程序的功能放在那里。
有一个未经证实的故事。据说上世纪Internet还没出现的时候，美国军方找人设计了TCP/IP协议，他们希望有人为他们实现基于Unix的TCP /IP协议栈。于是他们花了四千万美金，找人写了一个协议栈，并且拿到高伯伯的学校去用。对此高伯伯非常不满意——别误会，我指的是实现的效果。于是就自 己花了点时间写了一个，结果比原版的协议栈更快速而稳定。美国军方觉得非常困惑，问他是怎么做的。高伯伯说，读你们的协议，然后编码。
&lt;/span&gt;4.Andrew Stuart Tanenbaum
这个知道的人也不会太多，当然，职业玩家例外。当初AT&amp;amp;T禁止UNIX7的代码公布，因此大学里面都没什么实际产品可以用来教操作系统这门课。 于是，有个叫AST的老师就怒了，你不让我干，我自己干。于是写了一个叫做Minix的系统，并且还写了本书，叫做《操作系统：设计和实现》。后来有个学 生，觉得这个系统改改能干别的，于是给AST去信。AST说，改什么改，我写这东西是拿来教书的。于是这个学生就自己写了一个系统——对了，这个学生就是 上面的Linus，而那个系统，就是大名鼎鼎的Linux。
时至今日，Minux已经发展到了第三版(他的版本号是跟着书走的，第一版，第二版，第三版&amp;hellip;)，是大多数大学里面教授操作系统基础原理的标准教材。 同时，也在嵌入式系统等领域有非常大的应用。但是，由于AST还是坚持他的教学和精简原则，因此在桌面和服务器领域就别指望了。关于AST，大家可以看这 里(&lt;a id=&#34;c2cv&#34; title=&#34;http://en.wikipedia.org/wiki/Andrew_S._Tanenbaum&#34; href=&#34;http://en.wikipedia.org/wiki/Andrew_S._Tanenbaum&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Andrew_S._Tanenbaum&#34;&gt;http://en.wikipedia.org/wiki/Andrew_S._Tanenbaum&lt;/a&gt;&lt;/a&gt;)。
5.Ian Murdock
这个人很多人都听过，不过看着名字还是认不出来。他是Debian系统的作者，具体可以看这里(&lt;a id=&#34;m5_:&#34; title=&#34;http://en.wikipedia.org/wiki/Ian_Murdock&#34; href=&#34;http://en.wikipedia.org/wiki/Ian_Murdock&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Ian_Murdock&#34;&gt;http://en.wikipedia.org/wiki/Ian_Murdock&lt;/a&gt;&lt;/a&gt;)。
Debian有什么特殊呢？其实就本身来说，Debian并不算特别成功。但是Debian有庞大的衍生系统群，更有Ubuntu这样充满活力的发行。 Linux世界有所谓三大发行，四大包管理系统之说。其中三大发行指三个在世界上最广泛用于服务器的发行版本，即RedHat Enterprise Linux，SuSe， Debian，其中只有Debian是无服务商支持的。而四大包管理系统就是指RH的RPM系统，Debian的APT系统，arch的PCMAN系统， 和Gentoo的emerge系统。
6.Ken Thompson
有没有听说过？至少看着眼熟吧。这家伙是贝尔实验室的，最大成就就一个：Unix作者。详细内容请看这里(&lt;a id=&#34;f2hg&#34; title=&#34;http://en.wikipedia.org/wiki/Ken_Thompson&#34; href=&#34;http://en.wikipedia.org/wiki/Ken_Thompson&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Ken_Thompson&#34;&gt;http://en.wikipedia.org/wiki/Ken_Thompson&lt;/a&gt;&lt;/a&gt;)。
7.Dennis Ritchie
&lt;div style=&#34;text-align: left;&#34;&gt;没听说过？也很眼熟？这家伙和上面那位是朋友，最大成就也就一个：给上面那位提供了基础语言，C语言。详细内容请看这里(&lt;a id=&#34;d-g7&#34; title=&#34;http://en.wikipedia.org/wiki/Dennis_Ritchie&#34; href=&#34;http://en.wikipedia.org/wiki/Dennis_Ritchie&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Dennis_Ritchie&#34;&gt;http://en.wikipedia.org/wiki/Dennis_Ritchie&lt;/a&gt;&lt;/a&gt;)。&lt;/div&gt;
8.Bjarne Stroustrup
又是一个怎么看怎么眼熟的家伙？那当然。他和上面两位不怎么熟，不过他们都是一路的。他是C++的作者，详细内容请看这里(&lt;a id=&#34;krxr&#34; title=&#34;http://en.wikipedia.org/wiki/Bjarne_Stroustrup&#34; href=&#34;http://en.wikipedia.org/wiki/Bjarne_Stroustrup&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Bjarne_Stroustrup&#34;&gt;http://en.wikipedia.org/wiki/Bjarne_Stroustrup&lt;/a&gt;&lt;/a&gt;)。
9.Phil Katz
这个就很少有人知道了吧，不过大家肯定天天和他打交道。大家用记事本打开任意一个ZIP文件，开始的两个字肯定是PK，这就是Phil Katz，具体请看这里(&lt;a id=&#34;ihvo&#34; title=&#34;http://en.wikipedia.org/wiki/Phil_Katz&#34; href=&#34;http://en.wikipedia.org/wiki/Phil_Katz&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Phil_Katz&#34;&gt;http://en.wikipedia.org/wiki/Phil_Katz&lt;/a&gt;&lt;/a&gt;)。
这是一个有点悲剧的人物。在上个世纪的时候，大家还在BBS上混。由于速度有限，因此下载站的资源都是压缩提供的(当然，直到今天肯定还是如此)。最初的 压缩格式大多是ACE的，这是一家商业公司，直到今天还活着。由于PK不满意这家公司的压缩软件，压缩率低，速度慢，而且还不断提出高昂的收费。因此他决 定自己写一个压缩软件，就是最初的PKZIP。由于软件免费提供使用，压缩率高，解压速度快，因此很多站长自发的将数据格式转换为ZIP。后来PK就干脆 开了PKWARE软件公司，免费发行压缩程序代码，同时提供方便使用的图形界面版本。但是非常可悲的，由于格式开放，因此这个软件有个非常大的竞争 者，winzip。我想有些Win95时代的老用户还记得这个软件。PK在软件开发上很有天分，但是在市场策略上却不很成功。WinZip对ZIP格式的 熟悉其实比不上PK(那当然，人家是原作者)，然而WinZip却拥有很多用户友好的特性，右键菜单解压，虚拟解压(将压缩包的内容临时虚拟成一个目录， 用户可以无缝的使用，XP中集成了这个功能，但是WinZip的虚拟解压很容易撤销)。所以最终PK的软件公司破产了。他本人在2000年4月14日因饮 酒过度，在一家小旅馆内死去。
至于WinZip呢？碰到了一个更强大的对手，WinRar。功能类似，但更简洁，最主要是支持大多数流行的压缩格式。因此目前压缩软件领域还是WinRar占据着主流，市场就是这么残酷。
10.Phil Zimmermann
这个人基本没人知道，但是却是这张表里面最典型和突出的一个人。他是PGP的作者，具体可以看这里(&lt;a id=&#34;viz0&#34; title=&#34;http://en.wikipedia.org/wiki/Philip_Zimmermann&#34; href=&#34;http://en.wikipedia.org/wiki/Philip_Zimmermann&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Philip_Zimmermann&#34;&gt;http://en.wikipedia.org/wiki/Philip_Zimmermann&lt;/a&gt;&lt;/a&gt;)。他的成就很难用一句话说明，要阐明他的成就，就必须从美国的国家安全出口管制说起。
在上个世纪，美国政府有一种观点，他们需要能随时随地的窃听任何一个人和其他人的通讯。同时，作为延伸，他们制定了国家安全出口法案，将密码产品作为军用 管制品，限制出口。这其实是很荒谬和不合逻辑的，任何公开的算法都可以被多个人独立的实现。只要算法是公开的，即使产品不允许出口，国外也可以没有任何阻 碍的实现出来。而如果算法是不公开的，则会出现两个弊端。一个是阻碍密码学的交流和进步，更麻烦的是，根据密码学的内在逻辑，这样的系统，由于验证不完 全，因此比公开的系统更加不安全。
在1991年前后，PZ制作了PGP软件，用于保障当时备受争议的电子邮件的安全(小常识: 电子邮件默认是明文的，安全程度和你写在明信片背面寄给你父母的句子差不多)。这个软件使用了1980年以来提出的现代密码系统几大密码系统，实现了签名 安全和秘密安全。这里我们小小的讲解一下电子邮件的两大安全系统，对此无爱的人自行跳到下一段。签名安全就是指，你收到一个邮件的时候，能够确信，这个信 的内容是原始发件人的真实意思表示，而不是被篡改过的。秘密安全就是指，当你收到一个信的时候，你能够确信，除了你没有别人能够偷看到内容。对此，一般采 用公钥系统来实现两者的安全。所谓公钥系统是这样一种系统，用公钥加密必须用私钥解密，用私钥加密必须用公钥解密，私钥很容易计算出公钥，公钥非常难计算 出私钥。当你要签名安全的时候，将邮件内容用自己的私钥加密再发送一次(实际是将内容hash了再加密的)，接收者解密后对比。由于篡改者只有公钥，因此 虽然可以拦截和修改内容，但是无法伪造出一对匹配的内容，用公钥解密后刚好一致。而秘密安全则是用对方的公钥加密。对于更高层级的要求，你的公钥不仅要求 公布，而且必须在国家认可的部门公布，这样就由国家认定了你的公钥和你的身份的一致性。当你对一个内容签署的时候，只要能用公钥验证签名，就可以认定内容 是你的真实意思表述，并被法律所承认。
当时的PGP当然还没有这么复杂，但是对于当时缺乏任何安全性特征(当时连TLS都没有)的电子邮件来说，是非常必要的补充。可是我们上文说了，美国禁止 出口这些产品。于是，PZ免费的将软件的最初版本散发给同事和其他人使用，而这些人又可以免费的分发出去——这和自由模式非常的吻合，除了我找不到具体信 息标明当时PZ是否从授权上同意他们做这个事情。法律上说，PZ并没有“出口”密码产品，但是实际上，是他实现并且向全世界推广了高强度的电子邮件安全系 统。从某种意义上说，PZ可以说是叛国者。非法散布军用管制品，危害美国的国家安全(这还不像中国那种含糊不清的指控，这里的军用管制品定义是明确的，并 且是由国会制定的)。于是，PZ受到了三年的官司和五年的调查，直到96年的时候，克林顿签署了新的法案，放松了密码产品的出口限制。其实也没松多少，从 40位到56位——大概就是从5个字符到7个字符的区别。反之，我们改变观点，从世界的角度说，由于他的勇气和决心，我们每个人从中受益匪浅。
必须得说，其实这一改变很大程度上并不是PZ个人努力或者公民运动的结果，其中有巨大的商业力量。IBM，微软和Lotus之类的跨国软件巨头在出口产品 的时候，由于受到出口限制，因此在海外产品上的安全性一直很成问题。很多时候他们因为这个问题受到了巨大的挑战。在这一问题上，他们有足够的理由去游说白 宫，改变出口限制的要求。关于这个案件的其他资料，可以参考这里(&lt;a id=&#34;pend&#34; title=&#34;http://cyberlaw.stanford.edu/~prz/ZH/faq/index.html&#34; href=&#34;http://cyberlaw.stanford.edu/%7Eprz/ZH/faq/index.html&#34;&gt;&lt;a href=&#34;http://cyberlaw.stanford.edu/~prz/ZH/faq/index.html&#34;&gt;http://cyberlaw.stanford.edu/~prz/ZH/faq/index.html&lt;/a&gt;&lt;/a&gt;)和这里(&lt;a id=&#34;zt16&#34; title=&#34;http://www.techcn.com.cn/index.php?doc-view-130949&#34; href=&#34;http://www.techcn.com.cn/index.php?doc-view-130949&#34;&gt;&lt;a href=&#34;http://www.techcn.com.cn/index.php?doc-view-130949&#34;&gt;http://www.techcn.com.cn/index.php?doc-view-130949&lt;/a&gt;&lt;/a&gt;)。
在今日，PGP仍旧是一个非常强大的加密系统，并且是开源的——理所当然，如果不开源，我们会担心其中是否有漏洞和后门继续危害我们的安全。并且，从密码 学内在的逻辑来说，不公开的系统是不安全的。不过他仍旧受限于美国国家安全出口管制条例，原因是因为由于今日强大的计算能力，因此密钥通常的长度是 1024，2048，4096位长的——远远超过美国国家限制数十倍。因此这一软件的强密钥版本只有英文版，因为不用考虑出口。对于海外人士来说，我们更 推荐OpenPGP，同样是开源的，而且基于开源模式开发的GNU自由软件。能够充分保证你的信息安全。
11.Lawrence Edward Larry Page
哈，在所有人中，这个是最出名的。不过在这个列表中列出此人，并非因为Google的成功，而是因为其公司“不作恶”的信条。直到今日为止，Google还良好的保持着不作恶的信条。
结尾
我们遍数评论一个个的软件自由英雄的时候，才会发现，无论在哪里，通向真正自由的路都坎坷而血腥。RMS直到快50还一直单身，到处流浪。他没有自己的汽 车、电视和房产。PZ面临了政府的指控，三年的官司，五年的调查，以及叛国者的骂名。PK更是直接挂了。当然，其中也不乏成功者，Donald Knuth和Andrew.S.Tanenbaum的书都卖的不错。Linus Torvalds和Ian Murdock也算是软件白领，收入不菲。Larry Page更是名列世界级的富豪榜。然而我们必须知道两件事情，没有他们的存在，我们就没有安全的通讯，没有廉价而优质的软件。因此，照RMS的最大对手所说的，即使没有这些人，人类也应当把它们造出来。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>