<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Template on Shell&#39;s Home</title>
    <link>https://shell909090.org/tags/template/</link>
    <description>Recent content in Template on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Nov 2011 14:52:47 +0800</lastBuildDate>
    <atom:link href="https://shell909090.org/tags/template/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>几个模板系统的性能对比</title>
      <link>https://shell909090.org/blog/archives/1975/</link>
      <pubDate>Wed, 09 Nov 2011 14:52:47 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/1975/</guid>
      <description>&lt;p&gt;对比目标，jinja2，cheetah，mako，webpy，bottle，tornado，django的性能。 &lt;div&gt;    方法，随机生成一个二维数组，第一列是自增数据，第二列是长度为100的随机字符串，然后生成html，比较一次生成的时间。&lt;/div&gt;&lt;div&gt;    说明，如果模板有编译缓存，打开。有其他方法加速，打开。生成缓存，关闭。不计算随机数据生成时间，一次生成后一直使用。&lt;/div&gt;&lt;div&gt;    以下是文件有效内容，没用的都略去了。最后的顺序是因为我根据结果整理了一下调用次序。&lt;/div&gt;&lt;div&gt;&amp;mdash;&amp;ndash;testcheetah.tmpl&amp;mdash;&amp;ndash;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;&lt;div&gt;    &amp;lt;table&amp;gt;&lt;/div&gt; &lt;div&gt;      #for $i in $l&lt;/div&gt;&lt;div&gt;      &amp;lt;tr&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;    &lt;/span&gt;&amp;lt;td&amp;gt;$i[0]&amp;lt;/td&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;&amp;lt;td&amp;gt;$i[1]&amp;lt;/td&amp;gt;&lt;/div&gt; &lt;div&gt;      &amp;lt;/tr&amp;gt;&lt;/div&gt;&lt;div&gt;      #end for&lt;/div&gt;&lt;div&gt;    &amp;lt;/table&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&amp;mdash;&amp;ndash;testdjango.html&amp;mdash;&amp;ndash;&lt;/div&gt;&lt;div&gt;&lt;div&gt;    &amp;lt;table&amp;gt;&lt;/div&gt;&lt;div&gt;      {% for i in l %}&lt;/div&gt;&lt;div&gt;      &amp;lt;tr&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;&amp;lt;td&amp;gt;{{ i.0 }}&amp;lt;/td&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;&amp;lt;td&amp;gt;{{ i.1 }}&amp;lt;/td&amp;gt;&lt;/div&gt;&lt;div&gt;      &amp;lt;/tr&amp;gt;&lt;/div&gt; &lt;div&gt;      {% endfor %}&lt;/div&gt;&lt;div&gt;    &amp;lt;/table&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&amp;mdash;&amp;ndash;testjinja2.html&amp;mdash;&amp;ndash;&lt;/div&gt;&lt;div&gt;&lt;div&gt;    &amp;lt;table&amp;gt;&lt;/div&gt;&lt;div&gt;      {% for i in l %}&lt;/div&gt;&lt;div&gt;      &amp;lt;tr&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;&amp;lt;td&amp;gt;{{ i[0] }}&amp;lt;/td&amp;gt;&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;    &lt;/span&gt;&amp;lt;td&amp;gt;{{ i[1] }}&amp;lt;/td&amp;gt;&lt;/div&gt;&lt;div&gt;      &amp;lt;/tr&amp;gt;&lt;/div&gt;&lt;div&gt;      {% endfor %}&lt;/div&gt;&lt;div&gt;    &amp;lt;/table&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;-----testmako.html-----&lt;/div&gt; &lt;div&gt;&lt;div&gt;    &amp;lt;table&amp;gt;&lt;/div&gt;&lt;div&gt;      % for i in l:&lt;/div&gt;&lt;div&gt;      &amp;lt;tr&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;&amp;lt;td&amp;gt;${i[0]}&amp;lt;/td&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;&amp;lt;td&amp;gt;${i[1]}&amp;lt;/td&amp;gt;&lt;/div&gt;

&lt;div&gt;      &amp;lt;/tr&amp;gt;&lt;/div&gt;&lt;div&gt;      % endfor&lt;/div&gt;&lt;div&gt;    &amp;lt;/table&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;-----testwebpy.html-----&lt;/div&gt;&lt;div&gt;$def with(l)&lt;/div&gt;&lt;div&gt;&lt;div&gt;    &amp;lt;table&amp;gt;&lt;/div&gt;&lt;div&gt;      $for i in l:&lt;/div&gt;&lt;div&gt;      &amp;lt;tr&amp;gt;&lt;/div&gt;

&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;    &lt;/span&gt;&amp;lt;td&amp;gt;$i[0]&amp;lt;/td&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;&amp;lt;td&amp;gt;$i[1]&amp;lt;/td&amp;gt;&lt;/div&gt;&lt;div&gt;      &amp;lt;/tr&amp;gt;&lt;/div&gt; &lt;div&gt;    &amp;lt;/table&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;-----tmpl.py-----&lt;/div&gt;&lt;div&gt;&lt;div&gt;#!/usr/bin/python&lt;/div&gt;&lt;div&gt;# -*- coding: utf-8 -*-&lt;/div&gt;&lt;div&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/div&gt;&lt;div&gt;@date: 2011-11-03&lt;/div&gt;&lt;div&gt;@author: shell.xu&lt;/div&gt;&lt;div&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/div&gt;

&lt;div&gt;import os, random, string, timeit&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;testdata = []&lt;/div&gt;&lt;div&gt;def init_testdata():&lt;/div&gt;&lt;div&gt;    for i in xrange(1000):&lt;/div&gt;&lt;div&gt;        s = &amp;#39;&amp;#39;.join([random.choice(string.letters) for j in xrange(100)])&lt;/div&gt;

&lt;div&gt;        testdata.append((i, s))&lt;/div&gt;&lt;div&gt;init_testdata()&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# --------webpy--------&lt;/div&gt;&lt;div&gt;import web&lt;/div&gt;&lt;div&gt;render = web.template.render(&amp;#39;./&amp;#39;)&lt;/div&gt;&lt;div&gt;def render_webpy():&lt;/div&gt;

&lt;div&gt;    return render.testwebpy(testdata)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# --------jinja2--------&lt;/div&gt;&lt;div&gt;from jinja2 import Environment, FileSystemLoader, FileSystemBytecodeCache&lt;/div&gt;&lt;div&gt;env = Environment(loader = FileSystemLoader(&amp;#39;./&amp;#39;),&lt;/div&gt;

&lt;div&gt;                  bytecode_cache = FileSystemBytecodeCache(&amp;#39;./&amp;#39;, &amp;#39;%s.cache&amp;#39;))&lt;/div&gt;&lt;div&gt;tmpl_jinja = env.get_template(&amp;#39;testjinja2.html&amp;#39;)&lt;/div&gt;&lt;div&gt;def render_jinja2():&lt;/div&gt;&lt;div&gt;    return tmpl_jinja.render(l = testdata)&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# --------cheetah--------&lt;/div&gt;&lt;div&gt;from testcheetah import testcheetah&lt;/div&gt;&lt;div&gt;def render_cheetah():&lt;/div&gt;&lt;div&gt;    return testcheetah(searchList = [{&amp;#39;l&amp;#39;: testdata},])&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;



# --------mako--------&lt;/div&gt;&lt;div&gt;from mako.template import Template as makotmpl&lt;/div&gt;&lt;div&gt;tmpl_mako = makotmpl(filename = &amp;#39;./testmako.html&amp;#39;)&lt;/div&gt;&lt;div&gt;def render_mako():&lt;/div&gt;&lt;div&gt;    return tmpl_mako.render(l = testdata)&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# --------django--------&lt;/div&gt;&lt;div&gt;from django.template import Template as djangotmpl&lt;/div&gt;&lt;div&gt;from django.template import Context&lt;/div&gt;&lt;div&gt;from django.conf import settings&lt;/div&gt;&lt;div&gt;settings.configure()&lt;/div&gt;

&lt;div&gt;with open(&amp;#39;testdjango.html&amp;#39;, &amp;#39;r&amp;#39;) as fi: tmpl_django = djangotmpl(fi.read())&lt;/div&gt;&lt;div&gt;def render_django():&lt;/div&gt;&lt;div&gt;    return tmpl_django.render(Context({&amp;#39;l&amp;#39;: testdata}))&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;

&lt;p&gt;&lt;div&gt;&lt;div&gt;# &amp;mdash;&amp;mdash;&amp;ndash;bottle&amp;mdash;&amp;mdash;&amp;ndash;&lt;/div&gt;&lt;div&gt;from bottle import SimpleTemplate&lt;/div&gt;&lt;div&gt;with open(&amp;#39;testbottle.html&amp;#39;, &amp;#39;r&amp;#39;) as fi: tmpl_bottle = SimpleTemplate(fi.read())&lt;/div&gt;&lt;div&gt;def render_bottle():&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;    return tmpl_bottle.render(l = testdata)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;# &amp;mdash;&amp;mdash;&amp;ndash;tornado&amp;mdash;&amp;mdash;&amp;ndash;&lt;/div&gt;&lt;div&gt;from tornado import template as tornado_tmpl&lt;/div&gt;&lt;div&gt;with open(&amp;#39;testtornado.html&amp;#39;, &amp;#39;r&amp;#39;) as fi: tmpl_tornado = tornado_tmpl.Template(fi.read())&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;def render_tornado():&lt;/div&gt;&lt;div&gt;    return tmpl_tornado.generate(l = testdata)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt; &lt;div&gt;def testfunc(funcname, times = 10000):&lt;/div&gt;&lt;div&gt;    from timeit import Timer&lt;/div&gt;&lt;div&gt;    t = Timer(&amp;quot;%s()&amp;quot; % funcname, &amp;quot;from &lt;strong&gt;main&lt;/strong&gt; import *&amp;quot;)&lt;/div&gt;&lt;div&gt;    print &amp;#39;funcname: %s used %f&amp;#39; % (funcname, t.timeit(times) / times)&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;if __name__ == &amp;#39;__main__&amp;#39;:&lt;/div&gt;&lt;div&gt;    testfunc(&amp;#39;render_django&amp;#39;, times = 1000)&lt;/div&gt;&lt;div&gt;    testfunc(&amp;#39;render_webpy&amp;#39;, times = 1000)&lt;/div&gt;&lt;div&gt;    testfunc(&amp;#39;render_bottle&amp;#39;, times = 10000)&lt;/div&gt;

&lt;p&gt;&lt;div&gt;&lt;div&gt;    testfunc(&amp;#39;render_tornado&amp;#39;, times = 10000)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;    testfunc(&amp;#39;render_jinja2&amp;#39;, times = 10000)&lt;/div&gt; &lt;div&gt;    testfunc(&amp;#39;render_mako&amp;#39;, times = 10000)&lt;/div&gt;&lt;div&gt;    testfunc(&amp;#39;render_cheetah&amp;#39;, times = 100000)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;    以下是运行结果。&lt;/div&gt;&lt;div&gt;&lt;div&gt;funcname: render_django used 0.071762&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;funcname: render_webpy used 0.015729&lt;/div&gt;&lt;div&gt;funcname: render_bottle used 0.008752&lt;/div&gt;&lt;div&gt;funcname: render_tornado used 0.005675&lt;/div&gt;&lt;div&gt;funcname: render_jinja2 used 0.002073&lt;/div&gt;&lt;div&gt;funcname: render_mako used 0.001627&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;funcname: render_cheetah used 0.000014&lt;/div&gt;&lt;/div&gt;&lt;div&gt;    点评一下吧。django就是个渣，不多废话了。webpy的代码很简洁，可惜速度太慢了。bottle看起来快一点，不过也没有多出彩。tornado本身速度很快，不过模板——也就是如此吧。真的值得一用的，只有jinja2，mako，cheetah三个。速度都小于了5ms，单核每秒可以生成200个页面，16核机器上大概就能跑到3000req/s，性能比较高。jinja2的速度比较折衷，配置灵活，语法类似django是他的优点。而且不得不说，jinja2的文档真的很不错。mako的速度比jinja2略快，模板写起来也很舒服。文档略凌乱，可以接受。cheetah的速度——已经不像是模板了好吧。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;    这个东西是使用编译器将模板编译为py文件，然后再通过python编译为pyc，从而获得如此高的性能的。如果python可以执行加速（例如psyco, pypy什么的），相信速度还要快。但是不得不说，语法实在是太严格了一点。我在for前面多了一个空格，居然直接报错，而且还是一个无关错误。找起问题来相当困难。不过，对于习惯了python格式的格式控来说，cheetah还是有相当价值的。cheetah加速后的速度，单核上每秒可以生成7W多个页面，16核的普通服务器，每秒可以承载100W req/s。看在效率的份上，我可以原谅他大多数的问题。&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>