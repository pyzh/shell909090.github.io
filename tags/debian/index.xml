<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debian on Shell&#39;s Home</title>
    <link>https://shell909090.github.io/tags/debian/</link>
    <description>Recent content in Debian on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Jan 2013 16:57:03 +0800</lastBuildDate>
    <atom:link href="https://shell909090.github.io/tags/debian/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>修正问题，让debian testing使用lxc</title>
      <link>https://shell909090.github.io/blog/archives/2329/</link>
      <pubDate>Wed, 23 Jan 2013 16:57:03 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2329/</guid>
      <description>&lt;p&gt;目前debian testing里面的lxc是无法运作的。原因是live-debconfig这个包只在sid中存在，而lxc是借助这个包来做系统初始化设定的。没有设定就结束初始化会挂掉系统。&lt;/p&gt;

&lt;p&gt;解决方法如下：&lt;/p&gt;

&lt;p&gt;dget -x &lt;a href=&#34;http://ftp.de.debian.org/debian/pool/main/l/lxc/lxc_0.9.0~alpha2-4.dsc&#34;&gt;http://ftp.de.debian.org/debian/pool/main/l/lxc/lxc_0.9.0~alpha2-4.dsc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可能因为没有key而无法解压，用dpkg-source -x解压开内容即可。&lt;/p&gt;

&lt;p&gt;aptitude install autotools-dev docbook2x libapparmor-dev libcap-dev linux-libc-dev&lt;/p&gt;

&lt;p&gt;然后进入目录，dpkg-buildpackage -rfakeroot -d进行编译。&lt;/p&gt;

&lt;p&gt;退出目录，dpkg -i lxc&amp;hellip;进行安装。&lt;/p&gt;

&lt;p&gt;到/usr/share/lxc/packages/，wget &lt;a href=&#34;http://ftp.cn.debian.org/debian/pool/main/l/live-debconfig/live-debconfig_4.0~a15-1_all.deb。&#34;&gt;http://ftp.cn.debian.org/debian/pool/main/l/live-debconfig/live-debconfig_4.0~a15-1_all.deb。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后再执行常规操作。
lxc-create -n vm0 -t debian&lt;/p&gt;

&lt;p&gt;lxc-start -n vm0&lt;/p&gt;

&lt;p&gt;启动正常了。&lt;/p&gt;

&lt;p&gt;在debian wheezy 3.2.0-4-686-pae下测试通过。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>选择哪个linux发行</title>
      <link>https://shell909090.github.io/blog/archives/2242/</link>
      <pubDate>Thu, 27 Sep 2012 14:07:46 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2242/</guid>
      <description>&lt;h1&gt;选择哪个linux发行&lt;/h1&gt;

&lt;p&gt;很多人问我，哪个linux发行版更好。这不是个伪命题，而是个蠢命题。哪个发行版更好取决于你要做什么。我们首先把linux发行版分为四大类，deb家族，rpm家族，源码家族，其他。&lt;/p&gt;

&lt;h1&gt;假如你要稳定部署&lt;/h1&gt;

&lt;p&gt;所谓稳定部署，就是你没什么机会对系统升级打补丁。听上去很傻X，系统不打补丁？实际上这样的系统非常多。大型跨国公司的ERP，托管在企业封闭机房内的核心业务系统。这些系统的升级成本是非常惊人的，一次升级动辄数天策划，弄一套备用系统来放着，然后再顶着XX的损失停机几个小时。&lt;/p&gt;

&lt;p&gt;这种级别的系统，建议你直接上RHEL。不要怕花钱，出问题的损失远远比RHEL的服务费高的多。&lt;/p&gt;

&lt;h1&gt;假如你要持续更新&lt;/h1&gt;

&lt;p&gt;对于持续更新的系统，你可以选择debian/ubuntu。这两个系统都具有很强的滚动更新能力。虽然RH系统可以通过yum进行升级，然而RH的追求稳定策略，使得仓库的升级频率要比deb系小的多。&lt;/p&gt;

&lt;p&gt;deb的系统有非常简单的配置和升级方案，而且大多保持稳定。ubuntu的策略比debian激进很多，所以软件有更多的新特性——当然，也有更多的死机。&lt;/p&gt;

&lt;h1&gt;假如你要高度定制&lt;/h1&gt;

&lt;p&gt;高度定制的系统只有使用源码安装，任何发行版都不会帮你把每个开关组合全部编译一遍。&lt;/p&gt;

&lt;p&gt;源码家族中最出名的两个是gentoo和lfs，不过除非你的蛋在燃烧，否则一般是不会用lfs作为自己的应用系统的。大多是使用gentoo来做支持。&lt;/p&gt;

&lt;h1&gt;假如你只是自己想用用&lt;/h1&gt;

&lt;h2&gt;你是一个彻底的新手&lt;/h2&gt;

&lt;p&gt;我建议你从debian家族的knoppix开始，或者ubuntu livecd也不错。这两个都是livecd系列，就是可以直接从光盘启动系统并使用，不需要在硬盘上安装，也不需要虚拟机。相反，他们自带虚拟机，可以虚拟一个windows出来供你偶尔用一下。&lt;/p&gt;

&lt;h2&gt;你是一个有过一定经验的人&lt;/h2&gt;

&lt;p&gt;那你熟悉什么就用什么。&lt;/p&gt;

&lt;p&gt;不过作为一般性使用，我推荐ubuntu。他们针对桌面用户做了很多定制，打造了一个非常不错的环境。在我所知的发行版中，ubuntu的桌面用户是最多的，针对新手的答疑也是最友善的。&lt;/p&gt;

&lt;p&gt;当然，文档最好的还是gentoo。&lt;/p&gt;

&lt;h2&gt;你是一个专家&lt;/h2&gt;

&lt;p&gt;很感谢你看完这篇文章，你太无聊了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>debian wheezy下以uwsgi安装graphite</title>
      <link>https://shell909090.github.io/blog/archives/2200/</link>
      <pubDate>Mon, 09 Jul 2012 08:45:28 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2200/</guid>
      <description>&lt;div&gt;# abstract #&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;graphite是一个python写的性能监控系统。这个系统是由多个分离的部分组成的。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;* graphite-web: 由django写的web界面系统。&lt;/div&gt;&lt;div&gt;* carbon: 数据收集的守护进程。&lt;/div&gt;&lt;div&gt;* whisper: 一种python写的数据库，类似rrd，便于大量的性能日志数据收集和处理。上两个组件会调用这个库。&lt;/div&gt;

&lt;div&gt;* collectd: 数据收集守护进程，向carbon中喂数据的数据源。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;另外，有一点黑色幽默的就是，graphite的意思是石墨，是炭(carbon)的一种同素异形体。因此在graphite项目中，多次出现carbon这个名字。当然，另两个同素异形体是钻石(diamond)和足球烯(footballene)，你就暂时别指望看到他们的身影了。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;

&lt;div&gt;另一个用python写的，以元素命名的著名软件是mercurial。化学元素中的汞，俗称水银，符号hg。因此mercurial的命令行简写才是hg。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;以上几个的结构大概是这样的：&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;collectd(source) -network-&amp;gt; carbon -writing-&amp;gt; whisper database -reading-&amp;gt; graphite-web&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;下文描述了在debian wheezy下，以nginx+uwsgi模式安装graphite的过程。之所以用这个模式，是因为我的大部分系统都是python写的，同样安装在uwsgi下面。一事不烦二主。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# carbon #&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;carbon有对应的debian包，可以很简单的安装。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;

&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;    &lt;/span&gt;sudo aptitude install graphite-carbon&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;默认的数据端口是2003，默认的数据路径是/var/lib/graphite/，这个在下文需要用到。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# graphite #&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;## virtual ##&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;graphite有部分需要安装到系统中，因此最好用virtualenv进行安装。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;    &lt;/span&gt;cd /var/web/&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;sudo aptitude install python-virtualenv&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;virtualenv --system-site-packages graphite&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;我假定你的安装路径是/var/web/graphite，这个在下面要反复用到。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;## install ##&lt;/div&gt;&lt;div&gt;

&lt;br /&gt;&lt;/div&gt;&lt;div&gt;在安装路径下，执行以下内容&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;source bin/activite&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;pip install graphite-web --install-option=&amp;quot;--prefix=/var/web/graphite&amp;quot; --install-option=&amp;quot;--install-lib=/var/web/graphite/webapp&amp;quot;&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;注意，/var/web/graphite需要根据上面的设定自行修改，webapp是你的django基础路径。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;## configure ##&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;在/var/web/graphite/webapp/graphite下面，执行以下内容&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;cp local_settings.py.example local_settings.py&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;然后编辑local_settings.py&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;    &lt;/span&gt;GRAPHITE_ROOT = &amp;#39;/var/web/graphite&amp;#39;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;WHISPER_DIR = &amp;#39;/var/lib/graphite/whisper&amp;#39;&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;DATABASES = ...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;注意databases，不要在settings.py里面修改，要改这里的才有效。我用的是sqlite，如果你高兴，可以改为postgres/mysql。WHISPER_DIR是上文carbon中设定的目录。&lt;/div&gt;&lt;div&gt;

&lt;br /&gt;&lt;/div&gt;&lt;div&gt;最后，执行以下指令，完成数据库初始化。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;   &lt;/span&gt;python manage.py syncdb&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;## uwsgi ##&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;编辑/etc/uwsgi/apps-enabled/graphite.ini，包含以下内容。&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;[uwsgi]&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;plugins         = python&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;workers         = 1&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;chdir           = /var/web/graphite/webapp&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;   &lt;/span&gt;pythonpath      = /var/web/graphite&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;env             = DJANGO_SETTINGS_MODULE=graphite.settings&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;   &lt;/span&gt;module          = django.core.handlers.wsgi:WSGIHandler()&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;注意，这里的chdir，是你的webapp基础路径。而pythonpath则是virtualenv的路径。两者在上文都有说明的。env里面那个graphite是webapp/graphite这个app(不详细说明，自己学一下django就懂了)。module是django的固定写法。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;## nginx ##&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt; &lt;div&gt; 最后，在nginx中包含以下内容，将部分url转发到uwsgi上。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;location ~ ^/(graphite|content|metrics|dashboard|render|browser|composer)/ {&lt;/div&gt;&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;include        uwsgi_params;&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;      &lt;/span&gt;uwsgi_param    UWSGI_SCHEME $scheme;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;     &lt;/span&gt;uwsgi_pass     unix:/run/uwsgi/app/graphite/socket;&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# collectd #&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;## install ##&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;collectd的安装很简答，有包，直接安装就好。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;   &lt;/span&gt;sudo aptitude install collectd&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;## configure ##&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;在/etc/collectd/这个路径，能够看到collectd.conf这个文件。反注释掉以下内容：&lt;/div&gt;&lt;div&gt; &lt;br /&gt; &lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;&amp;lt;LoadPlugin python&amp;gt;&lt;/div&gt;&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;    &lt;/span&gt;Globals true&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;&amp;lt;/LoadPlugin&amp;gt;&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;然后，再编辑以下内容。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;&amp;lt;Plugin python&amp;gt;&lt;/div&gt;&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;    &lt;/span&gt;ModulePath &amp;quot;/etc/collectd/carbon&amp;quot;&lt;/div&gt;

&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;Import “carbon_writer”&lt;/div&gt;&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;   &lt;/span&gt;&amp;lt;Module “carbon_writer”&amp;gt;&lt;/div&gt;&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;       &lt;/span&gt;LineReceiverHost “localhost″&lt;/div&gt;

&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;      &lt;/span&gt;LineReceiverPort 2003&lt;/div&gt;&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;        &lt;/span&gt;DifferentiateCountersOverTime true&lt;/div&gt;&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;       &lt;/span&gt;LowercaseMetricNames true&lt;/div&gt;

&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;      &lt;/span&gt;TypesDB &amp;quot;/usr/share/collectd/types.db&amp;quot;&lt;/div&gt;&lt;div&gt;    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;&amp;lt;/Module&amp;gt;&lt;/div&gt;&lt;div&gt;

    &amp;lt;/Plugin&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;上文中假定你把python插件放在了/etc/collectd/carbon下面，所以下文需要按照这个路径安装carbon。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;## collectd-carbon ##&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;在/etc/collectd下面，执行&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt; &lt;div&gt; &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;    &lt;/span&gt;sudo git clone &lt;a href=&#34;https://github.com/indygreg/collectd-carbon.git&#34;&gt;https://github.com/indygreg/collectd-carbon.git&lt;/a&gt; carbon&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;注意，sudo其实是不安全的。不过目前就这样吧，问题不明显。&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;## restart whole system ##&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;执行以下指令重启服务&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;sudo /etc/init.d/nginx restart&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;   &lt;/span&gt;sudo /etc/init.d/uwsgi restart&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;sudo /etc/init.d/carbon-cache restart&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;    &lt;/span&gt;sudo /etc/init.d/collectd restart&lt;/div&gt;&lt;div&gt;&lt;br /&gt;

&lt;/div&gt;&lt;div&gt;完成这步后，可以在/var/log/syslog中看到collectd的输出，数据确实的被灌入了carbon。而/var/log/uwsgi/app/graphite.log中可以看到uwsgi的输出。如果一切正常的话，你可以去[&lt;a href=&#34;http://localhost/graphite/%5D%28http://localhost/graphite/)%E4%B8%8B%E9%9D%A2%E7%9C%8B%E4%BD%A0%E8%A6%81%E7%9A%84%E4%B8%9C%E8%A5%BF%E4%BA%86&#34;&gt;http://localhost/graphite/](http://localhost/graphite/)下面看你要的东西了&lt;/a&gt;。&lt;/div&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# 评价 #&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;数据收集的挺完整的。既然是基于collectd，那么应当没什么问题的，openwrt也可以支持的。问题是拿到数据后展现的一方面。由于默认配置太差，因此需要很长时间调教。我没那个功夫，搞定测试后就直接删除了。&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>首次bsp日记</title>
      <link>https://shell909090.github.io/blog/archives/2158/</link>
      <pubDate>Wed, 02 May 2012 03:09:03 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2158/</guid>
      <description>&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;第一次参加BSP，还不错拉。因为以前没参加过，所以等搞明白了这个是干吗的再和大家说。&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;   &lt;/span&gt;BSP是bug squeeze party的简称，简单来说就是修错会。debian马上要发行7了，在此之前有很多的bug没有修复。其中有一种是RC bug，即运行就会出大问题的bug，或者干脆没法编译。无论哪个，都会导致这个包不能进入最新的发布。有些bug很麻烦，需要maintainer和author沟通，这个没有办法。但是有些问题解决起来很简单，只是因为后果很严重，作者又暂时没空处理，导致包无法进入stable，实在很无谓。BSP的目的，主要是以非维护者上传(non-maintainer upload)的方式修复这类bug。因为包不是自己的，所以礼貌上，只修复半个月以上的rc级别bug，其他的留给maintainer来处理。&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;BSP的主要目的，就是这么一个苦力会。没有挂名，最多只有一条changelog记录，还要大量寻找和修复bug。不过BSP相当重要，因为很多maintainer往往有一段一段的不活跃时间。这时候即使再简单的问题也不会处理。按照debian的规则，别人也不会帮他处理。除了BSP，很少有一批人会专门找这种简单的Bug来修正。如果没有BSP，debian stable发布的时候一做RC冻结，就要少掉很多有用的包。BSP更大的目的是，交流和传授debian打包和除错的经验，唤起人们的关注。也许在会后，如果有人看到一些简单bug，会使用nmu的方法给与修正。不过BSP到确实是有一个额外加成的好处——基本变成了签名会。昨天估计是中国大陆地区首次DD数量接近其他人数量，我一下弄到了5个签名，2个DD一个Ubuntu员工。加上原来就有的zigo签名，我就有3个DD签名了。&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;本地BSP是在thomas的公司举行，欧特家博士匹萨厂商赞助了我们两天的午餐——微波食品匹萨。第一天来的人比较多，很多都是纯新手，大概有20多人。Zigo倒是在网络上说会帮助新手，但是纯新手看到debian打包系统根本无从下手，所谓指导什么的也无从说起。很多人一天一个bug都修不掉，甚至都看不懂，很有挫折感，估计有不少有热情的人在第二天就这么默默退散了，第二天只来了15个左右。&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;我主要是以修复自己的问题为主，python-snappy和python-formalchemy都升级到了最高级，并且修复了自己以前打包的一个问题。至于RC bug么，我修了一个。两个包在python中命名冲突了，所以在debian中需要声明为conflicts。另外我评审了一下，最终还是决定关闭了python-libmemcached的ITP。虽然对douban很不好意思，还让他们修了一下。但是python-libmemcached依赖于libmemcached，而后者已经逐步升级到了1.0.X版本，但是douban为了稳定使用，是sticky在0.4版上的。因此当更新的debian发行时，实际上python-libmemcached和系统中的libmemcached不是一回事。因此，我不能依赖libmemcached的维护者，而是需要自己去维护后者——没办法，我就是怂了。python-libmemcached的爱用者，还是自己打包吧。我倒是可以公开打包文档。&lt;/div&gt;

&lt;div&gt;&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;  &lt;/span&gt;另外，我在想是否要集合一批python/debian的用户，来做投票。例如，python的一个容器——flup，在debian中实际上已经orphon了。如果有足够的人投票，我愿意为flup做接手维护工作。不过目前debian下问下来的结果，大家对flup没什么太大兴趣。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>vps上应当装什么</title>
      <link>https://shell909090.github.io/blog/archives/2144/</link>
      <pubDate>Tue, 17 Apr 2012 07:00:21 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2144/</guid>
      <description>&lt;div&gt;&lt;div&gt;    假定你有一台debian vps，上面需要装一些东西来——你懂。你应该装一些什么呢？&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# 基础部分 #&lt;/div&gt;&lt;div&gt;## ssh ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;  &lt;/span&gt;没啥好多说，没有ssh，你甚至无法管理机器。不过注意，安全的ssh方式应当只允许使用key登录，禁止一切密码登录。而且对于没必要登录的某些用户，需要在/etc/passwd中将shell改为/bin/false。至于端口改不改，这个不重要，看你心情。&lt;/div&gt;

&lt;p&gt;&lt;div&gt;## vim ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;debian默认装的是vim-tiny，很不好用。建议改为vim，改配置的时候让自己舒服点。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;## 安全部分 ##&lt;/div&gt;&lt;div&gt;## iptables-persistent ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;这是debian内用于iptables规则持久化的工具，你可以编辑/etc/iptables/rules.v4来修改防火墙规则。注意，目前debian stable(squeeze)中的版本还没有4/6区分，你可以弄一个testing(wheezy)中的来装。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;一般来说，你的规则中至少要包含以下内容：&lt;/div&gt;&lt;div&gt;`&lt;/div&gt;&lt;div&gt;-A INPUT -m state &amp;ndash;state RELATED,ESTABLISHED -j ACCEPT&lt;/div&gt;&lt;div&gt;-A INPUT -i lo -j ACCEPT&lt;/div&gt;&lt;div&gt;-A INPUT -i tun+ -j ACCEPT&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;-A INPUT -i ppp+ -j ACCEPT&lt;/div&gt;&lt;div&gt;-A INPUT -p tcp -m multiport &amp;ndash;dport 22,xxx,xxx,xxx -j ACCEPT&lt;/div&gt;&lt;div&gt;-A INPUT -p udp -m multiport &amp;ndash;dport xxx,xxx,xxx -j ACCEPT&lt;/div&gt;&lt;div&gt;`&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;而且强烈建议，先保存一个没问题的iptables，然后直接修改iptables，再保存。这样的好处是，当你脑残改错了导致你自己都无法管理的时候，只要重启就可以恢复vps工作，而不用更麻烦的动作。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;## denyhosts ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;这是ssh的连接防御进程，用python编写。如果有人试图尝试你的ssh密码，这个程序就会踢掉他的ip。&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;如果你已经用了我说的，通过key的连接方式，你可以一次就直接踢掉对方ip。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# 管理部分 #&lt;/div&gt;&lt;div&gt;## ifstat ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;    &lt;/span&gt;ifstat是用于网络流量管理的工具，可以告诉你网络目标的流量是多少。&lt;/div&gt;&lt;div&gt;## dnsutils ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;dnsutils里面包含了不少用于管理dns的工具，包括我们常用的nslookup，还有相对少用的dig。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;## mtr-tiny ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;  &lt;/span&gt;mtr是一个traceroute工具，比后者好用很多。这个工具可以快速跟踪路由。&lt;/div&gt;&lt;div&gt;## vnstat ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;    &lt;/span&gt;vnstat是用于跟踪网卡流量的工具，尤其对于每个月都有限额的vps，这个工具更有意义。&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;    &lt;/span&gt;注意安装完成后需要初始化每个网卡，然后重启服务，而不是马上能够工作。&lt;/div&gt; &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;# 网络部分 #&lt;/div&gt;&lt;div&gt;## pptp ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;pptp是一个经典的vpn服务，直接安装pptpd就好。注意，部分手机不支持128bit的mppe，关闭后可以连接。但是windows只支持128bit的mppe，关掉就无法连接。So，自己权衡。&lt;/div&gt; &lt;div&gt;## openvpn ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;    &lt;/span&gt;openpn是一个非常稳定而强大的vpn程序，他使用udp作为连接协议。其实openvpn有tcp协议模式，但是速度比udp慢很多。&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;openvpn的配置很长，我也写过，就不赘述了，可以参考这三篇文章([1.搭建家用的OpenVPN服务器](&lt;a href=&#34;http://shell909090.org/blog/2009/09/%E6%90%AD%E5%BB%BA%E5%AE%B6%E7%94%A8%E7%9A%84openvpn%E6%9C%8D%E5%8A%A1%E5%99%A8/&#34; target=&#34;_blank&#34;&gt;http://shell909090.org/blog/2009/09/%E6%90%AD%E5%BB%BA%E5%AE%B6%E7%94%A8%E7%9A%84openvpn%E6%9C%8D%E5%8A%A1%E5%99%A8/&lt;/a&gt;), [2.说说x509证书链](&lt;a href=&#34;http://shell909090.org/blog/2011/04/%E8%AF%B4%E8%AF%B4x509%E8%AF%81%E4%B9%A6%E9%93%BE/&#34; target=&#34;_blank&#34;&gt;http://shell909090.org/blog/2011/04/%E8%AF%B4%E8%AF%B4x509%E8%AF%81%E4%B9%A6%E9%93%BE/&lt;/a&gt;), [3.再论openvpn的搭建](&lt;a href=&#34;http://shell909090.org/blog/2011/05/%E5%86%8D%E8%AE%BAopenvpn%E7%9A%84%E6%90%AD%E5%BB%BA/)&#34; target=&#34;_blank&#34;&gt;http://shell909090.org/blog/2011/05/%E5%86%8D%E8%AE%BAopenvpn%E7%9A%84%E6%90%AD%E5%BB%BA/)&lt;/a&gt;)。&lt;/div&gt;

&lt;p&gt;&lt;div&gt;## l2tp ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;  &lt;/span&gt;l2tp的配置比openvpn更加繁琐，我配置过多次，始终在部分的设备上可以访问，部分不可以。因此等全部搞定后，会专门写一篇确认一下。&lt;/div&gt;&lt;div&gt;## iodine ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;iodine是一个dns vpn。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;## ssh ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;ssh用于翻墙常见两种模式，固定端口转发和动态端口转发。前者使用-R将远程的某个端口映射到本地。通常而言，映射的都是squid或者polipo(推荐后者，内存消耗更小，更好配置)。这样相当于在本地可以访问远程的代理，从而达到翻墙的效果。这个的命令行是ssh -L port:localhost:port &amp;hellip;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;而动态端口转发则是使用ssh -D port &amp;hellip;，将本地的port端口变成一个支持socks5协议的代理服务器。&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;相比而言，-D模式更加灵活，提供了全协议的访问，本地可以通过polipo转换为http代理。而-L模式则不能提供socks5代理功能(除非远程的端口上是socks5代理服务，但是这样就回到了-D模式，反而多开了一个服务)。但是有些时候(例如android的ssh翻墙软件)只支持后者的模式。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;另外，不要用日常管理帐号翻墙。新开一个翻墙帐号，并且设定独立的key。然后禁用shell，在ssh的时候，使用参数-CNq，这个参数可以不打开shell。如果网络不稳定，可以加上-o ServerAliveInterval 30。&lt;/div&gt;&lt;div&gt;## stunnel ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;    &lt;/span&gt;stunnel本身没有任何功效，他只是将你的普通连接转换为ssl连接而已。当这个程序搭配其他程序，例如polipo，就可以实现一个ssl级别的代理。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;## httptunnel ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;    &lt;/span&gt;这是一个服务软件，服务器端运行一个httptunnel，客户端运行一个。而后客户端就可以获得一个到服务器端的tcp连接，不受限的。&lt;/div&gt;&lt;div&gt;## polipo ##&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;polipo常见有两种模式，端口转发模式和ssl模式。两者都在前文有说。端口转发模式配合ssh用，ssl模式配合stunnel用。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;  &lt;/span&gt;以上的服务看似很多，实际上，在128M内存的实例上完全可以运行其中大部分的服务。你可以在一台服务器上运行其中多个，以保证全天候的服务。&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mirrors.geekbone.org软件仓库镜像站将于4月中旬下线</title>
      <link>https://shell909090.github.io/blog/archives/2140/</link>
      <pubDate>Fri, 13 Apr 2012 01:38:56 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2140/</guid>
      <description>&lt;div&gt;    原文[在此](&lt;a href=&#34;http://www.shlug.org/?p=1515)%E3%80%82&#34; target=&#34;_blank&#34;&gt;http://www.shlug.org/?p=1515)。&lt;/a&gt;我用了5年多的cn99和geekbone两大镜像终于全部下线。&lt;/div&gt;&lt;div&gt;    需要通告的一点关键问题即是, 由于tux下线早于新一个版本的debian发行, 因此目前&lt;a href=&#34;http://mirrors.geekbone.org&#34;&gt;mirrors.geekbone.org&lt;/a&gt;还是已经发行的debian安装盘的官方源之一. 请大家在安装debian6的时候不要再选择geekbone, 并请通告其他debian用户.&lt;/div&gt;

&lt;div&gt;    在09年加入shlug之初，就知道当年用了很久的geekbone服务器是shlug管理维护的。当时就很惊讶，以捐助方式运作一台镜像服务器，这个是相当不容易的。包括募集，管理，账目，在中国要做整套过程需要相当心力。而且geekbone还是在debian有注册的镜像站之一。可以看[Debian 全球鏡像站](&lt;a href=&#34;http://www.debian.org/mirror/list&#34; target=&#34;_blank&#34;&gt;http://www.debian.org/mirror/list&lt;/a&gt;)。&lt;/div&gt;

&lt;p&gt;&lt;div&gt;    大约在11年，中科大的ustc服务器上线后。在一次和lightning的闲聊中，lightning就谈到了tux服务器的问题。当时tux的服务器硬盘已经不足，最多在数月后就会满额。lightning删除了部分上面的无用数据，让服务器可以稍稍多工作一些时日。我当时就建议不要全面镜像所有的debian镜像，毕竟当时中国已经有anheng和ustc两个全面源，其中ustc还在申请大陆一级源(他们的资源投入确实不错，镜像速度相当快)。tux毕竟是老服务器，可以转做i386和amd64两个主要镜像。国内大部分人用的都是这两个arch，sohu的部分镜像也是针对这部分的。lightning表示看看再说。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;    今天，看到了shlug通告，tux服务器准备下线。想想也的却是，tux已经在超期服役，而国内已经有了ustc, anheng, sohu, bjtu四个镜像. 再进行一次募捐让tux恢复服役看来是没什么必要了.&lt;/div&gt;&lt;div&gt;    在此, 感谢一下shlug服务器维护团队, 谢谢你们的努力让我五年来得以享用快速的源服务. 祝tux一路走好, 愿电脑诸神与它同在, enter.&lt;/div&gt;&lt;div&gt;    另外, 提一点我们和欧美的工业水准差距. 我曾经撰文说过, 中国要追赶美国还有很长的路要走. 当时列举的证据就是dd和debian mirror lists. 当时我们也是4个源, 目前加入了bjtu, tux退出, 还是4个源. 相比美国那个深不见底, 鼠标滚轮滚好几下都没看到头的列表, 实在是太差距了. 这个差距不仅体现在源少, 更体现在用户少. 用户少就是源少的原因. 如果用户增长一个数量级, 目前这些源肯定会发生不足, 然后吵着让各个大学再开一两个镜像出来. 我倒是觉得这样不错, 至少sjtu有机会露个脸. 其实sjtu也是有自己的&lt;a href=&#34;a href=&amp;quot;http://ftp.sjtu.edu.cn/debian/&#34;&gt;源&lt;/a&gt;%E7%9A%84&amp;rdquo; target=&amp;rdquo;_blank&amp;rdquo;&amp;gt;&lt;a href=&#34;http://ftp.sjtu.edu.cn/debian/)的&#34;&gt;http://ftp.sjtu.edu.cn/debian/)的&lt;/a&gt;&lt;/a&gt;, 只是没有对普通网络用户开放, 访问速度缓慢而已.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>empathy的无聊问题——记一次排错</title>
      <link>https://shell909090.github.io/blog/archives/2132/</link>
      <pubDate>Mon, 09 Apr 2012 03:55:40 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2132/</guid>
      <description>&lt;p&gt;废话不说，debian testing，装了empathy后没法用account，等于废物。 &lt;div&gt;    先看bug report，开reportbug，看empathy的bug，有一个“Accounts window does not open”，估计就是我要的。&lt;/div&gt;&lt;div&gt;    在浏览器中打开，&lt;a href=&#34;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=594945&amp;amp;archived=False&amp;amp;mbox=no&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=594945&amp;amp;archived=False&amp;amp;mbox=no&#34;&gt;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=594945&amp;amp;archived=False&amp;amp;mbox=no&lt;/a&gt;&lt;/a&gt;，里面说了大致情况，和我这里非常类似。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;    第一个意见，killall -9 empathy-account，无效。&lt;/div&gt;&lt;div&gt;    第二个意见，需要装CM。&lt;/div&gt;&lt;div&gt;    跑去看看，一个都没装。跟着看说明，应该在recommand里面的。OK，我这里有这个配置。&lt;/div&gt;&lt;div&gt;&lt;div&gt;shell-deb:~# cat /etc/apt/apt.conf.d/20norecommanded &lt;/div&gt;&lt;div&gt;APT&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;{&lt;/div&gt;&lt;div&gt;    Install-Recommends 0;&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;/div&gt;&lt;div&gt;    这是对付很多无聊包把recommand当作suggest用的，结果这次中标。其实这次的recommand应当放入dep里面的。&lt;/div&gt;&lt;div&gt;    OK，完事。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;PS.虽说如此，记得把telepathy重启一下，否则jabber协议看的到但是无效。&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>简易debian livecd打造手册</title>
      <link>https://shell909090.github.io/blog/archives/2094/</link>
      <pubDate>Thu, 16 Feb 2012 01:10:21 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2094/</guid>
      <description>&lt;p&gt;    废话不说，上干货。先装一下syslinux，genisoimage，kvm，debootstrap，squashfs-tools。&lt;/p&gt; &lt;p&gt;$ mkdir debcd&lt;/p&gt; &lt;p&gt;$ cd debcd&lt;/p&gt; &lt;p&gt;$ mkdir isoroot&lt;/p&gt; &lt;p&gt;$ cp /usr/lib/syslinux/isolinux.bin isoroot/&lt;/p&gt; &lt;p&gt;$ cat &amp;gt; isoroot/isolinux.cfg &amp;lt;&amp;lt; &amp;quot;EOF&amp;quot;&lt;/p&gt; &lt;p&gt;prompt 0&lt;/p&gt; &lt;p&gt;default linux&lt;br /&gt;&lt;/p&gt; &lt;p&gt;label linux&lt;/p&gt; &lt;p&gt;    kernel vmlinuz&lt;/p&gt; &lt;p&gt;    append initrd=initrd.img&lt;/p&gt; &lt;p&gt;EOF&lt;/p&gt; &lt;p&gt;$ cp /boot/vmlinuz-3.2.0-1-amd64 isoroot/vmlinuz&lt;/p&gt; &lt;p&gt;    完成上述步骤后，你就准备好了一个基础的iso镜像文件系统，并有了一个基础的引导模块和内核。现在，我们尝试把这玩意烧到iso上，并且测试一下。&lt;/p&gt; &lt;p&gt;$ genisoimage -o output.iso -b isolinux.bin -c &lt;a href=&#34;http://boot.cat&#34;&gt;boot.cat&lt;/a&gt; -no-emul-boot -boot-load-size 4 -boot-info-table isoroot/&lt;/p&gt; &lt;p&gt;$ sudo kvm -cdrom output.iso -m 512&lt;/p&gt; &lt;p&gt;    如果没法装kvm，换成qemu。屏幕会停在内核引导过程中——因为你没有initrd.img，所以在isolinux.cfg中指定的initrd就不正确。下面我们会设法弄一个initrd.img。&lt;/p&gt; &lt;p&gt;$ cp -a /etc/initramfs-tools/ initramfs&lt;/p&gt; &lt;p&gt;$ mkinitramfs -d initramfs -o isoroot/initrd.img&lt;/p&gt; &lt;p&gt;$ genisoimage -o output.iso -b isolinux.bin -c &lt;a href=&#34;http://boot.cat&#34;&gt;boot.cat&lt;/a&gt; -no-emul-boot -boot-load-size 4 -boot-info-table isoroot/&lt;/p&gt; &lt;p&gt;$ sudo kvm -cdrom output.iso -m 512&lt;/p&gt; &lt;p&gt;    现在看看？你应该能看到有initrd被加载上去了，但是很可惜，没有root，因此也无法启动。所以下一步，我们需要弄一个root。&lt;/p&gt; &lt;p&gt;$ mkdir sysroot&lt;/p&gt; &lt;p&gt;$ sudo debootstrap --arch amd64 stable sysroot/ &lt;a href=&#34;http://localhost:9999/debian/&#34;&gt;http://localhost:9999/debian/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;$ sudo chown -R user.user sysroot&lt;/p&gt; &lt;p&gt;$ mksquashfs sysroot isoroot/rootfs -all-root&lt;/p&gt; &lt;p&gt;    把上面的源换成你喜欢的——我用approx做了一个缓存，所以一直使用这个缓存进行加速。在脚本执行完后，你会有一个压缩为squash格式的rootfs，可以作为root。但是这个root有两个缺陷。1.不能直接mount。2.即使mount了，启动的时候也会因为只读而挂掉。所以你需要做一点调整&lt;/p&gt; &lt;p&gt;$ cat &amp;gt;&amp;gt; initramfs/modules &amp;lt;&amp;lt; &amp;quot;EOF&amp;quot;&lt;/p&gt; &lt;p&gt;squashfs&lt;/p&gt; &lt;p&gt;aufs&lt;/p&gt; &lt;p&gt;EOF&lt;/p&gt; &lt;p&gt;$ cat &amp;gt; initramfs/scripts/local-premount/iso &amp;lt;&amp;lt; &amp;quot;EOF&amp;quot;&lt;/p&gt; &lt;p&gt;#!/bin/sh&lt;/p&gt; &lt;p&gt;case &amp;quot;${1}&amp;quot; in&lt;/p&gt; &lt;p&gt;    prereqs)&lt;/p&gt; &lt;p&gt;        echo &amp;#39;iso script run&amp;#39;&lt;/p&gt; &lt;p&gt;        exit 0&lt;/p&gt; &lt;p&gt;        ;;&lt;/p&gt; &lt;p&gt;esac&lt;/p&gt; &lt;p&gt;mkdir /cdrom&lt;/p&gt; &lt;p&gt;mount -t iso9660 /dev/sr0 /cdrom&lt;/p&gt; &lt;p&gt;mkdir /cdroot&lt;/p&gt; &lt;p&gt;mount -t squashfs /cdrom/rootfs /cdroot&lt;/p&gt; &lt;p&gt;mkdir /shadow&lt;/p&gt; &lt;p&gt;mount -t tmpfs -o size=128m none /shadow&lt;/p&gt; &lt;p&gt;mount -t aufs -o br:/shadow=rw:/cdroot=ro none /root&lt;/p&gt; &lt;p&gt;EOF&lt;/p&gt; &lt;p&gt;$ chmod +x initramfs/scripts/local-premount/iso&lt;/p&gt; &lt;p&gt;$ mkinitramfs -d initramfs -o isoroot/initrd.img&lt;/p&gt; &lt;p&gt;$ genisoimage -o output.iso -b isolinux.bin -c &lt;a href=&#34;http://boot.cat&#34;&gt;boot.cat&lt;/a&gt; -no-emul-boot -boot-load-size 4 -boot-info-table isoroot/&lt;/p&gt; &lt;p&gt;$ sudo kvm -cdrom output.iso -m 512&lt;/p&gt; &lt;p&gt;    好，现在再make clean，make test，光盘基本就OK了。&lt;/p&gt; &lt;p&gt;    root密码多少？我怎么知道你的root密码呢？用sudo chroot sysroot切换到自己的系统里面去改。另外，你可能需要安装一些软件，这时候记得把/sys /proc挂到chroot里面。还有记得调整一下/etc/udev/rules.d/70-persistent-net.rules，把主机里面的记录删掉（或者干脆删掉文件）。调整/etc/network/interfaces，把以下内容加进去。&lt;/p&gt; &lt;p&gt;auto lo&lt;/p&gt; &lt;p&gt;iface lo inet loopback&lt;br /&gt;&lt;/p&gt; &lt;p&gt;# The primary network interface&lt;/p&gt; &lt;p&gt;auto eth0&lt;/p&gt; &lt;p&gt;iface eth0 inet dhcp&lt;/p&gt; &lt;p&gt;    基本来说，可定制的引导系统就是这样。不过这个系统有以下几点需要注意：&lt;/p&gt; &lt;p&gt;1.可写入数量只有128M，如果写多了就完蛋。&lt;/p&gt; &lt;p&gt;2.128M全在内存中，内存不足完蛋。&lt;/p&gt; &lt;p&gt;3.一次一次生成很麻烦，我用的是make。&lt;/p&gt; &lt;p&gt;TARGETS=isoroot/initrd.img isoroot/rootfs&lt;br /&gt;&lt;/p&gt; &lt;p&gt;all: output.iso&lt;br /&gt;&lt;/p&gt; &lt;p&gt;test: output.iso&lt;/p&gt; &lt;p&gt;  sudo kvm -cdrom $^ -m 512&lt;br /&gt;&lt;/p&gt; &lt;p&gt;clean:&lt;/p&gt; &lt;p&gt;   rm -f output.iso $(TARGETS)&lt;br /&gt;&lt;/p&gt; &lt;p&gt;output.iso: isoroot/isolinux.cfg isoroot/vmlinuz $(TARGETS)&lt;/p&gt; &lt;p&gt;    genisoimage -o $@ -b isolinux.bin -c &lt;a href=&#34;http://boot.cat&#34;&gt;boot.cat&lt;/a&gt; -no-emul-boot -boot-load-size 4 -boot-info-table isoroot/&lt;br /&gt;&lt;/p&gt; &lt;p&gt;isoroot/initrd.img: initramfs&lt;/p&gt; &lt;p&gt;    mkinitramfs -d $^ -o $@&lt;br /&gt;&lt;/p&gt; &lt;p&gt;isoroot/rootfs: sysroot&lt;/p&gt; &lt;p&gt;    mksquashfs $^ $@ -all-root&lt;/p&gt; &lt;p&gt;4.可以用一个dsvc保存中间结果，我用的是git。下面是gitignore。&lt;/p&gt; &lt;p&gt;*.iso&lt;/p&gt; &lt;p&gt;isoroot/vmlinuz*&lt;/p&gt; &lt;p&gt;isoroot/initrd*&lt;/p&gt; &lt;p&gt;isoroot/rootfs*&lt;/p&gt; &lt;p&gt;sysroot&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Progress Linux</title>
      <link>https://shell909090.github.io/blog/archives/2092/</link>
      <pubDate>Mon, 13 Feb 2012 01:56:41 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2092/</guid>
      <description>&lt;p&gt;别紧张，我不是要progress Linux，这是一种新的distribution（算是吧）。 &lt;a href=&#34;http://progress-linux.org&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://progress-linux.org&#34;&gt;http://progress-linux.org&lt;/a&gt;&lt;/a&gt;，是一个基于Debian的dist。&lt;br /&gt;    为什么要有这个dist？其实严格意义上说，这不是一个完整的dist。不同于Ubuntu，这个dist可以完全的寄生在Debian stable(squeeze)上面。你不需要真的去官网上下载一个ISO，然后安装。只需要安装Debian stable，然后加入 Progress-Linux的source就好了。如果你胆敢在Ubuntu上这么干，只会把系统弄的一团糟。当然，直接下载Progress-Linux的安装ISO也是可以的，这个ISO基于Debian Live，作者(Daniel Baumann)本人也是DD，是Debian Live的主要作者之一。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    为什么要这样？因为Debian是以严谨到变态而闻名的系统。例如，mdadm这个包有一个很小的不便。每个月当检查RAID的时候，会发一封mail。如果你有一堆电脑需要管理，这件事情就非常烦人了。要修正这个问题，只需要在其中一个脚本中加入参数-q。但是Debian修这个bug修了9个月。因为具体的包维护者并不是很关心这个事情（低优先级），而Release Term需要确保这个bug必须先在Sid中修复，确认没事了（基本是没问题的，只加一个-q而已），再修复testing的，最后修复stable的。于是，你的邮箱要被一堆垃圾持续淹没9个月。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    Progress-Linux就快多了。&lt;br /&gt;    但是为什么要做成dist呢？&lt;br /&gt;    Debian的模式设计，是方便fork，而严格控制release的。Debian的版本库更新要很多条件，例如符合DSFG（也就意味着符合一系列的开源授权协议），更新的时候首先作用于SID，Release Term说了算等等。DD也没有权利要求更新Debian stable中的包，他必须申请Release Term批准。想想也能明白，如果真的每个DD都能直接更新包，那才天下大乱了。我们不能绕过Release Term去解决问题，也不想让这些问题留着。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    那么怎么办？只有自己做一个仓库。Debian鼓励这么做（有很多dist就是这么做的），但是这时就不能用Debian的名字，因此作者才做了一个新的dist。DSFG这时变成了一个优势，Debian的所有包，都满足DSFG的第8条，“不仅仅对Debian授权”，可以直接应用。&lt;br /&gt;    因此，其实Progress-Linux是一个基于Debian的改进。更快的bug fix，更多的backport，更少考虑版权问题。当然，限于作者关心的包。另一个激动人心的特点是， Progress-Linux的包和backport包不会碰撞，因此使得stable可以简单的安装很多新的包。如果你喜欢，可以在安装系统后加入他的source，作为系统的改进。但是不要指望有什么实质性变化，都是一些细节改进而已。如果你希望知道几个例子，可以看这个页面（&lt;a href=&#34;http://www.progress-linux.org/project/about/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.progress-linux.org/project/about/&#34;&gt;http://www.progress-linux.org/project/about/&lt;/a&gt;&lt;/a&gt;）。&lt;div&gt;&lt;/p&gt;

&lt;p&gt;    也许你希望使用一个中国区的mirror来做这个事情（这样更快，也省去中间的一些其他麻烦），&lt;a href=&#34;http://mirrors.ustc.edu.cn&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://mirrors.ustc.edu.cn&#34;&gt;http://mirrors.ustc.edu.cn&lt;/a&gt;&lt;/a&gt;是debian中国区域的主镜像(即&lt;a href=&#34;http://ftp.cn.debian.org&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://ftp.cn.debian.org&#34;&gt;http://ftp.cn.debian.org&lt;/a&gt;&lt;/a&gt;)，这个节点已经完成Progress-Linux的镜像。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    Relax, I don&amp;#39;t mean to progress Linux, it&amp;#39;s a new distribution (kind of).  &lt;a href=&#34;http://progress-linux.org&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://progress-linux.org&#34;&gt;http://progress-linux.org&lt;/a&gt;&lt;/a&gt;, a new dist based on Debian.&lt;br /&gt;    Why people made this dist? Technically, it is no a fully dist. Unlike Ubuntu, this dist can totally on the top of Debian stable(squeeze). You don&amp;#39;t need to download a ISO from website and install. Just install Debian stable, and add source of Progress-Linux. It will be done. If you do something like that under Ubuntu, it will destroy your system. Even though that&amp;#39;s possible:  Progress-Linux install CD is based on the Debian Live (the main author of  Progress-Linux, Daniel Baumann, is a Debian Developer, and he is the main person behind Debian Live).&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    Why? Because Debian is a preciseness dist. For example, the package mdadm had a little tiny inconveniences. It will send you a Email When check RAID every month. So if there are huge amounts of computers, it will be annoying. To fix it, one of the scripts need to be added a extra parameter &amp;#39;-q&amp;#39;. But it toke 9 months to fix it. Because maintainer don&amp;#39;t care much about this issue, and Release Term insist this bug MUST be fixed in Sid first, then testing, finally stable. So your mailbox will be submerged under log reports for 9 months.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    Progress-Linux is faster.&lt;br /&gt;    But why new dist?&lt;br /&gt;    The design of Debian, is easy to fork, but strictly in release. There are many of conditions to be met to upgrade some package, like DSFG (which means a series of open source license), upgrade in Sid first, Release Term make the decision, etc. Never, a DD can update a package in Debian stable directly. He has to ask approval from the Release Term. If every DDs can update package in stable directly, that will be the hell. DD can&amp;#39;t cut through the Release Term, and we can&amp;#39;t wait for the issues.&lt;br /&gt;    What&amp;#39;s gonna do? Make a new repository! The Debian project encourage you to do so (and many dist do), but new repository can&amp;#39;t use the name of Debian. So the author of  Progress-Linux made a new dist. Now, DSFG is a advantage. Every package in Debian is meet No.8 rule of DSFG, License Must Not Be Specific to Debian.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    So, Progress-Linux is a improvement based on Debian. Faster bug fix, more backport packages, less license considering. Of course, that only work for the packages author care. Another exciting fact is, all the packages in Progress-Linux and it&amp;#39;s backport will not clashing. It help stable to install many new software easily. If you like, you can add it&amp;#39;s source for an enhance. But don&amp;#39;t expect too much, it all above details. If you wanna know some of them, try this page (&lt;a href=&#34;http://www.progress-linux.org/project/about/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.progress-linux.org/project/about/&#34;&gt;http://www.progress-linux.org/project/about/&lt;/a&gt;&lt;/a&gt;).&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;&lt;div&gt;    Maybe you wanna a mirror in China to run update(which faster, and less trouble).  &lt;a href=&#34;http://mirrors.ustc.edu.cn&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://mirrors.ustc.edu.cn&#34;&gt;http://mirrors.ustc.edu.cn&lt;/a&gt;&lt;/a&gt; is the primary Debian mirror of China(alias to &lt;a href=&#34;http://ftp.cn.debian.org&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://ftp.cn.debian.org&#34;&gt;http://ftp.cn.debian.org&lt;/a&gt;&lt;/a&gt;), which has a mirror of Progress-Linux.&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lfs under debian注记</title>
      <link>https://shell909090.github.io/blog/archives/2088/</link>
      <pubDate>Thu, 09 Feb 2012 07:04:06 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2088/</guid>
      <description>&lt;p&gt;1.严格按照说明做，少看一点无关内容后面就一堆err了。&lt;div&gt;2.新分区大点，4G不够的，最小用8G。我用了20G的，硬盘不值钱。另外说一句，并不是4G不能够做到，而是你可能被迫删除不少有用东西，或者是移到其他位置，增加复杂度。&lt;/div&gt;&lt;div&gt;3.每次你进入一个section，以前针对这个包进行解压，打补丁，并修改的source都作废了。直接删除它们，然后重新解压。lfs不依赖于以前解开的源码，在任何一节的开始都不需要翻以前怎么处理（解压，打补丁，修改）源码的。你在任何一节都可以（并且必须）独立操作源码。&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;&lt;div&gt; 4.mawk会出错，装一个gawk。&lt;br clear=&#34;all&#34;&gt; &lt;div&gt;5.yacc没有的时候，装bison，it&amp;#39;s works。&lt;/div&gt;&lt;div&gt;6.如果碰到见鬼的tar.xz，用tar Jxf。或者更简单的，现代tar都支持xf直接解压，不用再自己选择zjJ。&lt;/div&gt;&lt;div&gt;7.chapter5的流程？先用系统的编译器编译了binutils，gcc和glibc，然后再用刚刚编译好的再编译这三个，这样编译系统就统统连接到了/tools上。然后用/tools的连接编译了一堆编译用工具，bash啦，make啦。这样，就完成了编译环境的建立，/tools是一个独立于主系统的，完整而可用的编译系统。用这个编译系统编译任何东西的结果应当是相对可控的。&lt;/div&gt;

&lt;div&gt;8.如果我是你，在chapter5完成的时候会tar czf ~/tools.tar.gz /tools。这样会让你在chapter6中犯错的时候不至于血本无归。&lt;/div&gt;&lt;div&gt;9.chapter6的流程？用chapter5的编译系统，编译了新系统的编译系统。当然，这个不容易，因为刚刚的编译系统所有指向都是/tools。所以lfs指导你做了不少patch。然后重复chapter5的过程，逐步把源码编译安装到正式系统中。&lt;/div&gt;

&lt;div&gt;10.lfs真TMD的辛苦，连source code的typo都需要在书中指出和fix。。。而且lfs自己还有errata。&lt;/div&gt;&lt;div&gt;11.lfs的56两章看起来像是两个人写的，风格习惯不一致。chapter5用``，chapter6用$()。还有gcc-pass2的时候，cp -v XXX{,.tmp}; sed XXX.tmp ... &amp;gt; XXX。而chapter6的binutils则是sed -i.bak。当然，有可能是因为有些系统的sed不支持-i，例如redhat的系统始终不支持netstat -nlp46，I hate it。BTW，我喜欢sed -i。&lt;/div&gt;

&lt;p&gt;&lt;div&gt;12.编译过程真心傻X，大部分都是解开源码，configure &amp;ndash;prefix=&amp;hellip; &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make check &amp;amp;&amp;amp; make install。这些过程好像可以用一个不知道啥脚本来简化，建议不要手工干这堆事情，没意思的。相反，倒是很多调整有些意思。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何写基于google code的watch file</title>
      <link>https://shell909090.github.io/blog/archives/2078/</link>
      <pubDate>Wed, 01 Feb 2012 04:06:39 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2078/</guid>
      <description>&lt;p&gt;google code很好用，可是他的下载页面很恶心，很难跟，而且还改过一次。debian打包党要做watch file的时候，估计会很郁闷。&lt;div&gt;    去&lt;a href=&#34;http://googlecode.debian.net/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://googlecode.debian.net/&#34;&gt;http://googlecode.debian.net/&lt;/a&gt;&lt;/a&gt;，然后提交你的包名，你会得到一个url（其实自己猜也可以猜到）。每次访问这个url的时候，他会代你解析google code，告诉你有没有更新。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PXE模式使用openwrt网络安装debian</title>
      <link>https://shell909090.github.io/blog/archives/2076/</link>
      <pubDate>Tue, 31 Jan 2012 03:14:14 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2076/</guid>
      <description>&lt;p&gt;废话不说，上干货。 &lt;div&gt;    首先，禁用arptables。当然，如果你没开这个防火墙，那么没必要。其次，注意你的openwrt必须有udisk，否则空间相差太多，根本没有实现的可能。&lt;/div&gt;&lt;div&gt;    然后，如果你用的是新版的rom，应该在/etc/init.d/dnsmasq里面看到，dnsmasq()这个函数里面有。&lt;/div&gt;&lt;div&gt;&lt;div&gt;        append_parm &amp;quot;$cfg&amp;quot; &amp;quot;tftp_root&amp;quot; &amp;quot;&amp;ndash;tftp-root&amp;quot;&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;        append_parm &amp;quot;$cfg&amp;quot; &amp;quot;dhcp_boot&amp;quot; &amp;quot;--dhcp-boot&amp;quot;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;    如果没有，加一下，有的话说明原生支持。下面可以直接修改。&lt;/div&gt;&lt;div&gt;    dnsmasq是一个dhcp/dns双重服务器，而pxe引导的第一步就是支持bootp协议。这个选项在/etc/config/dhcp里面。config dnsmasq一节上，增加。&lt;/div&gt;

&lt;div&gt;&lt;div&gt;        option &amp;#39;dhcp_boot&amp;#39; &amp;#39;pxelinux.0&amp;#39;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;    重启dnsmasq，完成bootp准备。&lt;/div&gt;&lt;div&gt;    然后，安装tftpd-hpa，opkg update，opkg install tftpd-hpa。这是一个tftp服务器，默认不启动。如果你打算让pxe引导模式持久化，那么就改为默认启动，同时永久关闭arp防火墙。在/var/tftpd-hpa里面，可以看到tftpd的根路径。从参考3的的连接里面，你可以找到合适的一个下载路径，下载netboot.tar.gz到这个文件。解压后，可以看到pxelinux.0，这个和上面的pxelinux.0相对应。这是pxelinux的组件，隶属于syslinux项目，可以用来完成启动。&lt;/div&gt;

&lt;div&gt;    这样，就完成了安装的所有准备工作。你可以找一个设备实验一下，应当可以完成网络安装的步骤。&lt;/div&gt;&lt;div&gt;    另外，如果需要启动选择amd64或者是i386，或者更进一步定制。那么需要下载其他镜像，自己生成pxelinux.cfg这个目录中的内容。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;1. PXE &lt;a href=&#34;http://wiki.debian.org/PXE&#34; target=&#34;_blank&#34;&gt;http://wiki.debian.org/PXE&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;div&gt;2. NetbootPXE &lt;a href=&#34;http://wiki.debian.org/DebianInstaller/NetbootPXE&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://wiki.debian.org/DebianInstaller/NetbootPXE&#34;&gt;http://wiki.debian.org/DebianInstaller/NetbootPXE&lt;/a&gt;&lt;/a&gt;&lt;/div&gt; &lt;div&gt;3. netinst &lt;a href=&#34;http://www.debian.org/distrib/netinst&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.debian.org/distrib/netinst&#34;&gt;http://www.debian.org/distrib/netinst&lt;/a&gt;&lt;/a&gt; &lt;/div&gt;&lt;div&gt;4. 配置pxe，安装debian和ubuntu &lt;a href=&#34;http://my.unix-center.net/~whtbie/wordpress/?p=290&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://my.unix-center.net/~whtbie/wordpress/?p=290&#34;&gt;http://my.unix-center.net/~whtbie/wordpress/?p=290&lt;/a&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>从python-support改为dh_python2的方法</title>
      <link>https://shell909090.github.io/blog/archives/2016/</link>
      <pubDate>Thu, 15 Dec 2011 11:00:46 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2016/</guid>
      <description>&lt;div&gt;    在debian/rules里面，将这个：&lt;/div&gt;&lt;div&gt;&lt;div&gt;%:&lt;/div&gt;    dh $@&lt;/div&gt;&lt;div&gt;    改为这个：&lt;/div&gt;&lt;div&gt;%:&lt;/div&gt;    dh $@ --with python2&lt;br clear=&#34;all&#34;&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;    其余看&lt;a href=&#34;http://wiki.debian.org/Python/TransitionToDHPython2&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;。&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>uwsgi under debian</title>
      <link>https://shell909090.github.io/blog/archives/1919/</link>
      <pubDate>Tue, 27 Sep 2011 10:28:02 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/1919/</guid>
      <description>&lt;p&gt;好了，debian官方的uwsgi总算出来了。包已经到了testing，stable暂时别指望了，等下一次release吧。这次打的包，比贝壳打的复杂多了。贝壳自己只打了python专用的包，debian官方的包将多个语言分别打成了plugins。 &lt;div&gt;    下面说说，使用debian官方的包如何做uwsgi发布，还是vhost模式哦。&lt;/div&gt;&lt;div&gt;    首先安装uwsgi，uwsgi-plugin-python这两个包。uwsgi-plugin-greenlet-python也可以考虑，装不装看你的需求。&lt;/div&gt;&lt;div&gt;    然后在/etc/uwsgi/apps-available/sites.xml下面写一个文本文件，内容如下：&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;uwsgi&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;    &lt;/span&gt;&amp;lt;vhost/&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;&amp;lt;no-site/&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;lt;/uwsgi&amp;gt;&lt;/div&gt;&lt;/div&gt; &lt;div&gt;    再从/etc/uwsgi/apps-enabled/sites.xml链接过去，重启uwsgi服务，事情就搞定了。&lt;/div&gt;&lt;div&gt;    默认的配置在/usr/share/uwsgi/conf/default.ini，可以看看是否都满意了。一般来说，master和no-orphans都建议打开，chmod-socket最高660，改成600应该也可以工作。贝壳的机器负载小，只用一个worker就够了，所以完整的配置是这样的：&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;&lt;div&gt;&amp;lt;uwsgi&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;  &lt;/span&gt;&amp;lt;plugins&amp;gt;greenlet,ugreen&amp;lt;/plugins&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;&amp;lt;workers&amp;gt;1&amp;lt;/workers&amp;gt;&lt;/div&gt; &lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;  &lt;/span&gt;&amp;lt;reload-on-as&amp;gt;128&amp;lt;/reload-on-as&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;&amp;lt;vhost/&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt;&amp;lt;no-site/&amp;gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;&amp;lt;/uwsgi&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;    nginx里面如此设定：&lt;/div&gt;&lt;div&gt;&lt;div&gt;location /asdf {&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt; include&lt;span style=&#34;white-space:pre-wrap&#34;&gt;  &lt;/span&gt;uwsgi_params;&lt;/div&gt; &lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt; uwsgi_param&lt;span style=&#34;white-space:pre-wrap&#34;&gt;  &lt;/span&gt;UWSGI_PYHOME /usr;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt; uwsgi_param&lt;span style=&#34;white-space:pre-wrap&#34;&gt;  &lt;/span&gt;UWSGI_CHDIR /var/web/hosts;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt; uwsgi_param&lt;span style=&#34;white-space:pre-wrap&#34;&gt;  &lt;/span&gt;UWSGI_SCRIPT main;&lt;/div&gt;&lt;div&gt;&lt;span style=&#34;white-space:pre-wrap&#34;&gt; &lt;/span&gt; uwsgi_pass&lt;span style=&#34;white-space:pre-wrap&#34;&gt;   &lt;/span&gt;unix:/run/uwsgi/sites/socket;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;    其中，我的程序放在/var/web/hosts底下，使用系统环境来运行（而不是virtualenv），主脚本（带applications那个）是main.py。unix socket和上文default.ini里面的socket正好对应上。&lt;/div&gt;&lt;div&gt;    同理，我们其实还可以开多个uwsgi应用，只要放置多个xml配置就好。不过既然都采用了vhost模式，何必还开多个呢？这毕竟不是虚拟网站，要给其他人使用的。&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>debian打包的一些细节补充</title>
      <link>https://shell909090.github.io/blog/archives/1895/</link>
      <pubDate>Fri, 26 Aug 2011 15:52:30 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/1895/</guid>
      <description>&lt;p&gt;如果前面有人接手了，你最好和前任联系一下，看看是否可以获得他的帮助，或者跟着他的思路继续做下去。&lt;div&gt;    debian有一个比较变态的规定，你的打包内容，必须遵循FHS。有些程序写的数据放到了程序路径下面，你需要进行人工分离（这个花了我整整两天）。&lt;/div&gt;&lt;div&gt;    求RFS比ITP难多了&amp;hellip;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;hellip;.&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;.......&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;求RFS。&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt; &lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>