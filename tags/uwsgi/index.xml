<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uwsgi on Shell&#39;s Home</title>
    <link>http://shell909090.org/tags/uwsgi/</link>
    <description>Recent content in Uwsgi on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Mon, 09 Jul 2012 08:45:28 +0800</lastBuildDate>
    <atom:link href="http://shell909090.org/tags/uwsgi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>debian wheezy下以uwsgi安装graphite</title>
      <link>http://shell909090.org/blog/archives/2200/</link>
      <pubDate>Mon, 09 Jul 2012 08:45:28 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/2200/</guid>
      <description>&lt;div&gt;

\# abstract \#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

graphite是一个python写的性能监控系统。这个系统是由多个分离的部分组成的。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\* graphite-web: 由django写的web界面系统。

&lt;/div&gt;

&lt;div&gt;

\* carbon: 数据收集的守护进程。

&lt;/div&gt;

&lt;div&gt;

\* whisper:
一种python写的数据库，类似rrd，便于大量的性能日志数据收集和处理。上两个组件会调用这个库。

&lt;/div&gt;

&lt;div&gt;

\* collectd: 数据收集守护进程，向carbon中喂数据的数据源。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

另外，有一点黑色幽默的就是，graphite的意思是石墨，是炭(carbon)的一种同素异形体。因此在graphite项目中，多次出现carbon这个名字。当然，另两个同素异形体是钻石(diamond)和足球烯(footballene)，你就暂时别指望看到他们的身影了。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

另一个用python写的，以元素命名的著名软件是mercurial。化学元素中的汞，俗称水银，符号hg。因此mercurial的命令行简写才是hg。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

以上几个的结构大概是这样的：

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;collectd(source) -network-&amp;gt; carbon -writing-&amp;gt; whisper
database -reading-&amp;gt; graphite-web

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

下文描述了在debian
wheezy下，以nginx+uwsgi模式安装graphite的过程。之所以用这个模式，是因为我的大部分系统都是python写的，同样安装在uwsgi下面。一事不烦二主。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\# carbon \#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

carbon有对应的debian包，可以很简单的安装。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;sudo
aptitude install graphite-carbon

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

默认的数据端口是2003，默认的数据路径是/var/lib/graphite/，这个在下文需要用到。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\# graphite \#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\#\# virtual \#\#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

graphite有部分需要安装到系统中，因此最好用virtualenv进行安装。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;cd
/var/web/

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;sudo
aptitude install python-virtualenv

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;virtualenv
--system-site-packages graphite

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

我假定你的安装路径是/var/web/graphite，这个在下面要反复用到。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\#\# install \#\#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

在安装路径下，执行以下内容

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;source
bin/activite

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;pip install
graphite-web --install-option=&#34;--prefix=/var/web/graphite&#34;
--install-option=&#34;--install-lib=/var/web/graphite/webapp&#34;

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

注意，/var/web/graphite需要根据上面的设定自行修改，webapp是你的django基础路径。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\#\# configure \#\#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

在/var/web/graphite/webapp/graphite下面，执行以下内容

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;cp
local\_settings.py.example local\_settings.py

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

然后编辑local\_settings.py

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;GRAPHITE\_ROOT = &#39;/var/web/graphite&#39;

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;WHISPER\_DIR = &#39;/var/lib/graphite/whisper&#39;

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;DATABASES =
...

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

注意databases，不要在settings.py里面修改，要改这里的才有效。我用的是sqlite，如果你高兴，可以改为postgres/mysql。WHISPER\_DIR是上文carbon中设定的目录。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

最后，执行以下指令，完成数据库初始化。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;python
manage.py syncdb

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\#\# uwsgi \#\#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

编辑/etc/uwsgi/apps-enabled/graphite.ini，包含以下内容。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;\[uwsgi\]

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;plugins    
    = python

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;workers    
    = 1

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;chdir      
    = /var/web/graphite/webapp

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;pythonpath
     = /var/web/graphite

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;env        
    = DJANGO\_SETTINGS\_MODULE=graphite.settings

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;module    
     = django.core.handlers.wsgi:WSGIHandler()

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

注意，这里的chdir，是你的webapp基础路径。而pythonpath则是virtualenv的路径。两者在上文都有说明的。env里面那个graphite是webapp/graphite这个app(不详细说明，自己学一下django就懂了)。module是django的固定写法。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\#\# nginx \#\#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

最后，在nginx中包含以下内容，将部分url转发到uwsgi上。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;location \~
\^/(graphite|content|metrics|dashboard|render|browser|composer)/ {

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;include
       uwsgi\_params;

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;uwsgi\_param    UWSGI\_SCHEME \$scheme;

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;uwsgi\_pass
    unix:/run/uwsgi/app/graphite/socket;

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;}

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\# collectd \#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\#\# install \#\#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

collectd的安装很简答，有包，直接安装就好。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;sudo
aptitude install collectd

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\#\# configure \#\#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

在/etc/collectd/这个路径，能够看到collectd.conf这个文件。反注释掉以下内容：

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;&amp;lt;LoadPlugin python&amp;gt;

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;Globals
true

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;&amp;lt;/LoadPlugin&amp;gt;

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

然后，再编辑以下内容。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;&amp;lt;Plugin
python&amp;gt;

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;ModulePath &#34;/etc/collectd/carbon&#34;

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;Import
“carbon\_writer”

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;&amp;lt;Module “carbon\_writer”&amp;gt;

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;LineReceiverHost “localhost″

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;LineReceiverPort 2003

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;DifferentiateCountersOverTime true

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;LowercaseMetricNames true

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;TypesDB
&#34;/usr/share/collectd/types.db&#34;

&lt;/div&gt;

&lt;div&gt;

    &lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt;
&lt;/span&gt;&amp;lt;/Module&amp;gt;

&lt;/div&gt;

&lt;div&gt;

    &amp;lt;/Plugin&amp;gt;

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

上文中假定你把python插件放在了/etc/collectd/carbon下面，所以下文需要按照这个路径安装carbon。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\#\# collectd-carbon \#\#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

在/etc/collectd下面，执行

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;sudo git
clone &lt;https://github.com/indygreg/collectd-carbon.git&gt; carbon

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

注意，sudo其实是不安全的。不过目前就这样吧，问题不明显。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\#\# restart whole system \#\#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

执行以下指令重启服务

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;sudo
/etc/init.d/nginx restart

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;sudo
/etc/init.d/uwsgi restart

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;sudo
/etc/init.d/carbon-cache restart

&lt;/div&gt;

&lt;div&gt;

&lt;span class=&#34;Apple-tab-span&#34; style=&#34;white-space:pre&#34;&gt; &lt;/span&gt;sudo
/etc/init.d/collectd restart

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

完成这步后，可以在/var/log/syslog中看到collectd的输出，数据确实的被灌入了carbon。而/var/log/uwsgi/app/graphite.log中可以看到uwsgi的输出。如果一切正常的话，你可以去\[[http://localhost/graphite/\](http://localhost/graphite/)下面看你要的东西了](http://localhost/graphite/%5D%28http://localhost/graphite/)%E4%B8%8B%E9%9D%A2%E7%9C%8B%E4%BD%A0%E8%A6%81%E7%9A%84%E4%B8%9C%E8%A5%BF%E4%BA%86)。

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

\# 评价 \#

&lt;/div&gt;

&lt;div&gt;

\

&lt;/div&gt;

&lt;div&gt;

数据收集的挺完整的。既然是基于collectd，那么应当没什么问题的，openwrt也可以支持的。问题是拿到数据后展现的一方面。由于默认配置太差，因此需要很长时间调教。我没那个功夫，搞定测试后就直接删除了。

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>uwsgi under debian</title>
      <link>http://shell909090.org/blog/archives/1919/</link>
      <pubDate>Tue, 27 Sep 2011 10:28:02 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/1919/</guid>
      <description>&lt;p&gt;好了，debian官方的uwsgi总算出来了。包已经到了testing，stable暂时别指望了，等下一次release吧。这次打的包，比贝壳打的复杂多了。贝壳自己只打了python专用的包，debian官方的包将多个语言分别打成了plugins。&lt;/p&gt;

&lt;p&gt;下面说说，使用debian官方的包如何做uwsgi发布，还是vhost模式哦。&lt;/p&gt;

&lt;p&gt;首先安装uwsgi，uwsgi-plugin-python这两个包。uwsgi-plugin-greenlet-python也可以考虑，装不装看你的需求。&lt;/p&gt;

&lt;p&gt;然后在/etc/uwsgi/apps-available/sites.xml下面写一个文本文件，内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;uwsgi&amp;gt;
&amp;lt;vhost/&amp;gt;
&amp;lt;no-site/&amp;gt;
&amp;lt;/uwsgi&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再从/etc/uwsgi/apps-enabled/sites.xml链接过去，重启uwsgi服务，事情就搞定了。&lt;/p&gt;

&lt;p&gt;默认的配置在/usr/share/uwsgi/conf/default.ini，可以看看是否都满意了。一般来说，master和no-orphans都建议打开，chmod-socket最高660，改成600应该也可以工作。贝壳的机器负载小，只用一个worker就够了，所以完整的配置是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;uwsgi&amp;gt;
    &amp;lt;plugins&amp;gt;greenlet,ugreen&amp;lt;/plugins&amp;gt;
    &amp;lt;workers&amp;gt;1&amp;lt;/workers&amp;gt;
    &amp;lt;reload-on-as&amp;gt;128&amp;lt;/reload-on-as&amp;gt;
    &amp;lt;vhost/&amp;gt;
    &amp;lt;no-site/&amp;gt;
&amp;lt;/uwsgi&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nginx里面如此设定：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location /asdf {
    include uwsgi\_params;
    uwsgi\_param UWSGI\_PYHOME /usr;
    uwsgi\_param UWSGI\_CHDIR /var/web/hosts;
    uwsgi\_param UWSGI\_SCRIPT main;
    uwsgi\_pass unix:/run/uwsgi/sites/socket;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，我的程序放在/var/web/hosts底下，使用系统环境来运行（而不是virtualenv），主脚本（带applications那个）是main.py。unix&lt;/p&gt;

&lt;p&gt;socket和上文default.ini里面的socket正好对应上。&lt;/p&gt;

&lt;p&gt;同理，我们其实还可以开多个uwsgi应用，只要放置多个xml配置就好。不过既然都采用了vhost模式，何必还开多个呢？这毕竟不是虚拟网站，要给其他人使用的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用uwsgi搭建python应用</title>
      <link>http://shell909090.org/blog/archives/1811/</link>
      <pubDate>Wed, 25 May 2011 11:08:38 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/1811/</guid>
      <description>&lt;p&gt;wsgi是python的一个标准web服务接口，具体去google
pep文档，不解释。在李木头的忽悠下，贝壳试用了一下uwsgi搭建python服务器，感觉还不错。
 
 首先，贝壳将uwsgi打包成deb包，因为这东西和python基本没什么关系，就是一个标准的系统守护服务程序。其中贝壳测试了一下，uwsgi编译的时候是依赖版本的。所以请教了一下thomas，打了uwsgi2.6和uwsgi2.7两个包。没办法，mercurial对python2.7的支持不是很好，每次都出问题。具体的可以加贝壳的repos:
&lt;a href=&#34;http://shell909090.org/debian/&#34;&gt;http://shell909090.org/debian/&lt;/a&gt;&lt;span
style=&#34;min-height: 16px; padding-right: 16px; width: 16px;&#34;&gt;&lt;/span&gt;
testing，然后通过一下贝壳的key，就可以直接安装uwsgi2.6了。当然，不通过key也可以，只是每次安装升级都有警告。
 
 贝壳写了一个很简单的init.d，使用&amp;ndash;vhost来启动uwsgi为服务模式。这种模式的好处是，uwsgi的具体执行的应用都是由nginx来确定的，因此所有的映射只需要修改nginx配置就好。uwsgi参数很多，包括可以指定内存限制，工作进程/线程，定时重启工作进程，多解释器等等。是一个高效的，功能强大的服务器。具体可以自己参考调整。最好的的地方是，uwsgi还支持virtualenv，你可以给不同的应用建立不同的工作环境，从而在环境中使用指定的包，而不是系统包。
   下面是一个nginx配置的例子。       location /ticket {              
 include uwsgi_params;                uwsgi_param UWSGI_PYHOME /usr;
               uwsgi_param UWSGI_CHDIR /home/shell/workspace/hg/thost;
               uwsgi_param UWSGI_SCRIPT main;              
 uwsgi_pass unix:/var/run/uwsgi.socket;        }        location
/mlocate {                include uwsgi_params;              
 uwsgi_param UWSGI_PYHOME /usr;                uwsgi_param
UWSGI_CHDIR /home/shell/workspace/hg/thost;                uwsgi_param
UWSGI_SCRIPT main;                uwsgi_pass
unix:/var/run/uwsgi.socket;        }        location /hg {              
 include uwsgi_params;                uwsgi_param UWSGI_PYHOME /usr;
               uwsgi_param UWSGI_CHDIR /home/shell/workspace/hg;      
         uwsgi_param UWSGI_SCRIPT hgweb;                uwsgi_param
SCRIPT_NAME /;                uwsgi_param SERVER_NAME hgweb;        
       uwsgi_pass unix:/var/run/uwsgi.socket;        }  
 这里面设定了三个应用。由于贝壳不需要virtualenv，所以PYHOME设定了/usr。第一二个应用的基础路径在/home/shell/workspace/hg/thost，脚本叫做main.py。第三个应用的基础路径在/home/shell/workspace/hg，脚本叫做hgweb.py。需要注意的是，uwsgi会以模块方式导入这些脚本，然后使用其中的application对象作为wsgi处理函数。所以不要把application对象赋值放在if
__name__ ==
&amp;lsquo;__main__&amp;lsquo;里面，那没用的。第三个应用指定了SCRIPT_NAME和SERVER_NAME，是因为hg的wsgi模块没有SCRIPT_NAME不工作，而这个应用和前两个不在一起，所以如果不指定SERVER_NAME会导致覆盖冲突。
   
这种部署模式的好处是，我可以使用一个宿主来管理所有的应用，而不必每个应用启动一个宿主，省去了多个宿主管理的麻烦。而多进程，压力分布等等问题都被uwsgi的配置系统搞定了。于是应用程序宿主做到了彻底的免管理，即装即用，只用调节性能匹配即可。具体程序配置下放到nginx中，要修改映射关系只用管理一个位置。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>