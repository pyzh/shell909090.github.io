<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Antigfw on Shell&#39;s Home</title>
    <link>http://shell909090.org/tags/antigfw/</link>
    <description>Recent content in Antigfw on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Wed, 18 May 2011 09:53:48 +0800</lastBuildDate>
    <atom:link href="http://shell909090.org/tags/antigfw/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>组合翻墙方法——细节</title>
      <link>http://shell909090.org/blog/archives/1804/</link>
      <pubDate>Wed, 18 May 2011 09:53:48 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/1804/</guid>
      <description>&lt;p&gt;中国这网络，越来越没法上了。现在你访问国外禁网，就会中断连接10分钟。问题是我也不知道哪个网是禁止的&amp;hellip;&lt;br /&gt;    现在教大家一招，基本能够永久套上翻墙。理论上你就没有中招的可能，尤其适用于公司使用。&lt;br /&gt;    首先是squid，这个是流量分离和缓存的关键部件。你可以用pac替代，但是这只局限于某台具体的机器，并且代理用户支持pac。squid的好处是，任何http访问都可以分流，而且无须客户端支持。甚至如果你精通squid配置，你可以配置成透明代理（cache拦截），从而避免在每台机器上修改代理配置。当然，cache拦截是有技术问题的，具体请参考这篇（&lt;a href=&#34;http://home.arcor.de/pangj/squid/chap09.html#a6&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://home.arcor.de/pangj/squid/chap09.html#a6&#34;&gt;http://home.arcor.de/pangj/squid/chap09.html#a6&lt;/a&gt;&lt;/a&gt;）。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;   squid的配置如下：&lt;br /&gt;include /etc/squid3/gfw.conf&lt;br /&gt;acl localnet src &lt;a href=&#34;http://192.168.0.0/16&#34; target=&#34;_blank&#34;&gt;192.168.0.0/16&lt;/a&gt;&lt;br /&gt;http_access allow localnet&lt;br /&gt;http_access allow localhost&lt;br /&gt;cache_peer 127.0.0.1 parent 8123 0 no-delay no-query&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;cache_peer_access 127.0.0.1 allow gfw&lt;br /&gt;always_direct deny gfw&lt;br /&gt;never_direct allow gfw&lt;br /&gt;   以上配置是允许192.168.0.0的C类内部子网访问本机，所有gfw规则的域名必须通过8123端口的上层代理，而其他的直接访问。注意以上不是完整配置，不保证可以独立运行，只保证在debian的标准配置文件的基础上，修改以上内容就可以工作。独立配置你可能还需要加入以下两句。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;http_access deny all&lt;br /&gt;http_port 3128&lt;br /&gt;    配置中的gfw.conf是gfw这个规则的定义文件，这个文件是由程序生成的，程序如下。注意，你系统上的python版本应当在2.5以上。&lt;br /&gt;#!/usr/bin/python&lt;br /&gt;from &lt;strong&gt;future&lt;/strong&gt; import with_statement&lt;br /&gt;with open(&amp;#39;gfw&amp;#39;, &amp;#39;r&amp;#39;) as fi:&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;   for line in fi: print &amp;#39;acl gfw dstdomain .%s&amp;#39; % line.strip()&lt;br /&gt;    以上内容，保存为平文本，赋予执行权限后，直接执行即可。同目录下必须有一个gfw文件，平文本，里面一行保存一个域名。域名不以.开头，可以使用泛域名（例如&lt;a href=&#34;http://google.com&#34; target=&#34;_blank&#34;&gt;google.com&lt;/a&gt;匹配&lt;a href=&#34;http://www.google.com&#34; target=&#34;_blank&#34;&gt;www.google.com&lt;/a&gt;）。执行后打印出内容，所以你还需要重定向。./gfw2squid &amp;gt; /etc/squid3/gfw.conf。当每次gfw文件升级时，你都需要重新生成，并且迫使squid加载。方法是squid -k reconfigure。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;   OK，现在你有一台配置了分流的squid，然后你需要一个可以翻墙的代理。由于我的目标是看youtube，所以我采取了一个非常复杂而高性能高可靠的方案。&lt;br /&gt;   我配置了一台polipo作为http socks5协议转换。由于squid的特性，不能直接使用socks5，因此还是做了一重转换的。polipo这个代理的性能和稳定性也相当不错，用来做缓存代理也是可以的。不过我们用了更强大的squid，就没必要用polipo了。因此启用以下几句来减少polipo的性能消耗，同时，将本地8123端口的http代理服务转向到7777端口的socks5代理。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;socksParentProxy = &amp;quot;localhost:7777&amp;quot;&lt;br /&gt;socksProxyType = socks5&lt;br /&gt;chunkHighMark = 819200&lt;br /&gt;objectHighMark = 128&lt;br /&gt;diskCacheRoot = &amp;quot;&amp;quot;&lt;br /&gt;    在polipo之后的，是一个负载均衡系统。http是一种无状态协议，对不对？所以同一个session可以分布在不同的服务器上处理。也是同样理由，我们可以把后端的socks5连接分布到多个socks5服务器上。以下是haproxy.cfg的简单配置，由于提取出时做了部分删节，我不保证一定能在所有系统上跑通，但是同样的，debian问题应当不大。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;global&lt;br /&gt;        log 127.0.0.1   local0&lt;br /&gt;        log 127.0.0.1   local1 notice&lt;br /&gt;        maxconn 4096&lt;br /&gt;        user haproxy&lt;br /&gt;        group haproxy&lt;br /&gt;        daemon&lt;br /&gt;frontend socks5&lt;br /&gt;        bind    &lt;a href=&#34;http://0.0.0.0:7777&#34; target=&#34;_blank&#34;&gt;0.0.0.0:7777&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;        default_backend ssh-balance&lt;br /&gt;backend ssh-balance&lt;br /&gt;        balance roundrobin&lt;br /&gt;        server  ssh1 &lt;a href=&#34;http://0.0.0.0:7778&#34; target=&#34;_blank&#34;&gt;0.0.0.0:7778&lt;/a&gt; maxconn 20 weight 20&lt;br /&gt;        server  ssh2 &lt;a href=&#34;http://0.0.0.0:7779&#34; target=&#34;_blank&#34;&gt;0.0.0.0:7779&lt;/a&gt; maxconn 10 weight 10&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;        srvtimeout      20000&lt;br /&gt;    最后是一个核心问题，7778和7779是真实的socks5翻墙代理服务器，具体是什么呢？很简单，多台ssh服务器。当然，如果你用别的方案，只要是提供socks5的，都可以混用。&lt;br /&gt;    整个系统运转起来后，一个公司内十多号人的访问可以全部通过这个系统。具体需要多少个ssh，多少性能够用要看翻墙的频率。但是由于做了负载均衡和本地缓存，所以性能是相当可以的。单人使用的时候可以看youtube，十多人同时使用的时候还能正常的访问google搜索，邮箱服务等。而且不翻墙没有ssh压力，节约流量，也方便使用。后端的方案可以做其他变化，例如如果你是多台vps，你可以在上面部署polipo，然后用ssh做端口转发，本地用haproxy做负载均衡。同理，如果你使用别的方案，只要是提供http代理的，也可以省去polipo，用haproxy群集。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    至于另一个核心问题，gfwlist的获得，你可以从autoproxy中提取一个，自己处理，过程很是繁琐哦。贝壳已经处理好了一个，做了签名压缩，你可以找我要。&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>