<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opensource on Shell&#39;s Home</title>
    <link>https://shell909090.github.io/tags/opensource/</link>
    <description>Recent content in Opensource on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Sep 2012 11:58:22 +0800</lastBuildDate>
    <atom:link href="https://shell909090.github.io/tags/opensource/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>自由软件的基础讲解</title>
      <link>https://shell909090.github.io/blog/archives/2237/</link>
      <pubDate>Mon, 10 Sep 2012 11:58:22 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/2237/</guid>
      <description>&lt;h1&gt;授权&lt;/h1&gt;

&lt;p&gt;本文档内容基于cc-by-sa3.0下发布。&lt;/p&gt;

&lt;p&gt;您可以自由复制、发行、展览、表演、放映、广播或通过信息网络传播本作品，创作演绎作品，对本作品进行商业性使用。惟须遵守下列条件。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;署名 — 您必须按照作者或者许可人指定的方式对作品进行署名。&lt;/li&gt;
&lt;li&gt;相同方式共享 — 如果您改变、转换本作品或者以本作品为基础进行创作，您只能采用与本协议相同的许可协议发布基于本作品的演绎作品。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体信息请查看&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/deed.zh&#34;&gt;署名-相同方式共享 3.0&lt;/a&gt;。&lt;/p&gt;

&lt;h1&gt;从一个软件说起&lt;/h1&gt;

&lt;p&gt;给大家介绍一个软件，comix。comix是一个由python和GTK+写成的漫画浏览软件。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持zip, rar， tar等格式的压缩包直接浏览&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;li&gt;有自己的用户群和wiki页面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是某天，我在Windows下使用comix的时候发现，在Windows下这货不支持压缩包直接浏览。而且手里有大量包是7z格式，木有办法使用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;检查源码，发现是/的问题。蛋疼的跨系统。&lt;/li&gt;
&lt;li&gt;根据网络上的提示，我发现有两个解决问题的方法。
&lt;ul&gt;
&lt;li&gt;使用封闭免费软件，例如honeyview，然后转跳到问题3&lt;/li&gt;
&lt;li&gt;自己修掉这个bug，反正只有一处，然后转跳到问题4&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;7z格式木有办法，只能苦等最新版本出来，完了。&lt;/li&gt;
&lt;li&gt;需要7z支持，自己又做了一个7z支持的补丁，从此所有漫画都可以直接浏览&lt;/li&gt;
&lt;li&gt;我希望向官网提供我的补丁，发现软件已经失去维护&lt;/li&gt;
&lt;li&gt;在寻找的时候，我发现有爱好者维护了一个新的分支，mcomix。解决了很多历史bug，同时支持了7z&lt;/li&gt;
&lt;li&gt;原来在问题2上，有一个隐藏选项，直接用mcomix，完了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这说明，在你想出一个需求的时候，最好先问问资深用户，是不是已经被解决了。很多时候，不要重复造轮子。&lt;/p&gt;

&lt;h1&gt;修改源码？听起来好像很麻烦&lt;/h1&gt;

&lt;p&gt;如果不是职业程序员，还是别想了。调试软件和修改源码需要专业知识（当然，不需要是计算机系出身，但是需要专门的学习）。但是掌握技巧后，修改一个bug并不是很困难。然而，拥有修改源码的能力，表示这个软件和那些“你无能为力”的软件有所不同。&lt;/p&gt;

&lt;h1&gt;神码叫做自由软件&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;无论如何，你可以自由使用。这隐含了软件是免费的（或者满足一定条件下免费）。&lt;/li&gt;
&lt;li&gt;源码开放。用户有研究如何使用的自由。&lt;/li&gt;
&lt;li&gt;重新发布源码。用户可以让别人使用，或者包含在其他产品中使用。&lt;/li&gt;
&lt;li&gt;改善软件。用户有改善软件的自由。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，自由软件的前提是，软件必须是开源软件。&lt;/p&gt;

&lt;h1&gt;两个软件的不同遭遇&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Foxpro VS Sql Server&lt;/p&gt;

&lt;p&gt;老计算机用户都应当记得foxbase和foxpro这两个软件。当年风光一时的数据库软件，在被微软收购后，就黯淡无光了。尽管退出市场的主要原因是因为单机开发模式并不适应网络大规模开发，但是这只需要设立一个网络层就可以解决。微软在收购Sql Server后，为了保证其市场地位，收购并雪藏了foxpro。目前该软件已经停止开发，最新版本的支持也即将过期。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mysql VS Oracle&lt;/p&gt;

&lt;p&gt;同样可怕的事情发生在mysql身上，做web开发的应该无人不知其大名。在Oracle收购后，Mysql也面临和foxpro同样的遭遇，更巧的是，他们同样是数据库类软件。
然而Oracle无法雪藏Mysql。因为一旦Oracle雪藏Mysql，其他人可以继续Mysql的某个开源分支继续开发一个完全不同的东西。Mysql的创始人之一，Michael Widenius支持这个做法。
因此，直到目前为止，Oracle都没有停止对Mysql的支持。
当然，由于未来的风险，一些人在选择新数据库的时候转向了PostgreSQL，或者其他选择。然而已有的系统不会受到影响，已经学了Mysql的用户也不会受到影响。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果当年Mysql是闭源，那么。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;很多基于Mysql的改造是不可能的，例如mysql proxy。&lt;/li&gt;
&lt;li&gt;今天Mysql管理员大概就得赶快再学些别的东西。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;自由软件有版权么？&lt;/h1&gt;

&lt;p&gt;有，版权是一个人完成一个产品后自然具备的权力。开放源码并不剥夺这个权力。一个人完成了一本小说，并让别人观看了，难道他就失去版权了么？我们一般在谈论版权的时候，往往和其他权力混淆起来。实际上，版权这个东西，其实指的是著作权。基本权力包括两种，人格著作权和财产著作权。衍生权力就更多了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;人格著作权
&lt;ul&gt;
&lt;li&gt;公开发表&lt;/li&gt;
&lt;li&gt;署名&lt;/li&gt;
&lt;li&gt;扭曲&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;财产著作权
&lt;ul&gt;
&lt;li&gt;复制&lt;/li&gt;
&lt;li&gt;公开口述&lt;/li&gt;
&lt;li&gt;公开播送&lt;/li&gt;
&lt;li&gt;改编&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自由软件主要放弃的，是对衍生权力的追究。即，作者授权你，在一定的条件下，可以进行合法的复制/改编，而不追究你的责任。但这不表示作者放弃版权。&lt;/p&gt;

&lt;h1&gt;授权协议&lt;/h1&gt;

&lt;p&gt;既然作者授权你如何如何，那么这就算是一份授权协议。我们下面列一下常见的授权协议：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;封闭协议
&lt;ul&gt;
&lt;li&gt;最终用户协议（EULA）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;开源协议
&lt;ul&gt;
&lt;li&gt;LGPL：修改源码后不得闭源，新增代码可以不采用同样许可证，源码修改处不需要说明文档&lt;/li&gt;
&lt;li&gt;Mozilla：修改源码后不得闭源，新增代码可以不采用同样许可证，源码修改处需要说明文档&lt;/li&gt;
&lt;li&gt;GPL：修改源码后不得闭源，新增代码必须采用同样许可证&lt;/li&gt;
&lt;li&gt;BSD：修改源码后可以闭源，每个修改的文件不必放置版权说明，衍生软件不得用你的名字做广告&lt;/li&gt;
&lt;li&gt;MIT：修改源码后可以闭源，每个修改的文件不必放置版权说明，衍生软件可以用你的名字做广告&lt;/li&gt;
&lt;li&gt;Apache：修改源码后可以闭源，每个修改的文件都必须放置版权说明&lt;/li&gt;
&lt;li&gt;cc：创作共用协议，包括几种变化（by：署名，nc：非商业使用，nd：禁止演绎，sa：相同方式）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;这么多授权，蛋疼不？&lt;/h1&gt;

&lt;p&gt;授权是从血泪教训中衍生出来的。我们下面讲一个开源的例子，大家非常熟悉的视频播放器&lt;/p&gt;

&lt;p&gt;在以往，个人电脑只能使用微软开发的MPEG-4 Codec，即MS MPEG4 V1、MS MPEG4 V2、MS MPEG4 V3的系列编码核心。其中以MS MPEG4 V3的画质最好。不过其只可用在ASF文件，但这个文件格式是封闭的。故此网上有些黑客将其改写为著名的MPEG4 Codec DivX 3.11。&lt;/p&gt;

&lt;p&gt;但问题是，DivX 3.11的基础技术是非法盗用微软的，无法进行更广泛的产品化及生产硬件播放机。因此，一些精通视频编码的工程师（包括原DivX 3.11的开发者）成立了一家名为DivX Networks Inc.的公司，简称DXN。他们主导了完全符合ISO MPEG4标准的Open DivX CODEC的开发，并吸引了许多软件高手参与。这时，主要的编程工作是由DXN来做，但很多技术上的难题却是由开放源代码社区帮忙解决。&lt;/p&gt;

&lt;p&gt;但因为整个计划并不是根据GPL开发的，而是LGPL，因此在Open DivX即将成形时，DXN 借此漏洞将其闭源，结果使众多开放源代码社区的义工感到被出卖。也是因为这个原因，整个 0day 组织永远的拒绝了 DXN 公司的 DivX 格式。&lt;/p&gt;

&lt;p&gt;而原Open DivX计划的义工最后决定在最后一个Open DivX版本的基础上，编写XviD（将DivX反过来写）以继续原Open DivX的目的。&lt;/p&gt;

&lt;p&gt;大约1年后，Xvid计划的开发者重写了所有代码，并依照GPL发布（而不再是LGPL，所以谁要是想用它做成产品而不开放源代码是非法的）。但因为某些国家如美国，日本有软件专利法，使得其在该地区可能出现法律纠纷。因此，Xvid官方站点只提供源代码下载，用户只可由第三方站点下载第三方的安装档。&lt;/p&gt;

&lt;p&gt;* 摘自&lt;a href=&#34;http://zh.wikipedia.org/wiki/Xvid#.E6.AD.B7.E5.8F.B2&#34;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;对于非法的侵权，自由软件可以怎么办&lt;/h1&gt;

&lt;p&gt;Libav（旧称：FFmpeg）是一个自由软件，可以运行音频和视频多种格式的录影、转档、流功能，包含了libavcodec ─这是一个用于多个专案中音频和视频的解码器库，以及 libavformat ——一个音频与视频格式转换库。&lt;/p&gt;

&lt;p&gt;由于Libav/FFmpeg是在LGPL/GPL协议下发布的（如果使用了其中一些使用GPL协议发布的模块则必须使用GPL协议），任何人都可以自由使用，但必须严格遵守LGPL/GPL协议。目前有很多播放软件都使用了Libav/FFmpeg的代码，但它们并没有遵守LGPL/GPL协议，没有公开任何源代码。Libav/FFmpeg 社区便将这些违反协议的公司/组织/个人的网址粘贴“耻辱大厅”（又叫“耻辱柱”）上，并与这些公司/组织/个人商讨如何解决版权争议。&lt;/p&gt;

&lt;p&gt;* 摘自&lt;a href=&#34;http://zh.wikipedia.org/wiki/Libav&#34;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://libav.org/shame.html&#34;&gt;耻辱柱地址&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The KMPlayer, issue tracker entry&lt;/li&gt;
&lt;li&gt;MediaCoder, issue tracker entry&lt;/li&gt;
&lt;li&gt;QQPlayer, issue tracker entry, reproduced 2009-11-04&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;自由软件的优劣&lt;/h1&gt;

&lt;p&gt;使用自由软件，有一点很大的劣势。如果你是商业软件用户，那么软件公司需要始终保证你的售后。&lt;/p&gt;

&lt;p&gt;用户： 您好，我的电脑开不了机器了。
客服： 请问您电源插了没有？
用户： 阿，好的，问题解决了，谢谢。&lt;/p&gt;

&lt;p&gt;然而使用自由软件就意味着两件事：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果软件造成其他损失（例如停产，错误，硬件损坏，或者造成使用者被起诉），软件作者是不负任何责任的（插一句，这也是我不建议使用盗版的最主要原因）&lt;/li&gt;
&lt;li&gt;如果软件有问题，那么需要等到有人对这个问题有兴趣并进行修复。
&lt;ul&gt;
&lt;li&gt;有些软件的修复速度很惊人。我见到最快的是10分钟，不开玩笑，软件是gitstat。
中文编码问题，修复只要一行，作者10分钟内就修复了问题，一小时内发布了新的包。&lt;/li&gt;
&lt;li&gt;有些则是慢的惊人。据说某些大型系统（不点名）里面最长的未修复bug长达10年。。。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不过好在，自由软件也有着封闭软件没有的优点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果你对某个特性不舒服，你可以很容易的修改他。如果你不是程序员，你可以指望有个程序员一样对这个事情觉得不舒服。&lt;/li&gt;
&lt;li&gt;无论如何，你始终可以得到某个版本的软件，哪怕作者已经停止维护（例如msf-abbrev），进监狱（例如raiserfs4），或者已经挂了（PKZIP）。
自由软件唯一被废弃的理由就是不再有人使用了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;源码开放，安不安全&lt;/h1&gt;

&lt;p&gt;自由软件社区有一个理论，足够多的眼睛。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;足够多的眼睛能够发现软件的一切问题，就是说，软件的使用者和关注着够多的情况下，软件的bug很快就会被发现和消除。&lt;/li&gt;
&lt;li&gt;密码学说，安全性依赖于本身机制的安全性，而非黑盒子。即其他人即使知道了你的机制，也无法攻破系统。
而依赖黑盒子的系统，一旦盒子里面的把戏泄漏，要换一个盒子就要很高昂的成本。&lt;/li&gt;
&lt;li&gt;当然，这并不表示封闭软件是依赖于黑盒子保证其安全的。但是是否如此，你不知道，我也不知道。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;自由软件如何盈利&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;卖服务，例如RedHat。虽然软件不要钱，但是咨询，要钱，修Bug，要钱，维护，要钱。&lt;/li&gt;
&lt;li&gt;卖授权，例如GhostScript。由于GhostScript的源码是GPL发布，使用GS进行重发布的人只有几个选择。
&lt;ul&gt;
&lt;li&gt;开放自己的源码&lt;/li&gt;
&lt;li&gt;使用Adobe的库&lt;/li&gt;
&lt;li&gt;自己写一套&lt;/li&gt;
&lt;li&gt;违反版权，并被告上法庭&lt;/li&gt;
&lt;li&gt;买AFPL的授权&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;伸手要钱，例如Mozilla。软件的流行会给厂商带来非直接的好处。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>参与开源软件的几个问题详说</title>
      <link>https://shell909090.github.io/blog/archives/1848/</link>
      <pubDate>Fri, 01 Jul 2011 11:16:19 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/1848/</guid>
      <description>&lt;p&gt;我刚写了一篇关于参加开源软件的，网上看的人是一堆一堆的。我就再多废话两句，说说我对参与开源软件的几个看法。&lt;br /&gt;    参与开源软件，首先要弄明白，你为什么要参加。很多人很热情，想着为世界贡献就来了。热情是好事，可是开源软件不需要理想主义者。在从事开源软件前，你一定要明白，你参加开源软件的目的在哪里。&lt;br /&gt;    有些人比较功利，也就比较简单，如果你希望参与开源项目，留名找工作。那你最好就是帮忙翻译。一方面，翻译文档对技术没有过高要求。另一方面，这确实也是参与了开源项目。而且从效果来看，熟悉一个项目首先就要熟悉文档。如果文档都是由你来翻译的，还有谁比你更熟悉文档呢？当老板问，谁熟悉tornado的时候，别人都说，我用过。你说的是，这玩意的中文文档是我翻译的。这对将来找工作是个很有利的加分。类似可以做的事情还有写文档，或者是使用手册、心得、入门指引，HOWTO之类的。不过这些事情就要求你至少熟悉项目，有一定技术。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    如果你对现有的开软有想法，到不必一定直接加入。自己修改一下，做一个patch，然后发给项目的负责人说明一下情况。如果你的patch做的不算太次，那么项目管理者应该会表示感谢，并且接受。如果你常用这个项目，说不定他会给你一个可以提交的版本管理器账户。但是水准太差就不要凑热闹了，你的代码大家都看得到，丢脸不要丢到全世界去。记得一个空格引发的杯具么？（&lt;a href=&#34;http://www.oschina.net/news/19000/a-space-lead-disaster&#34;&gt;http://www.oschina.net/news/19000/a-space-lead-disaster&lt;/a&gt;&lt;span id=&#34;goog_2018086865&#34;&gt;&lt;/span&gt;&lt;span id=&#34;goog_2018086866&#34;&gt;&lt;/span&gt;&lt;a href=&#34;https://shell909090.github.io/&#34;&gt;&lt;/a&gt;）&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    如果你对各个开源项目都不满意，想做一个新的，独立的项目。我强烈建议你慎重考虑，毕竟现有很多项目的作者都不是傻瓜。新开项目的管理和推广是一个非常麻烦的问题，非常可能的是，你在很长时间内都得不到什么有效的支援，不得不一个人奋战。虽然有很多人很热情，但是他们很多不知道该做什么（否则本文就没有意义了），更糟的是空有热情但没有能力。&lt;br /&gt;    如果你是最后一个，只是对开源项目有热情。我觉得你就先别着急凑热闹了。为什么上面我说了好几次热情是好事，但是开软不需要空有热情的人？因为开软的程序员基本奉行一个原则，有空废话还不如多写两行代码。他们不会帮你培训patch的用法，版本系统的管理，bug系统用法，更不会给你解说某个函数实现的时候为什么不能调用另一个函数（当然，如果你的运气很好，也有人会）。参与一个开软，必须要自行付出时间精力去学习相关的知识。作为开软的程序员，最怕的就是一堆空有热情的用户/贡献者在那里叫嚷，为什么这个函数不能调用另一个函数？我用这个办法简化了代码，效果很好，打了一个补丁出来。同学阿，你没看以前的讨论么？在某种条件下，这会引发循环调用。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    热情是好事，不过这是在拥有正确的方法和良好的能力的前提下。如果你有热情，不妨从学习如何提问，如何融入社区，如何对项目进行打包和使用开始。而后逐步开始学习文档的编写、翻译。最后为项目打补丁，贡献代码。&lt;br /&gt;    另外就是为哪些项目提供补丁。这个没什么好多说的，最好选择你常用的。不常用的项目，你也没那个功夫，坚持不了多久。而且通常来说，为小项目提供补丁比大项目管用，你的补丁会更加受到重视。&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何参与一个开源项目</title>
      <link>https://shell909090.github.io/blog/archives/1821/</link>
      <pubDate>Thu, 02 Jun 2011 11:03:47 +0800</pubDate>
      
      <guid>https://shell909090.github.io/blog/archives/1821/</guid>
      <description>&lt;p&gt;最近很多人在问如何参与一个开源项目。其实个人觉得这是一个非常傻的问题，不过还是回答一下，期望这帮人记得用google搜到这个角落，免去论坛上月经一样的天天看到这种傻问题。&lt;br /&gt;    为什么说傻？因为这个问题和“如何捐钱”一样，是个没法直接回答的问题。你总要有一个明确的捐献目标，或者是明确的目标项目。世界上没有一个组织，名叫“开源软件”。无论你的目标是什么，你必须找到一个确定的开源项目进行参与。&lt;br /&gt;    在哪里能够找到开源项目？这很不好说。一方面，你可以在&lt;a href=&#34;http://sf.net&#34;&gt;sf.net&lt;/a&gt;(需要翻墙)和&lt;a href=&#34;http://code.google.com&#34;&gt;code.google.com&lt;/a&gt;(最好翻墙)找到相当多的开源项目，也可以在github之类的地方寻找。另一方面，你也可以在debian里面找。很多包里面附带了项目的主页，如果你觉得这个包很不错，希望做贡献，可以按照链接找过去。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    如何挑选合适的开源项目？首先要和你的兴趣相符合，或者能够满足你参与开源的目标。例如你对算法非常感兴趣，让你加入一个ERP系统的定制，成天修正繁琐的业务问题，可能就会让你觉得兴趣全无。其次最好参与一些中等复杂程度，具有活力的，比较缺人的项目。像linux kernel这种规模巨大，参与人员众多的项目，本身就是一个非常巨大的工程。你要了解这个工程需要很长时间，但是大部分你觉得有价值的事情都已经有人在做了。&lt;br /&gt;    如何开始？具体可以先给项目管理者发一封邮件，说明自己的目标，兴趣，能力，时间，然后问问他们是否需要自己的贡献。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    大多数项目最缺的人才，不是程序员。通常一个开源项目，有几个程序员在做是不成问题的。但是大部分的开源项目缺乏一些周边人员，例如到各个组织中推广项目，获得反馈。和各种dist和开源平台协调，负责收集bug，控制项目发行，进行打包。负责项目的测试和文档工作，以及英文文档的翻译工作。这些工作并不需要专业知识，但是琐碎而且费时，程序员并不大乐意做。而且控制项目的release，还有进行协调要有一定的经验，也不是程序员擅长的领域。所以相当多的开源项目，就是程序员拍脑袋写，然后用户两眼一摸黑的用。没有合适的文档，没有各种系统的适用包，没有bug和用户意见反馈。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    因此贝壳也请求，所有看到文章，且有志于贡献自己的力量的人，都可以考虑参与开源项目。你不需要会写程序，也不需要精通电脑。你需要做的可能就是将文档从英文翻译成中文，或者不断使用一个软件并找出其中不合理的地方。在中国，捐献金钱是容易的，但是却不透明，也不自由。你不确定你的金钱捐献给谁，他收到多少，是否真的需要。然而如果你选择某个开源软件做捐献，你可以选择自己为谁做出贡献，也会受到全体开源软件用户的感激。&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>