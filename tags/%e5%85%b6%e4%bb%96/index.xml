<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>%E5%85%B6%E4%Bb%96 on Shell&#39;s Home</title>
    <link>https://shell909090.org/tags/%E5%85%B6%E4%BB%96/</link>
    <description>Recent content in %E5%85%B6%E4%Bb%96 on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Mar 2014 10:49:01 +0800</lastBuildDate>
    <atom:link href="https://shell909090.org/tags/%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>台湾反服贸占领立法院中，网络干了点什么</title>
      <link>https://shell909090.org/blog/archives/2600/</link>
      <pubDate>Fri, 21 Mar 2014 10:49:01 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2600/</guid>
      <description>&lt;p&gt;短文，直接说吧。今天在facebook上看到，有帮台湾朋友组装了两台大功率的基台，把信号直接打到立法院里面。我在图片上看到了一堆天线，不少Cisco的设备，还有基台车。好像还有朋友拿着易拉罐和炒菜锅不知道是帮忙还是帮倒忙。&lt;/p&gt;

&lt;p&gt;简单点说，基本架构就是外面架一个基台(推测使用5G频率)，用定向天线和里面的client连通，出口用4G和基台车连接。然后里面的client走有线网和多个AP连接起来，每个AP分散部署，分享基台到client之间的链路。&lt;/p&gt;

&lt;p&gt;目前看到的效果，信号已经打到立法院里面了。连警察人墙都可以用网——只是他们没有密码而已。&lt;/p&gt;

&lt;p&gt;——结果今天早上发现立法院内其实有网，而且网速快过4G。所以又反过来架设——内部多个AP分享出去后，向外面打信号，外面又架设多个AP把信号分享给会场的上万人群。&lt;/p&gt;

&lt;p&gt;上万？想想都要疯啊。&lt;/p&gt;

&lt;p&gt;03-21T14:42: 根据看到的最新消息。3G和WiMax都爆满，而且整个立法院内信号密度过高。因此退回最原始的方案——拉一根超长网线解决。啊啊，这不是白折腾了么？&lt;/p&gt;

&lt;p&gt;03-23T12:00: 在会场架网络的朋友，在google plus上分享了细节。细节在这里：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://plus.google.com/+DAVIDLIFUHUANG/posts/WKP2qTDJypA&#34;&gt;https://plus.google.com/+DAVIDLIFUHUANG/posts/WKP2qTDJypA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;摘抄如下：&lt;/p&gt;

&lt;p&gt;我來解釋一下我在立法院內部遇到的網路問題, 同時也說明這是我看到的問題, 或許 rex 有不一樣的見解, 那就再請 rex 另外闢文說明,&lt;/p&gt;

&lt;p&gt;我剛開始進去的時候, 我原來以為 g0v 裡面有人, 不過實際上應該是我搞錯意思, 所以我就傻傻的進去了, 不過我個人是覺得, 我們應該要維持裡外訊息的暢通跟正確性, 所以我應該要做一點事情, 畢竟我只會弄網路, 所以我就真的去想辦法弄網路了 XD&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;人很多, 3G 全部癱瘓, 所以早就該換 LTE 了, 對吧 XD&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3G 全部癱瘓, 所以大家都用 WIMAX, 這次 WIMAX 的表現還不錯, 讓我覺得以後來台北參加活動還是應該花點小錢租 WIMAX, 畢竟正確的訊息傳遞可以避免很多不必要的麻煩發生, 同時沒有人用的服務遇到人多的時候就是好服務, 因為它沒有人用, 但是目前沒有 5G 無線網路的 WIMAX 攜帶型無線網路熱點, 這是一個很嚴重的問題 XD&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WIMAX 多, 大家都開無線網路熱點來分享 WIMAX 的服務, 所以造成了無線網路封包的的碎片化&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;立法院本來就有無線網路系統, 在一個會議室裡面有一堆一樣的 ESSID, 同時又分散在不同的頻道上, 然後這些頻道上面又有很多一樣的 ESSID 但是分散在不同的 AP 上面, 這樣會發生什麼事情呢? 就是無線網路使用效率的降低, 因為沒有加密, 又是同樣的 ESSID, 也沒有做子網路的切割, 當無線網路用戶端大量增加的時候, 同樣的無線網路 ESSID 分散在不同頻道跟不同 AP 的狀態下, 廣播封包就亂竄, 無線網路頻道的使用效率就非常差, 因為封包破碎產生的重送率大大提昇&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 2.4G 的可用頻道少, 現場重複的 ESSID 又太多, 加上有限空間裡面又有大量的 WIMAX 熱點, 最後就導致無線網路可用性很低的問題, 在那個環境中, 你的無線網路可以用的狀況, 你在熱點半徑一公尺左右的範圍內, 如果超過這個範圍又發生直線路徑上面有阻礙物發生繞射的問題的話, 你的無線網路就變得很慢很慢&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;實際上發生的狀況就是我們在靠近青島東路 2F 的媒體席那邊放無線基地台, 但是我在議事廳前面的位置要用 x220 連線的時候, 會發生 ESSID 看得到, 但是當我點下連線按鈕的時候, 那個 ESSID 就不見了, 然後 windows 7 就告訴你, 我沒有辦法連接這個網路&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最後的解決方式就是我們用一條很長的網路線, 從基地台直接拉到前面活動執行單位的位置, 讓訊息發布人在連接網路服務的時候使用以太網路連線, 這樣就可以避免無線網路密度太高產生的干擾問題&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;那要怎麼樣解決無線網路密度太高造成的干擾問題, 解決方式只有大量的小功率無線網路 AP 加上不重複的 ESSID 名稱跟子網路切割, 缺點是無線網路連線沒有辦法漫遊, 不過說真的, 我們現在也不建議一邊走路一邊滑手機, 如果有需要漫遊的服務, 再建立另外一個支援無線網路漫遊的 SSID 專門解決漫遊這件事情, 這樣我才覺得比較合理,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;當沒有漫遊的狀態下, 你到同一個建築物的另外一個小空間的時候, 也就是再重新連接你可用的無線網路 ESSID 就好, 不過目前你看得到的無線網路服務都是以訊號的涵蓋率為考量, 所以就很難解決這樣的問題, 這需要時間, 就像從 AMPS, GSM, UMTS, LTE 這樣的過程一樣, 速度越來越快, 但是手機發射功率越來越小&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;無線服務設備的連接效果取決於訊號的距離跟功率, 還有同樣的頻道裡, 使用設備的數量, 當你要服務相當多的設備的時候, 功率要變小, 基站密度要拉高, 還要用不同的方向來提高可用頻道的重複率&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我不敢說我說的是絕對, 但是我有實際上試著解決這樣的問題過, 所以應該還有一些可信度, 如果有任何問題歡迎下面留言討論, 如果有需要規劃服務的話也可以跟我連絡, 謝謝﻿&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>从齐治科技辞职了</title>
      <link>https://shell909090.org/blog/archives/2445/</link>
      <pubDate>Tue, 16 Jul 2013 09:52:45 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2445/</guid>
      <description>&lt;p&gt;最近贝壳又一次的辞职了。&lt;/p&gt;

&lt;p&gt;离职的原因还是很单纯的，主要是管理上跟不上老板思路。既然如此，那就不要勉强为之了。&lt;/p&gt;

&lt;p&gt;我很感激现在的公司给我的帮助。毕竟在现在的公司，我的技术得到了长足的进步。同时，也给了我很多把想法变成现实的机会。&lt;/p&gt;

&lt;p&gt;目前我的意向是七牛云存储。在此感谢他们给我的机会，希望能在他们那里玩到一些有趣的东西。&lt;/p&gt;

&lt;p&gt;谢谢几位朋友给我的机会，我不愿意参与你们的项目并不是不看好你们。一方面，要同时做好下属和朋友是非常困难的。作为老板，不能因为私人的交情而偏颇公司的业务。按孔明的说法，就是“宜付有司论其刑赏”。而作为朋友，必然嘻嘻哈哈吐槽打屁。对着一个“不可因私废公”的人要放松下来，神经要不是一般的粗才行。&lt;/p&gt;

&lt;p&gt;另一方面，目前贝壳还没有孩子，而创业是一个全力投入的事情。万一创业到一半变成超级奶爸，事情就比较被动，害人害己。所以我目前更偏好至少第一轮天使投资过之后的公司。有创业的氛围，紧张但是不紧迫。我更喜欢正常的生活。每天都有时间做点自己的事情，有点自己的小娱乐，研究点自己的小技术。可以想像的是，在孩子到一定年岁前，我都很难承担从头创业的巨大风险了。&lt;/p&gt;

&lt;p&gt;最后，我也不认为自己有在创业团队中能够hold住大部分东西的能力（这并非出自我的妄自菲薄，而是基于实际评估的结果）。我希望在新的公司，至少做一些特定方面的事情，积累一定经验。&lt;/p&gt;

&lt;p&gt;要下海弄潮，先要搞清楚自己的斤两。其中最重要的两条，就是自己是否能承受风险，和自己是否能撑起一片天。既然两者目前都还欠缺。所以，请原谅我难以回报你们的厚爱。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>语音能力对比</title>
      <link>https://shell909090.org/blog/archives/2421/</link>
      <pubDate>Fri, 31 May 2013 16:01:47 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2421/</guid>
      <description>&lt;p&gt;对比了一下google voice和科大讯飞的识别能力。google voice手里没货，用的是youtube上的第三方测试视频。例子也是抄的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+----------+-------------+----------+
|          |google voice |讯飞      |
+----------+-------------+----------+
|提醒      |Y            |Y         |
+----------+-------------+----------+
|定时      |Y            |N         |
+----------+-------------+----------+
|播放歌曲  |Y            |Y         |
+----------+-------------+----------+
|关闭无线  |Y            |N         |
+----------+-------------+----------+
|天气      |Y            |Y         |
+----------+-------------+----------+
|静音模式  |Y            |N         |
+----------+-------------+----------+
|搜索地图  |Y            |Y         |
+----------+-------------+----------+
|搜索路径  |Y            |Y         |
+----------+-------------+----------+
|搜索商家  |Y            |弱        |
+----------+-------------+----------+
|时间搜索  |Y            |弱        |
+----------+-------------+----------+
|时区查询  |Y            |N         |
+----------+-------------+----------+
|节日查询  |Y            |Y         |
+----------+-------------+----------+
|汇率      |Y            |Y         |
+----------+-------------+----------+
|汇率换算  |Y            |Y         |
+----------+-------------+----------+
|进制转换  |Y            |N         |
+----------+-------------+----------+
|单位换算  |Y            |N         |
+----------+-------------+----------+
|数字计算  |Y            |N         |
+----------+-------------+----------+
|航班查询  |Y            |Y         |
+----------+-------------+----------+
|火车查询  |Y            |Y         |
+----------+-------------+----------+
|股票查询  |Y            |Y         |
+----------+-------------+----------+
|定义查询  |Y            |Y         |
+----------+-------------+----------+
|区号      |Y            |N         |
+----------+-------------+----------+
|商家号码  |Y            |Y         |
+----------+-------------+----------+
|打电话    |Y            |Y         |
+----------+-------------+----------+
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>关于微信信令问题的补充说明</title>
      <link>https://shell909090.org/blog/archives/2389/</link>
      <pubDate>Mon, 15 Apr 2013 09:23:35 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2389/</guid>
      <description>&lt;p&gt;上次说的扯淡，不是指技术细节，而是商业讨论。技术细节上，我相信心跳一定是会对网络带来负担的。&lt;/p&gt;

&lt;p&gt;空口无凭，我们就用上文给出的几个数据来计算一下。按照用户花10元计算，看看商业上他可以得到什么，得到了什么。&lt;/p&gt;

&lt;p&gt;ayanamist告诉我，他们那里流量计费大约是10元30M，上海这里我用的比较多的是8元80M，我们按照10元100M计。我找到联通数据流量的最低购入费用是35元/1G，合10元250M。&lt;/p&gt;

&lt;p&gt;假定我用10元100M套餐，在手机上使用微信。微信的心跳相当于5分钟连接一次服务器。这个比联网使用当然消耗更大。但是，请思考一下这个问题。移动运营商可以接受10元250M的用户，但是无法接受10元100M的用户一天连接300次服务器？也就是说，一天连接300次服务器的成本比2.5倍流量带来的负担还重？&lt;/p&gt;

&lt;p&gt;我的判断是，还是2.5倍流量的负担更重。微信真正的问题，还在于他动了利润更加高的业务——短信。也就是说，我认为，移动运营商可以忍受一天连接300次服务器，但是无法忍受高收入业务被边缘化。&lt;/p&gt;

&lt;p&gt;作为佐证，我提出了下面一个概念验证。如果我们使用数据网络打电话如何？&lt;/p&gt;

&lt;p&gt;当我们需要给对方打电话时，使用短信呼叫对方上线（作为thomas提出的体验问题的回答。app自动发送短信和接收回信，用户无须手工），然后利用数据网络拨打电话。这样每次接通双方都需要0.1元短信费用，和每小时2元的数据流量费用。当然，对于某些特殊区域，有电话无网络的时候，或者紧急情况下，使用普通电话呼叫。&lt;/p&gt;

&lt;p&gt;我测试了微信的语音通话功能在3G下的效果，比普通电话略差，但是基本可以接受。如果我们可以如此操作，就可以免长途和漫游费用，低成本的进行语音通话。这个模型没有任何心跳压力，流量的使用也和普通3G类似。移动运营商可能接受这样的一种方案么？&lt;/p&gt;

&lt;p&gt;怎么可能。真发生这种事，移动连讨论都没有就直接禁用这套服务了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.4G网络冲突问题</title>
      <link>https://shell909090.org/blog/archives/2317/</link>
      <pubDate>Wed, 09 Jan 2013 17:22:55 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2317/</guid>
      <description>&lt;p&gt;由于2.4G是各个国家共同保留的一个非牌照频率，如果商家打算做什么无线通信的玩意，又不打算申请频率，那就只有用2.4G。因此，其实很多设备在无意中都在使用这个频率，他们之间会互相干扰的。
&lt;ul&gt;
    &lt;li&gt;蓝牙&lt;/li&gt;
    &lt;li&gt;无绳电话&lt;/li&gt;
    &lt;li&gt;部分微波炉&lt;/li&gt;
    &lt;li&gt;无线网卡&lt;/li&gt;
    &lt;li&gt;无线门铃&lt;/li&gt;
    &lt;li&gt;深圳某地铁公司的信号闭塞系统。。。&lt;/li&gt;
&lt;/ul&gt;
某种设备的信号，对其他设备来说就是噪音。高速传输设备，尤其是wifi，在高噪音的环境下速度很慢。&lt;/p&gt;

&lt;p&gt;因此，建议在复杂环境下的wifi用户尽速迁往5G频率。你家要是无线环境很干净（例如我这里，屋子电磁屏蔽好），那就不是很着急。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2013南方周末事件后续1</title>
      <link>https://shell909090.org/blog/archives/2315/</link>
      <pubDate>Tue, 08 Jan 2013 09:56:26 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2315/</guid>
      <description>&lt;h1&gt;事实变化&lt;/h1&gt;

&lt;p&gt;首先和大家道歉。在上一篇《传播学角度分析2013南方周末事件》中，我提到一个事实，就是审稿的人自己动手。现在事情还原出来，并非如此。从描述来看，动手的还是报社总编和副总编。具体可以看&lt;a href=&#34;http://cn.ibtimes.com/articles/19028/20130107/southern-weekly.htm&#34;&gt;《南方周末》编辑部披露2013新年特刊制作过程 指违反编辑流程&lt;/a&gt;。这总算解我一个心头疑惑，为什么宣传部会干出这么蠢的事情，公然违反编审原则。&lt;/p&gt;

&lt;p&gt;当然，这不是说他们不傻。要评价的话，大概就是40的智商可以升到60了。为什么？尽管没有自己动手，但是在审稿通过上严重违反流程，直接导致新闻事故。&lt;/p&gt;

&lt;h1&gt;什么是新闻流程&lt;/h1&gt;

&lt;p&gt;我曾经南方日报社出过差，貌似听过他们的编辑讲解采写流程。不过脑子里没印象了。现在脑子里记得是其他报业的采写流程，而且也不真切。要是有编辑看到里面有错，麻烦帮我纠正。&lt;/p&gt;

&lt;p&gt;首先我们从采写说起。报业得到新闻线索，先是记者得去现场，这个称为采写。采写回来的稿件称为待编稿，然后就是编辑部的事情了。&lt;/p&gt;

&lt;p&gt;编辑部有几种来源，记者采写，新华社稿件，还有对于大型事件，编辑可以自己写点评。无论哪种来源，编辑对原始材料进行编辑，交给版面主编审查。这一步主要是看文章方向，立意，尺度，如果不合格，就退回去再改。&lt;/p&gt;

&lt;p&gt;编辑大约是下午2点-4点上班，要在晚上8点前搞定稿件。&lt;/p&gt;

&lt;p&gt;通过版面主编审核的稿件，就是基本就初稿了。然后稿件会交给主编，校对，审读走流程。这个流程每个报业都不一样，我记得的流程是主编，审读，校对，不知道有没有错。流程走过后，稿子就会存在系统里面，由排版部门进行排版。根据版面的特性，排版部门也会有微调。例如删去几个字，保持行的利用率等。但是一般不做内容调整了。&lt;/p&gt;

&lt;p&gt;排版大约是晚上9点到11点之间，最晚不能晚于12点。&lt;/p&gt;

&lt;p&gt;排版后，好像会由版面主编，总编，和宣传部的人再看一遍，把握文章尺度和原则。如果这里过了，版面主编，宣传部的人，总编会在版面上签字，确认内容可以出版。这个叫签版，谁签版谁负责。这期间编辑不能走。因为如果出现问题，需要再修改。如果被枪毙，就需要用替换稿件填充。所以编辑要随时待命。&lt;/p&gt;

&lt;p&gt;12点前，逐个版面签字确认后，就送印刷厂了。印刷厂最迟2点拿到稿子，大约4-6点左右完成印刷，然后6点前就要由物流发行到全市。迟了就是新闻事故。常规日报就是这样出出来的。&lt;/p&gt;

&lt;h1&gt;这次呢？&lt;/h1&gt;

&lt;p&gt;从更新一些的信息来还原，这次的事件，流程是这样的。&lt;/p&gt;

&lt;p&gt;编辑写稿子，然后主编审核，给毙了。改了内容，和宣传部沟通后，给过了。到这里为止，和普通新闻稿件流程也没什么异常。&lt;/p&gt;

&lt;p&gt;然后去排版，排版过了，宣传部还要修改。从这里开始，问题就来了。传统上说，如果一篇文章到了排版流程，还是有异议。主编一般会用备稿替换。但是题词这么大个东西，没法换稿子，编辑又放假。所以主编和副主编根据宣传部指令操刀，跳过新闻流程，直接改内容。结局就是这么一份四不像的玩意。&lt;/p&gt;

&lt;p&gt;为什么不在修改后走流程呢？关键在于这个时间点。如果是晚上9-12点间，一切好商量。编辑还在，排版也在，校对都在。问题是时间一到，按照传统就OK了，大家都走人了。突然出现无法出版，要再召集大家回来走流程，就会拖过晚上2点的期限，导致来不及印刷，一样是新闻事故。&lt;/p&gt;

&lt;p&gt;当然，我从南方系看到的时间表和我记忆中并不一样。不知道是因为休假的关系（休假的内容需要提前做好），还是因为南方报业的时间本身就不一致。但是无论如何，如果内容修改拖到照排之前，出新闻事故几乎是必然的事情。&lt;/p&gt;

&lt;h1&gt;问题在哪里？&lt;/h1&gt;

&lt;p&gt;从一开始就有问题。对于不能替换的内容，一定是事先定稿。要干预修改都应当在定稿期间做。哪里有重要报道到上印刷机前才开始修的。所以事情可以定性，这是一个新闻流程事故。问题是谁是始作俑者。&lt;/p&gt;

&lt;p&gt;其次，万一出问题，也不应当强行修改。万不得已的情况下，删掉稿子，用备稿替换，重新编辑。当然这也是新闻事故，但是程度小很多，不至于搞到今天这样沸沸扬扬。然而对于特别重要版面，完全可能没有备用可选。&lt;/p&gt;

&lt;p&gt;目前的问题是，具体情况到底如何？只有员工的回忆和披露，没有调查，没有真相。我也觉得事情中有些蹊跷的地方，无法自圆其说。然而，编辑们的要求是调查真相，而不是一味的推卸，这是理性诉求。相反，是不是有某大佬事情，现在尚没有定论。然而某些人对此大动干戈，才是让人感到他在欲盖弥彰的原因所在。&lt;/p&gt;

&lt;p&gt;最后，对于引起群众热议的事情，不应当使用暴力手段。群众的特征是你不顺着他说，好事都能变成丑闻，何况原本就是丑闻。当然，以贝壳个人的分析，这未必是幕后的本意。很可能是事已至此，只能如此一搏以自救。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>传播学角度分析2013南方周末事件</title>
      <link>https://shell909090.org/blog/archives/2311/</link>
      <pubDate>Mon, 07 Jan 2013 01:24:28 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2311/</guid>
      <description>&lt;p&gt;也许blog又要被封了。不过管它呢。总是计较封与不封，自我审查内容，和墙内何异？
&lt;h1&gt;题记&lt;/h1&gt;
Freedom consists not in doing what we like, but in having the right to do what we ought.
— Pope John Paul II
&lt;h1&gt;始末&lt;/h1&gt;
不多评述，请看&lt;a href=&#34;http://zh.wikipedia.org/wiki/2013%E5%B9%B4%E3%80%8A%E5%8D%97%E6%96%B9%E5%91%A8%E6%9C%AB%E3%80%8B%E6%96%B0%E5%B9%B4%E7%8C%AE%E8%AF%8D%E8%A2%AB%E5%88%A0%E6%94%B9%E4%BA%8B%E4%BB%B6&#34;&gt;这里&lt;/a&gt;
&lt;h1&gt;评论&lt;/h1&gt;
之所以我会特意上来写一篇，是因为这严重的违反了传媒理论。我说的不是传媒自由，或者舆论监督。中国历来没这东西，我已经不是很奇怪了。然而传统上，管理媒体的手段叫做“述而不作“。白话来说就是挑话说。有些事情说，有些事情不说。有些不能不说的事情往轻里说，有些没啥大不了的事情往重里说。这种伎俩在宣传上是常规手段，即使以新闻自由而著称的美国，也不能免俗。你看共和党的报纸有骂自己人的么？都是轻描淡写吧？&lt;/p&gt;

&lt;p&gt;然而，挑话说的基础，就是说话的人和审稿的人必须分离，即编审分离。为什么分离？一方面，有一部分原因是因为审稿人并没有精力亲自操刀写所有的文章。然而另一方面，则是警惕一人稿的视角同一化问题。最后，也是最重要的。必须让编辑有权力不发稿件。如果编辑认为发稿件会严重影响他的声誉，他有权不发。如果稿子非发不可，往往会署名新华社稿，或者是化名稿。这是整个新闻系统的传统。&lt;/p&gt;

&lt;p&gt;在此之上，才是传媒管理手段。大部分传媒管理手段都是通过指令的形式下发。例如XX事件不许报，XX事件要重点报。不要想当然的认为传媒管理手段是破坏新闻自由，天下新闻何其多，天天写你没兴趣的东西，报纸不亏才有鬼。传媒管理手段在任何报业都必然存在，只是中宣部利用传媒管理手段表达自己的意志而已。好一点的媒体，这些指令都是公开的。例如某个事件不许报，会有明令，哪个范围不许报。糟糕一点的就是黑审查，对外只是含糊的说，这些东西不合格。编辑就得漫天猜，这又踩着哪路神仙的线了阿。&lt;/p&gt;

&lt;p&gt;本次事件和上述情况都不同。本次事件最恶劣的一点，就是强行删改作者稿件，还居然署原作者名。如果对稿件不满意，退。还不满意，删。这都是报业常态了。我们曾为报业做采编系统，业务逻辑中居然有三重审查系统。实际上只有第一重和质量管理有关，后两重都是意识形态管理。然而对内容不满，处理方式也是退稿，或者不让上。从来没听说过有业务需求是审稿者自己可以操刀修改稿件的。在系统中，唯一有权利又审稿又操刀的只有主编，而且主编操刀一般都会把名字列在首位，大半作者也觉得很光荣——如果不是被主编骂了个狗血淋头的话。&lt;/p&gt;

&lt;p&gt;然而本次事件首开先例，审稿者自己操刀修改内容。这本就违反常规流程。更SB的是，丫居然还改出一堆错误。短短的150字按语，被人挑出数个错误。这操刀者的水准可想而知——我觉得他的小学语文老师应当剖腹自尽以谢天下。&lt;/p&gt;

&lt;p&gt;得，既然出了新闻事故，总要有人负责吧。本来这种传媒责任是谁写谁负责，审查人员最多同责。然而作者很无辜阿——这TM不是我写的，写个新年题词还不多检查检查谨防出错阿。谁想到上面直接修改内容，还改出了错误。所以按道理说，让作者负责是不对的。不过估计这次上面拉不下脸，硬要搞作者，编辑们看不下去了。&lt;/p&gt;

&lt;p&gt;——想也知道，这种事情本来就不是自己问题。要是这么搞也可以，干脆别混了，反正哪天一个不小心也会流弹中到自己头上。编辑们必然人人自危。
&lt;h1&gt;现状&lt;/h1&gt;
配合官媒态度，还有夺权发声明的强硬手段，这必然是幕后黑手在自救。如果事情是最上面授权，早就全国指令下去，一字也不会多说了。必然是上面觉得这事情办的很蠢，在考虑是否要和此人做切割。幕后黑手狗急跳墙，试图做成铁案，好让自己脱身。
&lt;h1&gt;审查之殇&lt;/h1&gt;
未成年而夭则称殇，新闻审查已经是潮流，照例不应用殇字。然而和传媒比起来，审查和新闻管理手段确实如同小孩子一样。本次传媒对应上所犯下的最大错误是，使用传统媒体的手法处理新媒体，把听众当作没有思考能力的白痴来处理。这就如同白天却蒙着眼睛走路，捅到马蜂窝还不肯摘下一般可笑。&lt;/p&gt;

&lt;p&gt;我曾在大学学传播学的时候，和老师讨论过传播路径和审查机制。当时的共识是，对具备中心路径的传播模式，会产生审查。审查的效果是消除广告和不实消息，问题是信息可能被操纵。离散的传播模式则没有审查，好处是信息比较全面，坏处是广告和不实消息比较多。&lt;/p&gt;

&lt;p&gt;当时我就曾经想设计一种传播工具，具备消除广告和不实消息的能力，又不会被中心节点控制。作为结果，我给老师提出了一篇论文，论述了一种分布式系统——Diet。借助点对点信息传播模式工作，使用公钥签名信任体系鉴定个人。每个人和其他人会产生一些逻辑关系，每个人在阅读消息后，可以决定删除或者传递给下一个人。&lt;/p&gt;

&lt;p&gt;是不是很眼熟？是的，当时我没有能力实现的系统，和今天的微薄非常类似。当然，我当时并没有提出140字限制。而且在新闻自由的美国也不用考虑中心节点消除的问题。所以微薄的形态和我想象中略有不同。然而微薄确实实现了一个无中心管理的自媒体群，而且随着用户的完善还会产生过程流。&lt;/p&gt;

&lt;p&gt;如果审查继续下去，会不会有人把分布式的版本实现出来？我不知道。这太踩中宣部的线了。但是从理论上，这一工具完备，而且很难封锁。&lt;/p&gt;

&lt;p&gt;然而从本质上，破除审查的，并不是工具，而是每个人在畏惧之前的一小步。我们都是凡人，要我们无所畏惧的抵抗，或者为别人奋斗是不可能的。然而在我们屈从别人的意志，自我审查，抹灭良心之前，可以向前走一小步。这是个人的一小步，然而会是社会前进的一大步。我们不需要英雄，我们更不能够把希望寄托在英雄身上。“让某个人带着时代的意志奋斗”这种话就和“你什么都别做就好”一样，是彻彻底底的谎言。我相信，谎言无法替代真相。哪怕我们最终不能获得成果，然而顺应自己的良心，向前走的这一小步是非常重要的。也许这一小步，能为别人，为你个人带来短暂的光明。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于民用航空上禁止使用电子设备的分析</title>
      <link>https://shell909090.org/blog/archives/2307/</link>
      <pubDate>Sat, 05 Jan 2013 16:38:53 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2307/</guid>
      <description>&lt;h1&gt;适用对象&lt;/h1&gt;

&lt;p&gt;本文论述的电子设备，包括以下几类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不显式使用无线信号通讯，仅在工作时被动发出噪声的电子设备&lt;/li&gt;
&lt;li&gt;使用2.4GHz频段和5GHz频段的wifi类和蓝牙类短距离通信设备&lt;/li&gt;
&lt;li&gt;使用800MHz和1800MHz频段的长距离通信设备&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文论述的设备，不包括非法无绳电话等设备。尤其是不要把非法无绳电话当作普通的无绳电话，那玩意使用伞状天线，覆盖范围最高可以达30公里，根本就是私人设的无线电基台。使用频率又和飞机一致，飞机从上面过，通信马上就被干扰了。&lt;/p&gt;

&lt;h1&gt;飞机无线系统的工作状态&lt;/h1&gt;

&lt;p&gt;飞机自身也是大型机电设备，也会显式的使用无线进行通讯和导航，或者做系统控制（但是下面某个事故案例表明，使用无线作为系统控制是不可能的，飞行中的系统控制必然使用有线）。&lt;/p&gt;

&lt;p&gt;飞机主要会使用的无线用途包括两大类，通讯和导航。&lt;/p&gt;

&lt;p&gt;根据我在&lt;a href=&#34;http://www.xmyzl.com/know/21.htm&#34;&gt;这里&lt;/a&gt;找到的资料，飞机常规的通讯频率为118.000～135.975MHZ。同时，中国民用航空总局无线电管理委员会办公室的&lt;a href=&#34;http://www1.atmb.net.cn/wwbwy/readxw.asp?id=2087&#34;&gt;某份文件&lt;/a&gt;佐证了这一说法。因此，常规飞机的主要通讯频率为121.5MHz、243MHz两大频率段。&lt;/p&gt;

&lt;p&gt;而导航则比较复杂。如果是GPS导航，一般的L1频率段是1575.42MHz，L2的频率为1228MHz。而近距离的多普勒雷达和机载天气雷达工作范围都在1-10cm波长下(这个受限于天气因素)，频率大约是3GHz-30GHz。CAAC的文件规定，中国范围内的多普勒天气雷达的X波段为9300-9700MHz，C波段为5300-5700MHz，S波段为2700-2900MHz。&lt;/p&gt;

&lt;h1&gt;飞机对无线信号的耐受性&lt;/h1&gt;

&lt;p&gt;首先，如果飞机的通讯频率被大功率干扰，可能引发地面引导失效，造成严重后果。因此，飞机的通讯频率(121.5MHz、243MHz)，GPS频率，都不允许同频率信号。&lt;/p&gt;

&lt;p&gt;另外，如果干扰设备功率足够大，频率又处于比较高的位置。那么可能引发混叠现象，干扰低频设备的工作（不知道我有没有理解错误）。因此，在飞机上应当禁用任何高频率的大功率设备。&lt;/p&gt;

&lt;h1&gt;航飞安全禁令的来由&lt;/h1&gt;

&lt;p&gt;目前在各种航班上实行的安全禁令，是由FCC在1991年所规定的，并得到FAA的支持。然而，这一禁令最初针对的是上个世代的水壶型大哥大设备等，而且当时的飞行设备并没有经过专门考量，对民用的广泛分布的无线信号做出抵抗。由于当时基台密度比现在远低，因此这些设备的发射功率比目前的手机要大上很多，1-2W属于常态功率。因此FCC顾虑到，在飞机上使用手机可能对飞机的通信造成安全，从而影响顾客人身安全。因此，尽管没有明显而直接的证据，但是FCC仍旧颁布禁令，禁止在飞机上使用手机。&lt;/p&gt;

&lt;p&gt;一点直接的佐证即是，飞机上并没有配置无线信号定位系统。如果手机真的对飞行安全形成了直接的威胁，那么飞机上必然会配置手持式无线信号定位装置，借助三角定位法找出未关闭的手机。从无线技术原理上说，这是做的到的。这种做法可以有效补强空乘人员寻找手机的漏洞。正是由于手机的威胁仅仅是间接证据推测，因此飞机上始终未曾配备这些设备。&lt;/p&gt;

&lt;p&gt;这里体现的是一种谨慎原则，当某个新鲜事务可能对人类产生威胁时，如果没有明确证据表明“没有威胁”，则默认断言“存在威胁”。在面对未知的，新生的事务中，谨慎原则不止一次的拯救过人类。当然，与此相对的，也不止一次的由于过度谨慎而坑过爹。然而在综合双方带来的影响后，人类仍然坚持了谨慎原则。这本质上是对有利可图的商家，国家，或者其他掌握力量的个人或组织的警惕。&lt;/p&gt;

&lt;p&gt;但是，在经过长时间的接触后，谨慎原则是否适用，可能会需要重新评估。如果坚守谨慎原则，第一件应当被禁止的事情不是飞机上的手机，而是汽车。全球每年死于车祸的人高达几十万，只要禁用掉汽车就没这个问题了。可是谁也不曾提出过禁止汽车上路(中国某些部门的新交通法规是个例外)。正是因为人们感受到，汽车对人类带来的好处远远大于造成的问题。&lt;/p&gt;

&lt;p&gt;同样，电子设备是否可以用于飞机上，这个问题也需要随着电子工程的发展和电子产品深入人们的生活而重新评估。在这里可以毫不客气的说，由于电子产品已经深入了人们的日常生活，成为生活的一部分。如果无原则的坚持禁令，就是反人类。在这种情况下，需要考量的不是坚持还是不坚持禁令的问题，而是需要重新审视和设计，制造飞行器，使其可以满足人类随时进行通讯的基本需求。&lt;/p&gt;

&lt;h1&gt;对于不显式发出无线信号的设备&lt;/h1&gt;

&lt;p&gt;这类设备没什么好禁用的。不过这句话要说的比较严密，应当是加上限制，在设备本身辐射不大的情况下。显然，微波炉本身也不显式的发出无线信号，可是那玩意的电磁泄漏明显不适合在飞机上使用。&lt;/p&gt;

&lt;p&gt;但是话说回来，有几个SB会把微波炉带上飞机的！&lt;/p&gt;

&lt;p&gt;而且很大程度上，这类设备并不能真的“禁用”，因为不少人类生活严重依赖于电子设备，例如人工心脏起搏器，或者是电动轮椅，助听器。固然，航飞部门可以发布警告，提醒使用以上设备的人乘坐飞机的风险。但是不能在没有明显理由的情况下拒绝乘客，因为他们使用了助听器。&lt;/p&gt;

&lt;h1&gt;对于使用2.4G和5G频段的短距离通信设备&lt;/h1&gt;

&lt;p&gt;2.4G是国际规定的无线保留频段，使用这个频段不需要特殊的申请或者执照。因此，如果在2.4G引发了干扰，干扰源又是按照标准(&amp;lt;100mW)的，那么被干扰者只有自己摸摸鼻子认倒霉。例如深圳某地铁使用2.4G频段作为闭塞用，结果被干扰导致列车老停车，这就明显是设计者考虑不周。&lt;/p&gt;

&lt;p&gt;频段上没问题了，我们再说说功率。常规的wifi设备功率都在50mW以下，而且一般功率只小不大。因为发射功率的增加是以增加耗电量为代价的，便携设备哪里来那么多电给你消耗。真正功率比较大的，常见的是用于蹭别人家网用的特制无线网卡，俗称“卡皇”。其功率从200mW到数瓦不等。部分设备甚至可以截听公里级别的wifi信号，功率超过手机。这部分违规设备应当严禁携带上飞机。&lt;/p&gt;

&lt;p&gt;对于100mW以下的合法设备，不应当处于飞机无线管制的范围内。预计在可见的将来，针对近距离通讯设备的禁令就可能会解除。即飞机上的广播中，应当会去掉“请关闭手机的无线功能”等。作为作证，可以参考这条新闻，&lt;a href=&#34;http://www.cnbeta.com/articles/204439.htm&#34;&gt;云南三架飞机将提供WIFI服务&lt;/a&gt;。如果不取消禁令，又自行提供wifi信号，岂不是自打嘴巴？当然，安全起见，在飞机的起飞和降落期间还是应当关闭wifi热点。&lt;/p&gt;

&lt;h1&gt;使用800M和1800M频段的通信设备&lt;/h1&gt;

&lt;p&gt;这个又要分的比较严密了。这类的设备主要分为两种，GSM和CMDA2000。严格来说，GSM的信道才是900MHz，1800MHz和1900MHz，CDMA2000的信道是上行1920～1980MHz，下行2110～2170MHz。功率都是1-2W左右。&lt;/p&gt;

&lt;p&gt;然而GSM方式造成的干扰比CDMA方式严重的多。因为CDMA基于码分多址，而GSM基于时分复用。由于是时分复用，因此设备只能在许可时隙内发射信号，信号呈脉冲型。脉冲型的信号调制就坑爹了，因为脉冲信号的开始和结束时会对其他频率造成影响。关于这点我不知道怎么向没有高等数学基础的读者表达，大致理论是一个方波可以被变换为一系列正弦波的加成。&lt;/p&gt;

&lt;p&gt;由于这一特性，因此FCC才会顾虑GSM对飞机通讯系统的干扰。&lt;/p&gt;

&lt;p&gt;因此，我觉得航飞系统未来可能考虑解除CDMA的禁令，或者更进一步，在机内部署低功率CDMA基站。因为CDMA对其他信道的干扰小，而基站在附近产生的干扰更加小。在机内建立基站有几个好处。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;降低手机辐射。非常悖论的，当手机无法接收信号的时候，其功率最大。因此一旦在飞机内建立基站，手机的发射功率就会受到控制。&lt;/li&gt;
&lt;li&gt;将CDMA转为飞机可以容耐的地-空通讯，提供飞机上拨打电话的功能。当然，这个特性可以作为飞机服务加以运营。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至于GSM，貌似在可见的未来并不会纳入考量。&lt;/p&gt;

&lt;h1&gt;飞行模式&lt;/h1&gt;

&lt;p&gt;鉴于飞机上不允许使用手机，而智能机又迅速普及，很多厂家推出了“飞行模式”功能。飞行模式的原理，在于手机可以通过软件关闭GSM通讯模块和wifi/蓝牙通讯模块，从而使得设备从普通通讯设备变成不显式发出无线信号的设备。从原理上说，这确实是可行的。&lt;/p&gt;

&lt;p&gt;然而很多航空并不买账，其机上禁令仍然包括“飞行模式”。&lt;/p&gt;

&lt;p&gt;我不知道这基于一个什么样的理由，至少不是纯技术层面的理由。因为从技术上说，飞行模式的手机产生的干扰远比电脑低。根据某些报道，这可能是由于山寨手机厂出品的手机，并没有真的实现“飞行模式”，而是仍旧发射无线电，只是软件上禁止了接入和拨出。&lt;/p&gt;

&lt;p&gt;不得不说，很多事情就坏在这些SB身上了。&lt;/p&gt;

&lt;h1&gt;关于飞机上的手机信号&lt;/h1&gt;

&lt;p&gt;即使在飞机上完全没有手机的情况下，也无法隔绝手机信号对飞机的影响。大功率基站在没有干扰的情况下，覆盖范围可达10公里，而飞机一般的飞行高度都在3公里-10公里之间。因此如果飞机围绕着一部基站盘旋，从飞机上完全可以进行手机通话。当然，如果飞机沿着径向行驶，那么会引起很强的多普勒效应（比火车速度快很多），从而造成拨打困难。所以说，运气好的情况下在空中开机居然还有信号，就是这个道理。作为例子，在911事件中，有部分乘客可以通过手机向外部传递信息。&lt;/p&gt;

&lt;p&gt;鉴于此，也许在10年后，由于飞机的更新换代，老机型的淘汰。上飞机就不需要关闭手机了。&lt;/p&gt;

&lt;h1&gt;关于1991年某飞机因为手机反推装置打开的说明&lt;/h1&gt;

&lt;p&gt;网络上多半是流传1991年某英国航空，我找了一下空难列表，1991年反推事故的貌似只有劳达航空004号班机号空难(也称奥地利航空，不过好像被收购过，所以具体不明)，具体可以看&lt;a href=&#34;http://zh.wikipedia.org/wiki/%E7%B6%AD%E4%B9%9F%E7%B4%8D%E8%88%AA%E7%A9%BA004%E8%99%9F%E7%8F%AD%E6%A9%9F&#34;&gt;wikipedia页面&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;根据下面给出的&lt;a href=&#34;http://www.rvs.uni-bielefeld.de/publications/Incidents/DOCS/ComAndRep/LaudaAir/LaudaRPT.html&#34;&gt;劳达航空004号班机的事故调查报告&lt;/a&gt;，我通篇找不到手机(mobile)，或者干扰(intrusion)之类的字眼。事故原因分析貌似是说，因此由于某些照明电路的电路故障，导致反推装置启动。在系统改进中，也没有要求飞机上关闭手机的建议，只是建议飞机上的电子设备增加屏蔽装置，屏蔽电磁干扰。注意，这里屏蔽的目标不是无线通讯干扰，而是电路故障造成的电火花(hot short)。&lt;/p&gt;

&lt;p&gt;同时，飞机也会频繁穿越积雨云之类的电磁异常区域。由于飞机上的控制系统异常重要，而飞机本身的电磁环境不稳定，因此使用无线控制飞机是不可行的。&lt;/p&gt;

&lt;h1&gt;关于在医院使用手机的问题&lt;/h1&gt;

&lt;p&gt;医院使用手机，电脑是一个需要慎重考虑的问题，因为确实有很多医疗设备使用了2.4G频段。甚至由于人体器官尺寸等原因，有很多医疗设备并不能自己选择工作频率。例如在深圳的地铁干扰问题上，医院的B超亦是干扰源之一，见&lt;a href=&#34;http://news.ifeng.com/mainland/detail_2012_11/08/18938803_0.shtml&#34;&gt;这里&lt;/a&gt;。可以想见，如果将卡皇带到医院去使用，也可能对B超设备产生干扰。&lt;/p&gt;

&lt;p&gt;但是，对上述新闻，我抱持怀疑态度。借助声波工作的B超为什么会发射如此强烈的电磁信号，而且信号频率居然高达2.4G。这本身就是件很奇怪的事。由于报道并没有列出关联信息，因此无从查起，姑且信之。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>支付宝体系的问题</title>
      <link>https://shell909090.org/blog/archives/2302/</link>
      <pubDate>Mon, 31 Dec 2012 01:54:19 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2302/</guid>
      <description>&lt;p&gt;今天和几位朋友讨论了一下支付宝的问题，又查了一下case，发现支付宝的问题不仅是那么简单而已。先不吐槽支付宝的问题了，赶快出验证和方案。
&lt;h1&gt;在被人恶意补卡的情况下是否安全&lt;/h1&gt;
关于恶意补卡，&lt;a href=&#34;http://bbs.paidai.com/topic/37047&#34;&gt;这里&lt;/a&gt;有个例子。简单来说，就是知道你的身份证和手机号，去异地营业厅用假身份证补手机卡。然后用手机卡获得支付宝系统，再套现。&lt;/p&gt;

&lt;p&gt;贝壳分析了自己的系统，如果恶意补卡的话，对于200以上的消费转账，会要求输入宝令。宝令是绑定在手机而非卡上的，所以攻击者会无法消费。而要取消宝令就必须输入宝令，通过手机卡无法取消。因此攻击者即使补贝壳的卡，也无法进行200以上的消费。&lt;/p&gt;

&lt;p&gt;但是如果你用的是U盾，那问题就没那么简单。在支付宝的设计中，手机是可以解除U盾绑定的。所以U盾不能对抗恶意补卡。&lt;/p&gt;

&lt;p&gt;结论：如果仅仅是200而已，我可以认为这个系统是安全的。
&lt;h1&gt;在手机丢失的情况下是否安全&lt;/h1&gt;
如果手机丢失，问题就更加严重。支付宝密码，支付密码均会被找回，宝令本身就在手机里，因此支付宝的支付系统全面沦陷。支付宝内资金肯定不保。问题是卡上资金。&lt;/p&gt;

&lt;p&gt;贝壳绑定了两张卡，浦发和招商，先从快捷支付检查起。检查浦发的卡发现，对支付宝默认开了20000的签约支付额度，当场汗就下来。对于快捷支付来说，这太高了。速度改成300。对于超过300的，依然可以通过网银验证来支付，比较安全。&lt;/p&gt;

&lt;p&gt;招行的快捷支付我从头到脚就没看到签约这回事，貌似必须进行网银支付。那就需要我的卡号有效期密码什么的。我觉得这个不大可能出问题。&lt;/p&gt;

&lt;p&gt;再检查浦发的普通支付，这需要登录浦发的网上银行。浦发网银是通过手机加密码验证的，基本可以保证转账汇款的安全。&lt;/p&gt;

&lt;p&gt;结论：目前调整的结果，一次损失300左右。
&lt;h1&gt;网银的一点隐忧&lt;/h1&gt;
目前网银的密码都太弱了。浦发只有6位数字，招行也只有8位数字字母。难道就不能设定强一些的密码么？&lt;/p&gt;

&lt;p&gt;浦发可能是要和卡本身的密码兼容，将手机作为补强。可是手机也会掉啊。一旦手机掉了，整个安全性就由6位数字密码保护。这和掉银行卡一样严重。
&lt;h1&gt;建议&lt;/h1&gt;
&lt;ol&gt;
    &lt;li&gt;移动和联通关闭身份证显示，尤其是最后四位！&lt;/li&gt;
    &lt;li&gt;无论哪种级别，使用支付宝一定要打开宝令。目前只有宝令可以有效对抗补卡攻击。&lt;/li&gt;
    &lt;li&gt;在智能机上又绑定网银的，就不要乱装软件，更不要root/越狱。&lt;/li&gt;
    &lt;li&gt;中国移动的补卡修改流程。如果当前卡处于激活中，先持续警告旧卡24小时后再激活新卡。&lt;/li&gt;
    &lt;li&gt;移动至少应当允许客户自行选择“这个手机号码极端重要，不得实行异地补卡，不得显示个人信息，复机/补卡间隔需要在24小时以上”的增强选项。&lt;/li&gt;
    &lt;li&gt;理论上说，移动应当可以推进二代身份证验证能力。使得补卡业务实行时，必须凭借二代身份证验证身份后进行。杜绝假身份证。&lt;/li&gt;
    &lt;li&gt;支付宝的密码找回功能降速。从开始找回，发短信和邮件通知，到完成找回密码至少要一小时，最好要24小时才能找回密码。或者允许可以设定“我自愿将找回密码时限改为24小时”以增强安全性。&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>老大啊，你这是什么鬼名字</title>
      <link>https://shell909090.org/blog/archives/2269/</link>
      <pubDate>Sat, 03 Nov 2012 19:58:40 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2269/</guid>
      <description>&lt;h1&gt;sbcl&lt;/h1&gt;

&lt;p&gt;不知道大家用没用过common lisp，这是一种语言，最早是为了计算理论而生的。这种语言以规模大，难掌握，实现多，标准不统一而著称。&lt;/p&gt;

&lt;p&gt;Steel Bank Common Lisp，简称sbcl，就是其中一种实现。他派生于SMUCL，是目前为止我看到的最好的开源实现。反正我在求解N多问题的时候，sbcl在速度和内存占用比上的表现相当抢眼。在lisp系列中称第一，和go这种静态语言相比也不遑多让。&lt;/p&gt;

&lt;p&gt;但是每次我看到这个缩写都忍不住想吐槽，这是什么鬼名字啊。SB Common Lisp？&lt;/p&gt;

&lt;h1&gt;debian&lt;/h1&gt;

&lt;p&gt;大家也许听过，也许没听过，debian社区曾经为了中文名字的事情争吵过。&lt;/p&gt;

&lt;p&gt;从我看到的材料上看，很多人对debian的默认念法是——大便。。。&lt;/p&gt;

&lt;h1&gt;lua&lt;/h1&gt;

&lt;p&gt;我就不吐槽了，号称屌丝语言。&lt;/p&gt;

&lt;p&gt;LZ不哭，站起来lua。&lt;/p&gt;

&lt;h1&gt;go&lt;/h1&gt;

&lt;p&gt;google的奇葩语言。每次我要查某个用法的时候，都很郁闷。为什么呢？因为几乎所有的网页都命中&#34;go&#34;。&lt;/p&gt;

&lt;p&gt;以StartProcess为例，我这里搜素go StartProcess的第一个命中在MSDN，微软有个API就叫StartProcess。再后面就是财经新闻。在很后面才能看到go的API。&lt;/p&gt;

&lt;h1&gt;etc&lt;/h1&gt;

&lt;p&gt;IT界还有什么奇怪的名字？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>自由软件的基础讲解</title>
      <link>https://shell909090.org/blog/archives/2237/</link>
      <pubDate>Mon, 10 Sep 2012 11:58:22 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2237/</guid>
      <description>&lt;h1&gt;授权&lt;/h1&gt;

&lt;p&gt;本文档内容基于cc-by-sa3.0下发布。&lt;/p&gt;

&lt;p&gt;您可以自由复制、发行、展览、表演、放映、广播或通过信息网络传播本作品，创作演绎作品，对本作品进行商业性使用。惟须遵守下列条件。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;署名 — 您必须按照作者或者许可人指定的方式对作品进行署名。&lt;/li&gt;
&lt;li&gt;相同方式共享 — 如果您改变、转换本作品或者以本作品为基础进行创作，您只能采用与本协议相同的许可协议发布基于本作品的演绎作品。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体信息请查看&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/deed.zh&#34;&gt;署名-相同方式共享 3.0&lt;/a&gt;。&lt;/p&gt;

&lt;h1&gt;从一个软件说起&lt;/h1&gt;

&lt;p&gt;给大家介绍一个软件，comix。comix是一个由python和GTK+写成的漫画浏览软件。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持zip, rar， tar等格式的压缩包直接浏览&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;li&gt;有自己的用户群和wiki页面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是某天，我在Windows下使用comix的时候发现，在Windows下这货不支持压缩包直接浏览。而且手里有大量包是7z格式，木有办法使用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;检查源码，发现是/的问题。蛋疼的跨系统。&lt;/li&gt;
&lt;li&gt;根据网络上的提示，我发现有两个解决问题的方法。
&lt;ul&gt;
&lt;li&gt;使用封闭免费软件，例如honeyview，然后转跳到问题3&lt;/li&gt;
&lt;li&gt;自己修掉这个bug，反正只有一处，然后转跳到问题4&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;7z格式木有办法，只能苦等最新版本出来，完了。&lt;/li&gt;
&lt;li&gt;需要7z支持，自己又做了一个7z支持的补丁，从此所有漫画都可以直接浏览&lt;/li&gt;
&lt;li&gt;我希望向官网提供我的补丁，发现软件已经失去维护&lt;/li&gt;
&lt;li&gt;在寻找的时候，我发现有爱好者维护了一个新的分支，mcomix。解决了很多历史bug，同时支持了7z&lt;/li&gt;
&lt;li&gt;原来在问题2上，有一个隐藏选项，直接用mcomix，完了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这说明，在你想出一个需求的时候，最好先问问资深用户，是不是已经被解决了。很多时候，不要重复造轮子。&lt;/p&gt;

&lt;h1&gt;修改源码？听起来好像很麻烦&lt;/h1&gt;

&lt;p&gt;如果不是职业程序员，还是别想了。调试软件和修改源码需要专业知识（当然，不需要是计算机系出身，但是需要专门的学习）。但是掌握技巧后，修改一个bug并不是很困难。然而，拥有修改源码的能力，表示这个软件和那些“你无能为力”的软件有所不同。&lt;/p&gt;

&lt;h1&gt;神码叫做自由软件&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;无论如何，你可以自由使用。这隐含了软件是免费的（或者满足一定条件下免费）。&lt;/li&gt;
&lt;li&gt;源码开放。用户有研究如何使用的自由。&lt;/li&gt;
&lt;li&gt;重新发布源码。用户可以让别人使用，或者包含在其他产品中使用。&lt;/li&gt;
&lt;li&gt;改善软件。用户有改善软件的自由。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，自由软件的前提是，软件必须是开源软件。&lt;/p&gt;

&lt;h1&gt;两个软件的不同遭遇&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Foxpro VS Sql Server&lt;/p&gt;

&lt;p&gt;老计算机用户都应当记得foxbase和foxpro这两个软件。当年风光一时的数据库软件，在被微软收购后，就黯淡无光了。尽管退出市场的主要原因是因为单机开发模式并不适应网络大规模开发，但是这只需要设立一个网络层就可以解决。微软在收购Sql Server后，为了保证其市场地位，收购并雪藏了foxpro。目前该软件已经停止开发，最新版本的支持也即将过期。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mysql VS Oracle&lt;/p&gt;

&lt;p&gt;同样可怕的事情发生在mysql身上，做web开发的应该无人不知其大名。在Oracle收购后，Mysql也面临和foxpro同样的遭遇，更巧的是，他们同样是数据库类软件。
然而Oracle无法雪藏Mysql。因为一旦Oracle雪藏Mysql，其他人可以继续Mysql的某个开源分支继续开发一个完全不同的东西。Mysql的创始人之一，Michael Widenius支持这个做法。
因此，直到目前为止，Oracle都没有停止对Mysql的支持。
当然，由于未来的风险，一些人在选择新数据库的时候转向了PostgreSQL，或者其他选择。然而已有的系统不会受到影响，已经学了Mysql的用户也不会受到影响。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果当年Mysql是闭源，那么。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;很多基于Mysql的改造是不可能的，例如mysql proxy。&lt;/li&gt;
&lt;li&gt;今天Mysql管理员大概就得赶快再学些别的东西。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;自由软件有版权么？&lt;/h1&gt;

&lt;p&gt;有，版权是一个人完成一个产品后自然具备的权力。开放源码并不剥夺这个权力。一个人完成了一本小说，并让别人观看了，难道他就失去版权了么？我们一般在谈论版权的时候，往往和其他权力混淆起来。实际上，版权这个东西，其实指的是著作权。基本权力包括两种，人格著作权和财产著作权。衍生权力就更多了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;人格著作权
&lt;ul&gt;
&lt;li&gt;公开发表&lt;/li&gt;
&lt;li&gt;署名&lt;/li&gt;
&lt;li&gt;扭曲&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;财产著作权
&lt;ul&gt;
&lt;li&gt;复制&lt;/li&gt;
&lt;li&gt;公开口述&lt;/li&gt;
&lt;li&gt;公开播送&lt;/li&gt;
&lt;li&gt;改编&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自由软件主要放弃的，是对衍生权力的追究。即，作者授权你，在一定的条件下，可以进行合法的复制/改编，而不追究你的责任。但这不表示作者放弃版权。&lt;/p&gt;

&lt;h1&gt;授权协议&lt;/h1&gt;

&lt;p&gt;既然作者授权你如何如何，那么这就算是一份授权协议。我们下面列一下常见的授权协议：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;封闭协议
&lt;ul&gt;
&lt;li&gt;最终用户协议（EULA）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;开源协议
&lt;ul&gt;
&lt;li&gt;LGPL：修改源码后不得闭源，新增代码可以不采用同样许可证，源码修改处不需要说明文档&lt;/li&gt;
&lt;li&gt;Mozilla：修改源码后不得闭源，新增代码可以不采用同样许可证，源码修改处需要说明文档&lt;/li&gt;
&lt;li&gt;GPL：修改源码后不得闭源，新增代码必须采用同样许可证&lt;/li&gt;
&lt;li&gt;BSD：修改源码后可以闭源，每个修改的文件不必放置版权说明，衍生软件不得用你的名字做广告&lt;/li&gt;
&lt;li&gt;MIT：修改源码后可以闭源，每个修改的文件不必放置版权说明，衍生软件可以用你的名字做广告&lt;/li&gt;
&lt;li&gt;Apache：修改源码后可以闭源，每个修改的文件都必须放置版权说明&lt;/li&gt;
&lt;li&gt;cc：创作共用协议，包括几种变化（by：署名，nc：非商业使用，nd：禁止演绎，sa：相同方式）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;这么多授权，蛋疼不？&lt;/h1&gt;

&lt;p&gt;授权是从血泪教训中衍生出来的。我们下面讲一个开源的例子，大家非常熟悉的视频播放器&lt;/p&gt;

&lt;p&gt;在以往，个人电脑只能使用微软开发的MPEG-4 Codec，即MS MPEG4 V1、MS MPEG4 V2、MS MPEG4 V3的系列编码核心。其中以MS MPEG4 V3的画质最好。不过其只可用在ASF文件，但这个文件格式是封闭的。故此网上有些黑客将其改写为著名的MPEG4 Codec DivX 3.11。&lt;/p&gt;

&lt;p&gt;但问题是，DivX 3.11的基础技术是非法盗用微软的，无法进行更广泛的产品化及生产硬件播放机。因此，一些精通视频编码的工程师（包括原DivX 3.11的开发者）成立了一家名为DivX Networks Inc.的公司，简称DXN。他们主导了完全符合ISO MPEG4标准的Open DivX CODEC的开发，并吸引了许多软件高手参与。这时，主要的编程工作是由DXN来做，但很多技术上的难题却是由开放源代码社区帮忙解决。&lt;/p&gt;

&lt;p&gt;但因为整个计划并不是根据GPL开发的，而是LGPL，因此在Open DivX即将成形时，DXN 借此漏洞将其闭源，结果使众多开放源代码社区的义工感到被出卖。也是因为这个原因，整个 0day 组织永远的拒绝了 DXN 公司的 DivX 格式。&lt;/p&gt;

&lt;p&gt;而原Open DivX计划的义工最后决定在最后一个Open DivX版本的基础上，编写XviD（将DivX反过来写）以继续原Open DivX的目的。&lt;/p&gt;

&lt;p&gt;大约1年后，Xvid计划的开发者重写了所有代码，并依照GPL发布（而不再是LGPL，所以谁要是想用它做成产品而不开放源代码是非法的）。但因为某些国家如美国，日本有软件专利法，使得其在该地区可能出现法律纠纷。因此，Xvid官方站点只提供源代码下载，用户只可由第三方站点下载第三方的安装档。&lt;/p&gt;

&lt;p&gt;* 摘自&lt;a href=&#34;http://zh.wikipedia.org/wiki/Xvid#.E6.AD.B7.E5.8F.B2&#34;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;对于非法的侵权，自由软件可以怎么办&lt;/h1&gt;

&lt;p&gt;Libav（旧称：FFmpeg）是一个自由软件，可以运行音频和视频多种格式的录影、转档、流功能，包含了libavcodec ─这是一个用于多个专案中音频和视频的解码器库，以及 libavformat ——一个音频与视频格式转换库。&lt;/p&gt;

&lt;p&gt;由于Libav/FFmpeg是在LGPL/GPL协议下发布的（如果使用了其中一些使用GPL协议发布的模块则必须使用GPL协议），任何人都可以自由使用，但必须严格遵守LGPL/GPL协议。目前有很多播放软件都使用了Libav/FFmpeg的代码，但它们并没有遵守LGPL/GPL协议，没有公开任何源代码。Libav/FFmpeg 社区便将这些违反协议的公司/组织/个人的网址粘贴“耻辱大厅”（又叫“耻辱柱”）上，并与这些公司/组织/个人商讨如何解决版权争议。&lt;/p&gt;

&lt;p&gt;* 摘自&lt;a href=&#34;http://zh.wikipedia.org/wiki/Libav&#34;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://libav.org/shame.html&#34;&gt;耻辱柱地址&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The KMPlayer, issue tracker entry&lt;/li&gt;
&lt;li&gt;MediaCoder, issue tracker entry&lt;/li&gt;
&lt;li&gt;QQPlayer, issue tracker entry, reproduced 2009-11-04&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;自由软件的优劣&lt;/h1&gt;

&lt;p&gt;使用自由软件，有一点很大的劣势。如果你是商业软件用户，那么软件公司需要始终保证你的售后。&lt;/p&gt;

&lt;p&gt;用户： 您好，我的电脑开不了机器了。
客服： 请问您电源插了没有？
用户： 阿，好的，问题解决了，谢谢。&lt;/p&gt;

&lt;p&gt;然而使用自由软件就意味着两件事：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果软件造成其他损失（例如停产，错误，硬件损坏，或者造成使用者被起诉），软件作者是不负任何责任的（插一句，这也是我不建议使用盗版的最主要原因）&lt;/li&gt;
&lt;li&gt;如果软件有问题，那么需要等到有人对这个问题有兴趣并进行修复。
&lt;ul&gt;
&lt;li&gt;有些软件的修复速度很惊人。我见到最快的是10分钟，不开玩笑，软件是gitstat。
中文编码问题，修复只要一行，作者10分钟内就修复了问题，一小时内发布了新的包。&lt;/li&gt;
&lt;li&gt;有些则是慢的惊人。据说某些大型系统（不点名）里面最长的未修复bug长达10年。。。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不过好在，自由软件也有着封闭软件没有的优点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果你对某个特性不舒服，你可以很容易的修改他。如果你不是程序员，你可以指望有个程序员一样对这个事情觉得不舒服。&lt;/li&gt;
&lt;li&gt;无论如何，你始终可以得到某个版本的软件，哪怕作者已经停止维护（例如msf-abbrev），进监狱（例如raiserfs4），或者已经挂了（PKZIP）。
自由软件唯一被废弃的理由就是不再有人使用了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;源码开放，安不安全&lt;/h1&gt;

&lt;p&gt;自由软件社区有一个理论，足够多的眼睛。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;足够多的眼睛能够发现软件的一切问题，就是说，软件的使用者和关注着够多的情况下，软件的bug很快就会被发现和消除。&lt;/li&gt;
&lt;li&gt;密码学说，安全性依赖于本身机制的安全性，而非黑盒子。即其他人即使知道了你的机制，也无法攻破系统。
而依赖黑盒子的系统，一旦盒子里面的把戏泄漏，要换一个盒子就要很高昂的成本。&lt;/li&gt;
&lt;li&gt;当然，这并不表示封闭软件是依赖于黑盒子保证其安全的。但是是否如此，你不知道，我也不知道。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;自由软件如何盈利&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;卖服务，例如RedHat。虽然软件不要钱，但是咨询，要钱，修Bug，要钱，维护，要钱。&lt;/li&gt;
&lt;li&gt;卖授权，例如GhostScript。由于GhostScript的源码是GPL发布，使用GS进行重发布的人只有几个选择。
&lt;ul&gt;
&lt;li&gt;开放自己的源码&lt;/li&gt;
&lt;li&gt;使用Adobe的库&lt;/li&gt;
&lt;li&gt;自己写一套&lt;/li&gt;
&lt;li&gt;违反版权，并被告上法庭&lt;/li&gt;
&lt;li&gt;买AFPL的授权&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;伸手要钱，例如Mozilla。软件的流行会给厂商带来非直接的好处。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>电池阿电池</title>
      <link>https://shell909090.org/blog/archives/2104/</link>
      <pubDate>Mon, 05 Mar 2012 03:03:52 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2104/</guid>
      <description>&lt;p&gt;三个月之内，连续两次碰到电池问题。一个是p81hd的充电口损坏，送修两个月没法用。拿回来后，发现因为无电时间过长，电池受损，大概只有2.5小时的电量（原来至少4小时）。另一个是hpmini 1017TU已经损坏的电池，居然鼓起了一个包！！！一个包在电池中央，吓得我顿时就拆下电池，放的远远的，以免爆炸。 &lt;div&gt;    贝壳自认还是比较爱护电池的，没有频繁冲放，没有过充过放，基本都是10%-90%区间放电。但是电池还是连续出问题，只能说目前的锂电池性能还远远不过关。&lt;/div&gt;&lt;div&gt;    现在已经预定了一个新的hpmini电池，但是p81hd的电池就不知道该怎么处理。而报废的锂电池也不敢乱扔，不知道有没有什么地方可以处理旧电池的。&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于酒精带上飞机</title>
      <link>https://shell909090.org/blog/archives/2102/</link>
      <pubDate>Mon, 27 Feb 2012 02:03:48 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2102/</guid>
      <description>&lt;p&gt;刚刚看空中浩劫，有个哥们，是飞行员，空难调查专家。去度假的时候摔在了关岛。等他好了，就开始鼓吹飞机的座椅应该去掉个横杠，而且酒精不能随身携带。 &lt;div&gt;    因为飞机出事的时候，氧气泄露，都在往天花板跑。而当时关岛去的时候，很多人带了很多免税酒。这些酒在摔飞机的时候挥发的酒精和氧气结合，被点燃，然后引发了大火。所以这哥们说，酒精不能放入天花板的行李舱里面。&lt;/div&gt;&lt;div&gt;    这绝对是从血里面学到的东西，想带酒的不妨考虑一下。&lt;/div&gt;&lt;div&gt;    至于为啥不让带液体，则是另一个哥们。这兄弟是纽约摩天大楼爆炸案的主角，在菲律宾飞往日本的飞机上，带上去了一个炸弹做测试（测试。。。）。炸弹使用液态材料，用一个电子表做触发，两个电池做外部能源。这哥们放好炸弹自己跑了。飞机飞到一半的时候，把一个小日本直接炸了个暴菊而亡，飞机迫降那霸。如果不是这哥们对飞机的了解不深，查到的资料是同型号飞机的（型号差一点害死人阿）。这颗炸弹就会直接炸穿主油箱，然后引燃燃油，再炸掉整个飞机。幸好，他放炸弹的地方刚刚好差了一两排。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;    想带液体的不妨考虑一下。&lt;/div&gt;&lt;div&gt;    至于为啥锂电池不能带上行李舱——估计是太多国产山寨手机炸的老外暴菊而亡，他们不敢让你离开这种危险品吧。&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>昨天那个事情的后续——也谈网络安全</title>
      <link>https://shell909090.org/blog/archives/2064/</link>
      <pubDate>Fri, 13 Jan 2012 04:06:09 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2064/</guid>
      <description>&lt;p&gt;安全无小事阿，昨天批评到一半，发现遇到李鬼了。尴尬，赶紧修正文章，不知道影响多大。&lt;div&gt;    我们事后推理，问题可能是这样的。有人故意在赶集网上用别人电话发布信息，然后等你的电话被打爆。赶集网本身只允许举报手机滥用，而不支持座机举报。所以你会找客服电话，但是他们客服电话又找不到。他们做一下SEO搜索，或者直接买关键词。你通过搜索，找到的就是他们。你要取消，他们就要你汇保证金。保证金进去了，然后你就被骗了。&lt;div&gt;    当然，文章本身的批评也算是成立，常规发布电话信息应当是先确认再使用的，投诉的系统也应该支持座机等方式。由李鬼客服的存在，你可以想见到底有多少人试图投诉电话被错误使用，在系统中又无法删除。&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;    但是我要说的是，这个诈骗差点成功的关键原因在于——赶集网没有公布自己的客服电话。由于没有官方公布，因此使用搜索引擎搜到的根本是李鬼。当然，如果打官司，赶集网肯定是无责任的。但是，被骚扰过的公司都知道，真的到了这个地步，你会很烦，非常烦。我相信对百度恨之入骨的不少公司应该都知道我的意思——明明不是我的事情，脏水泼头上，客户在骂娘。&lt;/div&gt; &lt;div&gt;    我更进一步看了一下赶集网这个网站，安全么？也不安全。别的不说，登录系统还是使用http，而非https。两者差异非常大。使用http的，只要通过一个恶意的网关，就可以捕获到用户密码。作为玩玩而已的网站，我觉得使用http也就算了。作为一个商业公司，登录系统不使用https，实在是有点不专业。至于投诉电话也是一个例子。如果你打算联系新浪，打开网页，拉到最下方，直接就有400电话，根本不用担心这个问题。&lt;/div&gt;&lt;div&gt;

     各个网络教材反复告诉我们，安全不是一个技术问题。实际上，安全是一个从最高层到最下面的意识问题。作为安全的头一步，首先你要告诉你的用户——你应当信任什么。&lt;/div&gt;&lt;div&gt;    如果你的公司是一家实体公司，以电话业务为主。那么你的宣传要点可能就是电话，而网站的具体网址可能就是通过短信方式进行分发（至少要有这个功能）。这方面的例子有携程。而如果是一家网络公司，以网络业务为主。那么你的宣传要点就是你的网址。为了安全，我建议稍微做大一点的时候，就干脆点，把常见的拼写错误全买下来，省的李鬼入侵。你的地址，联系电话，都通过网络分发，而且要让别人找的到。&lt;/div&gt;

&lt;p&gt;&lt;div&gt;    上面一段简单点来说，就是，一个主要的宣传方式，上面发布所有的可信联系方式。为什么？如果你不发布，就可能有李鬼进来。到时候再处理，就非常困难。&lt;/div&gt;&lt;div&gt;    盗梦空间里面说过，要确认你在真实的世界，而不是梦境中，并不容易。现实中，要确认和你说话的人的真实身份，也不容易。通常来说，如果你问我借钱，我要给你钱，你都能在对话里面发现我会问你一些有点奇怪的问题。frank应该心领神会，他问我借卡的时候，我可是在敲定事情后直接抄起手机给他打了个电话。通常来说，IM可以被偷，但是电话没有道理一起被偷。即使被偷了，还能伪装声音，那我也认栽了。我现在还欠着钱没还的小一，某位报社编辑，还有我帮忙充过卡的老燕子。如果你们看到这篇文章，应该也能回想起我给你们相关信息时问过一些奇怪的问题吧。&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;    这些问题，叫做背景知识验证，我在前面的一篇文章中提到过。背景知识验证的基础是你们拥有相同的知识。而对于一个网站，你没办法使用这个办法的。所以，为了防止李鬼，你要反过来，使用无知假定。所谓无知假定，就是，在你面前的人充分证明自己之前，没人知道他是谁。也就是俗称的《互联网上没人知道你是一条狗》。所以作为客户来说，不要轻易相信搜到的联系方式，最好用114。当然，114上如果没有，那也没有什么太好的办法。&lt;/div&gt;&lt;div&gt;&lt;/p&gt;

&lt;p&gt;    另外昨天和42区的同学谈了谈，他说会警告赶集的朋友。毕竟李鬼的存在对正品网站是一种伤害。但是从现在来看，只能采取防御策略。具体什么策略，就看赶集网的计划了。不过比较有意思的是，昨天我们谈到李鬼的时候，说到“互联网人士也无法分辨”，他给了我一个例子。&lt;a href=&#34;http://rexsong.42qu.com/10037273&#34;&gt;在淘宝被诈骗5.46万始末&lt;/a&gt;。我看完吓了一跳。千鸟是小米的信息架构，算是IT圈子里面的人，不能算外行。在购物的时候，也是小心又谨慎。即使如此，还是被骗了！这只能说一点，即使是内行，也不要仗着自己专业就放松警惕。&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;    我仔细看了一下流程，主要能找到的问题有以下几个。不过需要提前说明的是，这些都是马后炮。很多事情我们知道不应该，但是真的都有避免么？如同我某篇文章说的那样，就是彻底的神经质了。&lt;/div&gt;&lt;div&gt;1.在不可信环境中消费。这是一切问题的根源。本质上说，应当把环境分为“可信”和“不可信”，并且在几个信任等级间架防火墙。可信机器可以通过虚拟机产生一个不可信环境（沙盒），但是反之不可以。同密级机器可以弱密码或无密码互联。高密级机器可以无密钥连接低密级，反之不行。&lt;/div&gt;

&lt;div&gt;2.没有在发生问题的第一瞬间进行止损。对于大额支付（对我而言，1000以上统统叫大额），网银一旦提示成功，而支付宝里面没看到钱。第一瞬间反应绝对不是再来一次，而是直接敲电话给网银，然后是支付宝。绝对不要试图在支付失败问题没搞明白的时候再试验一次，就算试，最多也只能试一毛钱。&lt;/div&gt;&lt;div&gt;    但是归根结底，这件事情轮到谁头上基本都是中招的，因为要管理的问题太多了。&lt;/div&gt;&lt;div&gt;    反思了一下自己，我打算在自己的环境中推进几个事情。&lt;/div&gt;

&lt;div&gt;1.重新设定防火墙，关闭不需要的服务和开放设定。&lt;/div&gt;&lt;div&gt;2.重整U盾，假定他可复制，因此需要使用特殊的保密环境进行支付。&lt;/div&gt;&lt;div&gt;3.对环境中的几台不可信机器进行行为监控。&lt;/div&gt;&lt;div&gt;4.定期读日志，尤其是异常报告。&lt;/div&gt;&lt;div&gt;5.关掉“仅使用手机动态密码支付”的选项。&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;PS.这篇文章不代表我支持网络实名制，但是我觉得应当让自己想实名制的人实名制。&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>大家帮我验证一下证书</title>
      <link>https://shell909090.org/blog/archives/2046/</link>
      <pubDate>Wed, 28 Dec 2011 17:53:05 +0800</pubDate>
      
      <guid>https://shell909090.org/blog/archives/2046/</guid>
      <description>&lt;p&gt;今天一个朋友和我聊天的时候，问我，是不是hosts不安全。我说，都不安全。翻墙的话，必须对翻墙服务器的拥有者相当信任才可以。不但要相信人品，而且要相信技术，相信服务器不会被入侵。使用gae的话，服务器要自己组建，否则你无法确定组建者是否会修改代码，加入监控代码再上传。hosts引入的问题是，你自己对自己进行了一遍dns毒化，如果目标本身是错的，你就傻乎乎的跳到了一个攻击者的机器上，而且你的行为使得域名核查不能阻止你犯错——他们也认为这个机器拥有你要去的domain。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;    不过有意思的是他给出的一个例子：&lt;br /&gt;&lt;a href=&#34;https://199.59.149.208/&#34;&gt;https://199.59.149.208/&lt;/a&gt;&lt;br /&gt;    这是用于访问twitter的一个hosts。&lt;br /&gt;&lt;a href=&#34;https://twitter.com/&#34;&gt;https://twitter.com/&lt;/a&gt;&lt;br /&gt;    问题是，两者的授权是不一样的。我在《&lt;a href=&#34;http://shell909090.org/blog/2011/04/%E8%AE%BA%E4%B8%8D%E5%90%8C%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/&#34;&gt;论不同系统和客户端的证书管理&lt;/a&gt;》里面说过，如果你访问google的时候发现证书是cnnic签署的，你是否觉得可怕。而这次，我发现hosts的证书是GeoTrust签署的，但是我访问twitter的证书是VeriSign签署的。&lt;div&gt;&lt;/p&gt;

&lt;p&gt;    一家网络公司会找两个不同的供应商签名么？我不清楚。chrome的自动验证对这个无效（所以很危险），因为域名和ip对不上。我试过用openssl验证，但是debian的openssl有个bug，我用CApath无法验证任何证书，包括真实的twitter证书。所以我也无法解答这个问题。从IP上看，这个IP到确实是Twitter的。&lt;/div&gt;&lt;div&gt;&lt;div&gt;NetRange:       199.59.148.0 - 199.59.151.255&lt;/div&gt;&lt;/p&gt;

&lt;div&gt;CIDR:           &lt;a href=&#34;http://199.59.148.0/22&#34;&gt;199.59.148.0/22&lt;/a&gt;&lt;/div&gt;&lt;div&gt;OriginAS:       AS13414&lt;/div&gt;&lt;div&gt;NetName:        TWITTER-NETWORK&lt;/div&gt;&lt;/div&gt;&lt;div&gt;    不过这不说明任何问题，完全有可能在路由器上把这一地址段定义到了其他设备上，从而实现man in middle。关键是证书——谁可以帮我验证一下这本证书是否有效？&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>