<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sicp on Shell&#39;s Home</title>
    <link>http://shell909090.org/tags/sicp/</link>
    <description>Recent content in Sicp on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Nov 2008 14:08:00 +0800</lastBuildDate>
    <atom:link href="http://shell909090.org/tags/sicp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SCIP,lambda,Church</title>
      <link>http://shell909090.org/blog/archives/45/</link>
      <pubDate>Mon, 10 Nov 2008 14:08:00 +0800</pubDate>
      
      <guid>http://shell909090.org/blog/archives/45/</guid>
      <description>&lt;p&gt;贝壳最近在看SCIP，感觉受益匪浅。其中有一个2.6，使用函数表达数字，很难理解。贝壳查了查资料，这篇（&lt;a href=&#34;http://blogs.sun.com&#34;&gt;http://blogs.sun.com&lt;/a&gt; /yongsun/entry/lambda%E6%BC%94%E7%AE%97%E4%B8%8Echurch%E8%AE%A1%E6%95 %B0）写的很好，贝壳就不多说了。贝壳把自己写的内容贴上来，作为一个借鉴。
(define zero (lambda (f) (lambda (x) x)))
(define one (lambda (f) (lambda (x) (f x))))
(define two (lambda (f) (lambda (x) (f (f x)))))
(define three (lambda (f) (lambda (x) (f (f (f x))))))
(define (add-1 n)
(lambda (f) (lambda (x) (f ((n f) x)))))
(define (add m n)
(lambda (f)
(lambda (x) ((m f) ((n f) x)))))
(define (mult m n)
(lambda (f) (m (n f))))
(define (show-func-number n)
(define (inc x)
(+ x 1)
)
((n inc) 0)
)
(show-func-number zero)
(show-func-number one)
(show-func-number (add-1 one))
(show-func-number (add one two))
(show-func-number (mult two three))
结果：
0
1
2
3
6
show-func-number这个函数是将高阶抽象函数序列映射到一个具体的数上的。工作方法是，建立一个函数x=x+1，然后使用给定的高阶函数来映射这个函数。n次高阶函数会映射这个函数n次，于是结果函数就是x=x+n。然后将这个函数作用于0，不难得到结果吧？&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>